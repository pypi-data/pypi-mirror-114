from [[ app_name ]].app import app
from [[ app_name ]].mailers import send_password_reset_email
from [[ app_name ]].models import User

from ..application import ApplicationController, REDIRECT_AFTER_LOGIN_KEY
from . import forms


class Auth(ApplicationController):
    def sign_in(self, req, resp):
        if req.user:
            return go_forward(resp)

        self.form = form = forms.SignInForm(req.form)
        if not req.is_post or not form.validate():
            return

        user = User.authenticate(**form.save())
        if not user:
            # msg = "We didnâ€™t recognize that password."
            msg = "Wrong username and/or password"
            form.password.error = msg
            return

        user.sign_in(req, resp)
        resp.flash("Welcome back!")
        return go_forward(resp)

    def sign_out(self, req, resp):
        if req.user:
            req.user.sign_out(req, resp)
        return resp.redirect_to("/")

    def reset(self, req, resp):
        self.form = form = forms.PasswordResetForm(req.form)
        if not req.is_post:
            return

        if not form.validate():
            return

        login = form.save()["login"]
        user = User.by_login(login)
        send_password_reset_email(user)
        self.email = user.email
        resp.template = "auth/reset_sent"

    def reset_validate(self, req, resp, token):
        user = User.authenticate_timestamped_token(token)
        if not user:
            resp.template = "auth/reset_invalid"
            return
        user.sign_in(req, resp)
        resp.redirect_to(app.url_for("Auth.password_change"))

    def password_change(self, req, resp):
        if not req.user:
            return resp.redirect_to(app.url_for("Auth.sign_in"))

        self.form = form = forms.PasswordChangeForm(req.form)
        self.password_minlen = app.config.auth.password_minlen

        if not req.is_post:
            return

        if not form.validate():
            return

        new_password = form.save()["password"][0]
        req.user.set_password(new_password)
        # Password has change, so we need to change the user token in the
        # session as well
        req.user.sign_in(req, resp)
        go_forward(resp)


def go_forward(resp):
    next_url = resp.session.pop(REDIRECT_AFTER_LOGIN_KEY, None) or "/"
    resp.redirect_to(next_url)
