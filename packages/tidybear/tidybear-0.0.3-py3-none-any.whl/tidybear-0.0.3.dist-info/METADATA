Metadata-Version: 2.1
Name: tidybear
Version: 0.0.3
Summary: A tidier approach to pandas.
Home-page: https://github.com/mbmackenzie/tidybear
Author: Matt Mackenzie
Author-email: mbm2228@columbia.edu
License: 
        MIT License        
        Copyright (c) 2021 Matt Mackenzie        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3.9
Description-Content-Type: text/markdown
License-File: LICENSE

# TidyBear

A tidier approach to pandas.

___

## Examples

```python
import numpy as np
import pandas as pd

import tidybear as tb

df = pd.DataFrame({
    "gr": list("AAABBBB"),
    "x": [1, 2, 3, 7, 8, 8, 9],
    "y": [4, 5, 6, 1, 1, 1, 1],
    "z": [2, 4, 6, 0, 1, 2, 2]
})
```

## Functions

```python
# Count by group
tb.count(df, "gr")

# Top n rows ordered by some row
tb.top_n(df, order_by="x", n=3)

# rename columns more quickly
tb.rename(df, x="a")
```

## Groupby and Summarise

```python
with tb.GroupBy(df, "gr") as g:
    
    # built in statistcs
    g.n()
    g.sum("x")
    
    # multiple aggs to a single column
    g.agg("x", ["mean", "median"])
    
    # same agg across multiple columns using built in
    g.mean(["y", "z"])
    
    # multiple aggs across multiple columns
    g.agg(["y", "z"], ["median", "std"])
    
    # send a lambda function to agg
    g.agg("x", lambda x: len(x.unique()), name="n_distinct_x1")
    
    # Use 'temp' keyword to return series and use it later
    max_val = g.max("x", temp=True)
    min_val = g.min("x", temp=True)
    
    # create a custom stat directly
    g.stat("midpoint", (max_val + min_val) / 2)
    
    summary = g.summarise() # or g.summarize()
```

