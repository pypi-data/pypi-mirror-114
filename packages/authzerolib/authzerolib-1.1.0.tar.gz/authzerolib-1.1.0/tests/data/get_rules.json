[
  {
    "id": "rul_ZE04GI6oAZY1cmRC",
    "enabled": true,
    "script": "function (user, context, callback) {\n  var rules_url = 'https://cdn.sso.mozilla.com/apps.yml'; //S3 bucket with CFN\n  var groups = user.groups || [];\n  \n  // Check if array A has any occurence from array B\n  function array_in_array(A, B) {\n    var found = A.some(\n      function(item) {\n        if (!B)\n          return false;\n        return B.indexOf(item) >= 0;\n    });\n    return found;\n  }\n  // Process the access cache decision\n  function access_decision(access_rules, callback) {\n    for (var i=0;i<access_rules.length;i++) {\n      var app = access_rules[i].application;\n      //Handy for quick testing in dev (overrides access rules)\n      //var app = {'client_id': 'pCGEHXW0VQNrQKURDcGi0tghh7NwWGhW', // This is testrp social-ldap-pwless\n      //           'authorized_users': ['gdestuynder@mozilla.com'],\n      //           'authorized_groups': ['okta_mfa']\n      //          };\n\n      if (app.client_id && (app.client_id.indexOf(context.clientID) >= 0)) {\n        // XXX this authorized_users SHOULD BE REMOVED as it's unsafe. USE GROUPS.\n        // XXX This needs to be fixed in the dashboard first\n\n        // Empty users or groups (length == 0) means no access in the dashboard apps.yml world\n        if (app.authorized_users.length === app.authorized_groups.length === 0) {\n          console.log(\"Access denied to \"+context.clientID+\" for user \"+user.email+\" (\"+user.user_id+\") - this app denies ALL users and ALL groups\");\n          return callback(null, user, global.postError('notingroup', context));\n        }\n        // Check if the user is authorized to access\n        if ((app.authorized_users.length > 0 ) && (app.authorized_users.indexOf(user.email) >= 0)) {\n          return callback(null, user, context);\n        // Same dance as above, but for groups\n        } else if ((app.authorized_groups.length > 0) && array_in_array(app.authorized_groups, groups)) {\n          return callback(null, user, context);\n        }\n        console.log(\"Access denied to \"+context.clientID+\" for user \"+user.email+\" (\"+user.user_id+\") - not in authorized_groups or authorized_users\");\n        return callback(null, user, global.postError('notingroup', context));\n      } // correct client id\n    } // for loop\n    // We matched no rule, access is granted\n    return callback(null, user, context);\n  }\n  \n  // Fetch the apps.yml access rules or use cache if available\n  // Note that the cache is very short lived, though it's better than nothing\n  // Basically: the underlaying webtask is still running and reused,\n  // thus the global namespace (`global`) is shared/still in memory and available to us\n  if (global.access_rules) {\n    return access_decision(global.access_rules, callback);\n  } else {\n    var request = require('request');\n    var YAML = require('js-yaml');\n    try {\n      var options = { method: 'GET',\n        url: rules_url};\n      request(options, function (error, response, body) {\n        if (error) throw new Error(error);\n        global.access_rules = YAML.load(body).apps;\n        return access_decision(global.access_rules, callback);\n      });\n    } catch(e) {\n      console.log('Error fetching access rules (fatal): '+e);\n      return callback(null, null, context);\n    }\n  }\n}\n",
    "name": "AccessRules",
    "order": 19,
    "stage": "login_success"
  },
  {
    "id": "rul_ThOZ357oHRc6hOGP",
    "enabled": true,
    "script": "function (user, context, callback) {\n  if ((context.connection === 'github') && (!user.two_factor_authentication)) {\n    console.log('GitHub user not allowed to log in because 2FA was disabled on the account: '+user.user_id);\n    return callback(null, user, global.postError('githubrequiremfa', context));\n  } else {\n    return callback(null, user, context);\n  }\n}\n",
    "name": "Force-MFA-setup-for-GitHub-logins",
    "order": 8,
    "stage": "login_success"
  }
]
