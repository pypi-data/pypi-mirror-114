# This file is auto-generated. Do not edit

import functools
from ovs_dbg import decoders

field_decoders = {
    "dp_hash": functools.partial(decoders.decode_mask, 32),
    "recirc_id": decoders.decode_int,
    "packet_type": decoders.decode_default,
    "conj_id": decoders.decode_int,
    "tun_id": functools.partial(decoders.decode_mask, 64),
    "tunnel_id": functools.partial(decoders.decode_mask, 64),
    "tun_src": decoders.decode_ip,
    "tun_dst": decoders.decode_ip,
    "tun_ipv6_src": decoders.decode_ip,
    "tun_ipv6_dst": decoders.decode_ip,
    "tun_flags": decoders.decode_default,
    "tun_ttl": decoders.decode_int,
    "tun_tos": decoders.decode_int,
    "tun_gbp_id": functools.partial(decoders.decode_mask, 16),
    "tun_gbp_flags": functools.partial(decoders.decode_mask, 8),
    "tun_erspan_idx": functools.partial(decoders.decode_mask, 20),
    "tun_erspan_ver": functools.partial(decoders.decode_mask, 4),
    "tun_erspan_dir": functools.partial(decoders.decode_mask, 1),
    "tun_erspan_hwid": functools.partial(decoders.decode_mask, 6),
    "tun_gtpu_flags": functools.partial(decoders.decode_mask, 8),
    "tun_gtpu_msgtype": functools.partial(decoders.decode_mask, 8),
    "tun_metadata0": functools.partial(decoders.decode_mask, 992),
    "tun_metadata1": functools.partial(decoders.decode_mask, 992),
    "tun_metadata2": functools.partial(decoders.decode_mask, 992),
    "tun_metadata3": functools.partial(decoders.decode_mask, 992),
    "tun_metadata4": functools.partial(decoders.decode_mask, 992),
    "tun_metadata5": functools.partial(decoders.decode_mask, 992),
    "tun_metadata6": functools.partial(decoders.decode_mask, 992),
    "tun_metadata7": functools.partial(decoders.decode_mask, 992),
    "tun_metadata8": functools.partial(decoders.decode_mask, 992),
    "tun_metadata9": functools.partial(decoders.decode_mask, 992),
    "tun_metadata10": functools.partial(decoders.decode_mask, 992),
    "tun_metadata11": functools.partial(decoders.decode_mask, 992),
    "tun_metadata12": functools.partial(decoders.decode_mask, 992),
    "tun_metadata13": functools.partial(decoders.decode_mask, 992),
    "tun_metadata14": functools.partial(decoders.decode_mask, 992),
    "tun_metadata15": functools.partial(decoders.decode_mask, 992),
    "tun_metadata16": functools.partial(decoders.decode_mask, 992),
    "tun_metadata17": functools.partial(decoders.decode_mask, 992),
    "tun_metadata18": functools.partial(decoders.decode_mask, 992),
    "tun_metadata19": functools.partial(decoders.decode_mask, 992),
    "tun_metadata20": functools.partial(decoders.decode_mask, 992),
    "tun_metadata21": functools.partial(decoders.decode_mask, 992),
    "tun_metadata22": functools.partial(decoders.decode_mask, 992),
    "tun_metadata23": functools.partial(decoders.decode_mask, 992),
    "tun_metadata24": functools.partial(decoders.decode_mask, 992),
    "tun_metadata25": functools.partial(decoders.decode_mask, 992),
    "tun_metadata26": functools.partial(decoders.decode_mask, 992),
    "tun_metadata27": functools.partial(decoders.decode_mask, 992),
    "tun_metadata28": functools.partial(decoders.decode_mask, 992),
    "tun_metadata29": functools.partial(decoders.decode_mask, 992),
    "tun_metadata30": functools.partial(decoders.decode_mask, 992),
    "tun_metadata31": functools.partial(decoders.decode_mask, 992),
    "tun_metadata32": functools.partial(decoders.decode_mask, 992),
    "tun_metadata33": functools.partial(decoders.decode_mask, 992),
    "tun_metadata34": functools.partial(decoders.decode_mask, 992),
    "tun_metadata35": functools.partial(decoders.decode_mask, 992),
    "tun_metadata36": functools.partial(decoders.decode_mask, 992),
    "tun_metadata37": functools.partial(decoders.decode_mask, 992),
    "tun_metadata38": functools.partial(decoders.decode_mask, 992),
    "tun_metadata39": functools.partial(decoders.decode_mask, 992),
    "tun_metadata40": functools.partial(decoders.decode_mask, 992),
    "tun_metadata41": functools.partial(decoders.decode_mask, 992),
    "tun_metadata42": functools.partial(decoders.decode_mask, 992),
    "tun_metadata43": functools.partial(decoders.decode_mask, 992),
    "tun_metadata44": functools.partial(decoders.decode_mask, 992),
    "tun_metadata45": functools.partial(decoders.decode_mask, 992),
    "tun_metadata46": functools.partial(decoders.decode_mask, 992),
    "tun_metadata47": functools.partial(decoders.decode_mask, 992),
    "tun_metadata48": functools.partial(decoders.decode_mask, 992),
    "tun_metadata49": functools.partial(decoders.decode_mask, 992),
    "tun_metadata50": functools.partial(decoders.decode_mask, 992),
    "tun_metadata51": functools.partial(decoders.decode_mask, 992),
    "tun_metadata52": functools.partial(decoders.decode_mask, 992),
    "tun_metadata53": functools.partial(decoders.decode_mask, 992),
    "tun_metadata54": functools.partial(decoders.decode_mask, 992),
    "tun_metadata55": functools.partial(decoders.decode_mask, 992),
    "tun_metadata56": functools.partial(decoders.decode_mask, 992),
    "tun_metadata57": functools.partial(decoders.decode_mask, 992),
    "tun_metadata58": functools.partial(decoders.decode_mask, 992),
    "tun_metadata59": functools.partial(decoders.decode_mask, 992),
    "tun_metadata60": functools.partial(decoders.decode_mask, 992),
    "tun_metadata61": functools.partial(decoders.decode_mask, 992),
    "tun_metadata62": functools.partial(decoders.decode_mask, 992),
    "tun_metadata63": functools.partial(decoders.decode_mask, 992),
    "metadata": functools.partial(decoders.decode_mask, 64),
    "in_port": decoders.decode_default,
    "in_port_oxm": decoders.decode_default,
    "actset_output": decoders.decode_default,
    "skb_priority": decoders.decode_int,
    "pkt_mark": functools.partial(decoders.decode_mask, 32),
    "ct_state": decoders.decode_default,
    "ct_zone": decoders.decode_int,
    "ct_mark": functools.partial(decoders.decode_mask, 32),
    "ct_label": functools.partial(decoders.decode_mask, 128),
    "ct_nw_proto": decoders.decode_int,
    "ct_nw_src": decoders.decode_ip,
    "ct_nw_dst": decoders.decode_ip,
    "ct_ipv6_src": decoders.decode_ip,
    "ct_ipv6_dst": decoders.decode_ip,
    "ct_tp_src": functools.partial(decoders.decode_mask, 16),
    "ct_tp_dst": functools.partial(decoders.decode_mask, 16),
    "reg0": functools.partial(decoders.decode_mask, 32),
    "reg1": functools.partial(decoders.decode_mask, 32),
    "reg2": functools.partial(decoders.decode_mask, 32),
    "reg3": functools.partial(decoders.decode_mask, 32),
    "reg4": functools.partial(decoders.decode_mask, 32),
    "reg5": functools.partial(decoders.decode_mask, 32),
    "reg6": functools.partial(decoders.decode_mask, 32),
    "reg7": functools.partial(decoders.decode_mask, 32),
    "reg8": functools.partial(decoders.decode_mask, 32),
    "reg9": functools.partial(decoders.decode_mask, 32),
    "reg10": functools.partial(decoders.decode_mask, 32),
    "reg11": functools.partial(decoders.decode_mask, 32),
    "reg12": functools.partial(decoders.decode_mask, 32),
    "reg13": functools.partial(decoders.decode_mask, 32),
    "reg14": functools.partial(decoders.decode_mask, 32),
    "reg15": functools.partial(decoders.decode_mask, 32),
    "xreg0": functools.partial(decoders.decode_mask, 64),
    "xreg1": functools.partial(decoders.decode_mask, 64),
    "xreg2": functools.partial(decoders.decode_mask, 64),
    "xreg3": functools.partial(decoders.decode_mask, 64),
    "xreg4": functools.partial(decoders.decode_mask, 64),
    "xreg5": functools.partial(decoders.decode_mask, 64),
    "xreg6": functools.partial(decoders.decode_mask, 64),
    "xreg7": functools.partial(decoders.decode_mask, 64),
    "xxreg0": functools.partial(decoders.decode_mask, 128),
    "xxreg1": functools.partial(decoders.decode_mask, 128),
    "xxreg2": functools.partial(decoders.decode_mask, 128),
    "xxreg3": functools.partial(decoders.decode_mask, 128),
    "eth_src": decoders.decode_mac,
    "dl_src": decoders.decode_mac,
    "eth_dst": decoders.decode_mac,
    "dl_dst": decoders.decode_mac,
    "eth_type": decoders.decode_int,
    "dl_type": decoders.decode_int,
    "vlan_tci": functools.partial(decoders.decode_mask, 16),
    "dl_vlan": decoders.decode_int,
    "vlan_vid": functools.partial(decoders.decode_mask, 12),
    "dl_vlan_pcp": decoders.decode_int,
    "vlan_pcp": decoders.decode_int,
    "mpls_label": decoders.decode_int,
    "mpls_tc": decoders.decode_int,
    "mpls_bos": decoders.decode_int,
    "mpls_ttl": decoders.decode_int,
    "ip_src": decoders.decode_ip,
    "nw_src": decoders.decode_ip,
    "ip_dst": decoders.decode_ip,
    "nw_dst": decoders.decode_ip,
    "ipv6_src": decoders.decode_ip,
    "ipv6_dst": decoders.decode_ip,
    "ipv6_label": functools.partial(decoders.decode_mask, 20),
    "nw_proto": decoders.decode_int,
    "ip_proto": decoders.decode_int,
    "nw_tos": decoders.decode_int,
    "ip_dscp": decoders.decode_int,
    "nw_ecn": decoders.decode_int,
    "ip_ecn": decoders.decode_int,
    "nw_ttl": decoders.decode_int,
    "ip_frag": decoders.decode_default,
    "nw_frag": decoders.decode_default,
    "arp_op": decoders.decode_int,
    "arp_spa": decoders.decode_ip,
    "arp_tpa": decoders.decode_ip,
    "arp_sha": decoders.decode_mac,
    "arp_tha": decoders.decode_mac,
    "tcp_src": functools.partial(decoders.decode_mask, 16),
    "tp_src": functools.partial(decoders.decode_mask, 16),
    "tcp_dst": functools.partial(decoders.decode_mask, 16),
    "tp_dst": functools.partial(decoders.decode_mask, 16),
    "tcp_flags": decoders.decode_default,
    "udp_src": functools.partial(decoders.decode_mask, 16),
    "udp_dst": functools.partial(decoders.decode_mask, 16),
    "sctp_src": functools.partial(decoders.decode_mask, 16),
    "sctp_dst": functools.partial(decoders.decode_mask, 16),
    "icmp_type": decoders.decode_int,
    "icmp_code": decoders.decode_int,
    "icmpv6_type": decoders.decode_int,
    "icmpv6_code": decoders.decode_int,
    "nd_target": decoders.decode_ip,
    "nd_sll": decoders.decode_mac,
    "nd_tll": decoders.decode_mac,
    "nd_reserved": decoders.decode_int,
    "nd_options_type": decoders.decode_int,
    "nsh_flags": functools.partial(decoders.decode_mask, 8),
    "nsh_mdtype": decoders.decode_int,
    "nsh_np": decoders.decode_int,
    "nsh_spi": decoders.decode_int,
    "nsp": decoders.decode_int,
    "nsh_si": decoders.decode_int,
    "nsi": decoders.decode_int,
    "nsh_c1": functools.partial(decoders.decode_mask, 32),
    "nshc1": functools.partial(decoders.decode_mask, 32),
    "nsh_c2": functools.partial(decoders.decode_mask, 32),
    "nshc2": functools.partial(decoders.decode_mask, 32),
    "nsh_c3": functools.partial(decoders.decode_mask, 32),
    "nshc3": functools.partial(decoders.decode_mask, 32),
    "nsh_c4": functools.partial(decoders.decode_mask, 32),
    "nshc4": functools.partial(decoders.decode_mask, 32),
    "nsh_ttl": decoders.decode_int,
}
