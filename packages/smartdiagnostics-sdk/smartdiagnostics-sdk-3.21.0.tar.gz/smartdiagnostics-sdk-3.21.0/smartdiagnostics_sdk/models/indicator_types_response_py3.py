# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class IndicatorTypesResponse(Model):
    """IndicatorTypesResponse.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The numeric representation of the indicator type
    :type id: int
    :param indicator_type: Required. The string representation of the
     indicator type. Possible values include: 'Temperature', 'Pressure',
     'Flow', 'Humidity', 'Power', 'DifferentialPressure',
     'MultiSensorDifferentialPressure', 'Voltage', 'GeneralizedAtoD',
     'VibrationBandRms', 'VibrationBandMax', 'VibrationOverallPeak',
     'VibrationOverallRms', 'VibrationOverallSkewness',
     'VibrationOverallKurtosis', 'VibrationOverallCrestFactor',
     'DamageAccumulation', 'VibrationBandRmsAccel', 'VibrationBandMaxAccel',
     'VibrationOverallPeakAccel', 'VibrationOverallRmsAccel',
     'VibrationOverallSkewnessAccel', 'VibrationOverallKurtosisAccel',
     'VibrationOverallCrestFactorAccel', 'DamageAccumulationAccel', 'Group',
     'VibrationOverall', 'VibrationOverallAccel', 'GeneralTimeSeries', 'Math',
     'OnStatistics', 'OffStatistics', 'AlarmStatistics', 'WarningStatistics',
     'PositivePeakPressure', 'NegativePeakPressure', 'RmsPressure',
     'BandPressure', 'OnPercentStatistics', 'OffPercentStatistics',
     'AlarmPercentStatistics', 'WarningPercentStatistics', 'SignalStrength',
     'RunningSpeed', 'DamageAccumulationPressure', 'OilHumidity',
     'OilTemperature', 'DamageAccumulationAccelRaw', 'ThermalRegionOfInterest',
     'SmartMetric', 'Feature'
    :type indicator_type: str or ~smartdiagnostics_sdk.models.enum
    :param name: Required. The UI friendly string representation of the
     indicator type
    :type name: str
    """

    _validation = {
        'id': {'required': True},
        'indicator_type': {'required': True},
        'name': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'Id', 'type': 'int'},
        'indicator_type': {'key': 'IndicatorType', 'type': 'str'},
        'name': {'key': 'Name', 'type': 'str'},
    }

    def __init__(self, *, id: int, indicator_type, name: str, **kwargs) -> None:
        super(IndicatorTypesResponse, self).__init__(**kwargs)
        self.id = id
        self.indicator_type = indicator_type
        self.name = name
