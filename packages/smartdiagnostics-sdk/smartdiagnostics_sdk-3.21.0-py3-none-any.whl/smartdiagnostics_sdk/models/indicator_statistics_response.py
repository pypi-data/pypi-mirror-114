# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class IndicatorStatisticsResponse(Model):
    """IndicatorStatisticsResponse.

    All required parameters must be populated in order to send to Azure.

    :param id: Required.
    :type id: str
    :param name: Required.
    :type name: str
    :param system_sort_order:
    :type system_sort_order: int
    :param indicator_type: Required. Possible values include: 'Temperature',
     'Pressure', 'Flow', 'Humidity', 'Power', 'DifferentialPressure',
     'MultiSensorDifferentialPressure', 'Voltage', 'GeneralizedAtoD',
     'VibrationBandRms', 'VibrationBandMax', 'VibrationOverallPeak',
     'VibrationOverallRms', 'VibrationOverallSkewness',
     'VibrationOverallKurtosis', 'VibrationOverallCrestFactor',
     'DamageAccumulation', 'VibrationBandRmsAccel', 'VibrationBandMaxAccel',
     'VibrationOverallPeakAccel', 'VibrationOverallRmsAccel',
     'VibrationOverallSkewnessAccel', 'VibrationOverallKurtosisAccel',
     'VibrationOverallCrestFactorAccel', 'DamageAccumulationAccel', 'Group',
     'VibrationOverall', 'VibrationOverallAccel', 'GeneralTimeSeries', 'Math',
     'OnStatistics', 'OffStatistics', 'AlarmStatistics', 'WarningStatistics',
     'PositivePeakPressure', 'NegativePeakPressure', 'RmsPressure',
     'BandPressure', 'OnPercentStatistics', 'OffPercentStatistics',
     'AlarmPercentStatistics', 'WarningPercentStatistics', 'SignalStrength',
     'RunningSpeed', 'DamageAccumulationPressure', 'OilHumidity',
     'OilTemperature', 'DamageAccumulationAccelRaw', 'ThermalRegionOfInterest',
     'SmartMetric', 'Feature'
    :type indicator_type: str or ~smartdiagnostics_sdk.models.enum
    :param measure_of: Possible values include: 'Invalid', 'CurrentPhaseA',
     'PeakCurrentPhaseA', 'CurrentPhaseB', 'PeakCurrentPhaseB',
     'CurrentPhaseC', 'PeakCurrentPhaseC', 'DifferentialPressure', 'Flow',
     'Humidity', 'NodeTemperature', 'NodeVoltage', 'PeakVibration', 'Pressure',
     'RmsVibration', 'SignalStrength', 'StandardAirVelocity', 'SupplyVoltage',
     'Temperature', 'TotalCurrent', 'VibrationXAxis', 'VibrationYAxis',
     'Voltage', 'Current', 'AtoDChannel1', 'AtoDChannel2', 'AtoDChannel3',
     'AtoDChannel4', 'AtoDChannel5', 'AtoDChannel6', 'OilTemperature',
     'OilHumidity', 'X', 'Y', 'Z', 'Custom', 'WirelessEfficiency',
     'PacketSuccessRate', 'NodeHumidity', 'BurstSuccessRate'
    :type measure_of: str or ~smartdiagnostics_sdk.models.enum
    :param display_units:
    :type display_units: str
    :param last_measurement:
    :type last_measurement: datetime
    :param average_value:
    :type average_value: float
    :param max_value:
    :type max_value: float
    :param time_in_alarm:
    :type time_in_alarm: float
    :param time_in_warning:
    :type time_in_warning: float
    :param on_time:
    :type on_time: float
    :param hierarchy:
    :type hierarchy:
     list[~smartdiagnostics_sdk.models.IndicatorStatisticsHierarchyChild]
    :param start_date:
    :type start_date: datetime
    :param end_date:
    :type end_date: datetime
    """

    _validation = {
        'id': {'required': True},
        'name': {'required': True},
        'indicator_type': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'Id', 'type': 'str'},
        'name': {'key': 'Name', 'type': 'str'},
        'system_sort_order': {'key': 'SystemSortOrder', 'type': 'int'},
        'indicator_type': {'key': 'IndicatorType', 'type': 'str'},
        'measure_of': {'key': 'MeasureOf', 'type': 'str'},
        'display_units': {'key': 'DisplayUnits', 'type': 'str'},
        'last_measurement': {'key': 'LastMeasurement', 'type': 'iso-8601'},
        'average_value': {'key': 'AverageValue', 'type': 'float'},
        'max_value': {'key': 'MaxValue', 'type': 'float'},
        'time_in_alarm': {'key': 'TimeInAlarm', 'type': 'float'},
        'time_in_warning': {'key': 'TimeInWarning', 'type': 'float'},
        'on_time': {'key': 'OnTime', 'type': 'float'},
        'hierarchy': {'key': 'Hierarchy', 'type': '[IndicatorStatisticsHierarchyChild]'},
        'start_date': {'key': 'StartDate', 'type': 'iso-8601'},
        'end_date': {'key': 'EndDate', 'type': 'iso-8601'},
    }

    def __init__(self, **kwargs):
        super(IndicatorStatisticsResponse, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.system_sort_order = kwargs.get('system_sort_order', None)
        self.indicator_type = kwargs.get('indicator_type', None)
        self.measure_of = kwargs.get('measure_of', None)
        self.display_units = kwargs.get('display_units', None)
        self.last_measurement = kwargs.get('last_measurement', None)
        self.average_value = kwargs.get('average_value', None)
        self.max_value = kwargs.get('max_value', None)
        self.time_in_alarm = kwargs.get('time_in_alarm', None)
        self.time_in_warning = kwargs.get('time_in_warning', None)
        self.on_time = kwargs.get('on_time', None)
        self.hierarchy = kwargs.get('hierarchy', None)
        self.start_date = kwargs.get('start_date', None)
        self.end_date = kwargs.get('end_date', None)
