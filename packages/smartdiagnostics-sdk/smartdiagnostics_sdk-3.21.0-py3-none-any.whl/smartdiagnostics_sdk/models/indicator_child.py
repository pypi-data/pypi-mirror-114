# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class IndicatorChild(Model):
    """IndicatorChild.

    :param indicator_id:
    :type indicator_id: str
    :param indicator_name:
    :type indicator_name: str
    :param indicator_abbreviation:
    :type indicator_abbreviation: str
    :param indicator_type: Possible values include: 'Temperature', 'Pressure',
     'Flow', 'Humidity', 'Power', 'DifferentialPressure',
     'MultiSensorDifferentialPressure', 'Voltage', 'GeneralizedAtoD',
     'VibrationBandRms', 'VibrationBandMax', 'VibrationOverallPeak',
     'VibrationOverallRms', 'VibrationOverallSkewness',
     'VibrationOverallKurtosis', 'VibrationOverallCrestFactor',
     'DamageAccumulation', 'VibrationBandRmsAccel', 'VibrationBandMaxAccel',
     'VibrationOverallPeakAccel', 'VibrationOverallRmsAccel',
     'VibrationOverallSkewnessAccel', 'VibrationOverallKurtosisAccel',
     'VibrationOverallCrestFactorAccel', 'DamageAccumulationAccel', 'Group',
     'VibrationOverall', 'VibrationOverallAccel', 'GeneralTimeSeries', 'Math',
     'OnStatistics', 'OffStatistics', 'AlarmStatistics', 'WarningStatistics',
     'PositivePeakPressure', 'NegativePeakPressure', 'RmsPressure',
     'BandPressure', 'OnPercentStatistics', 'OffPercentStatistics',
     'AlarmPercentStatistics', 'WarningPercentStatistics', 'SignalStrength',
     'RunningSpeed', 'DamageAccumulationPressure', 'OilHumidity',
     'OilTemperature', 'DamageAccumulationAccelRaw', 'ThermalRegionOfInterest',
     'SmartMetric', 'Feature'
    :type indicator_type: str or ~smartdiagnostics_sdk.models.enum
    """

    _attribute_map = {
        'indicator_id': {'key': 'IndicatorId', 'type': 'str'},
        'indicator_name': {'key': 'IndicatorName', 'type': 'str'},
        'indicator_abbreviation': {'key': 'IndicatorAbbreviation', 'type': 'str'},
        'indicator_type': {'key': 'IndicatorType', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(IndicatorChild, self).__init__(**kwargs)
        self.indicator_id = kwargs.get('indicator_id', None)
        self.indicator_name = kwargs.get('indicator_name', None)
        self.indicator_abbreviation = kwargs.get('indicator_abbreviation', None)
        self.indicator_type = kwargs.get('indicator_type', None)
