name: CI

on: [push, pull_request]

jobs:

  test:
    runs-on: ${{ matrix.os }}
    name: test (${{ matrix.os }})
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: ðŸ“š Install LLVM (Ubuntu)
      if: matrix.os == 'ubuntu-20.04'
      shell: bash
      run: |
        sudo apt update
        sudo apt install --fix-broken libc++-dev llvm clang libomp-dev

    - name: ðŸ“š Install LLVM (MacOS)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        brew update
        brew install llvm

    - name: ðŸ“š nstall LLVM (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
        choco install llvm

    - name: âš™ Install clang-build
      run: |
        pip install setuptools
        pip install codecov
        python setup.py develop

    - name: ðŸ§ª Run tests
      shell: bash
      run: |
        if [ ${{ matrix.os == 'macos-latest' }} ]; then export PATH=/usr/local/opt/llvm/bin:$PATH; fi
        if [ ${{ matrix.os == 'macos-latest' }} ]; then export LIBRARY_PATH=/usr/local/opt/llvm/lib:$PATH; fi
        if [ ${{ matrix.os == 'windows-latest' }} ]; then export PATH=/c/Program\ Files/LLVM/bin:$PATH; fi
        python setup.py test
        python -m coverage run setup.py test
        python -m coverage combine

    - name: ðŸ‘† Upload coverage
      run: codecov


  deploy-pypi:
    if: github.event_name == 'push' && startsWith( github.ref, 'refs/tags/' )
    needs: test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: âš™ Install clang-build
      run: |
        pip install setuptools twine
        python setup.py sdist

    - name: ðŸš€ Deploy to PyPI
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: twine upload --skip-existing dist/*


  draft-release:
    if: github.event_name == 'push' && startsWith( github.ref, 'refs/tags/' )
    needs: [test]
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: ðŸ“„ Generate a changelog
      id: changelog
      uses: heinrichreimer/github-changelog-generator-action@v2.2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        onlyLastTag: "true"
        stripHeaders: "true"
        stripGeneratorNotice: "true"

    - name: ðŸ“„ Print the changelog
      run: echo "${{ steps.changelog.outputs.changelog }}"

    - name: ðŸŽ‰ Create draft release
      id: draft_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: true