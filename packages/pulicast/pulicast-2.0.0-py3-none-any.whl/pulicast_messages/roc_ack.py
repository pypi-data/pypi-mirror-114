"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class roc_ack(object):
    __slots__ = ["message", "fingerprint", "len", "value"]

    def __init__(self):
        self.message = ""
        self.fingerprint = ""
        self.len = 0
        self.value = ""

    def encode(self):
        buf = BytesIO()
        buf.write(roc_ack._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __message_encoded = self.message.encode('utf-8')
        buf.write(struct.pack('>I', len(__message_encoded)+1))
        buf.write(__message_encoded)
        buf.write(b"\0")
        buf.write(bytearray(self.fingerprint[:8]))
        buf.write(struct.pack(">h", self.len))
        buf.write(bytearray(self.value[:self.len]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != roc_ack._get_packed_fingerprint():
            raise ValueError("Decode error")
        return roc_ack._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = roc_ack()
        __message_len = struct.unpack('>I', buf.read(4))[0]
        self.message = buf.read(__message_len)[:-1].decode('utf-8', 'replace')
        self.fingerprint = buf.read(8)
        self.len = struct.unpack(">h", buf.read(2))[0]
        self.value = buf.read(self.len)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if roc_ack in parents: return 0
        tmphash = (0xbb2e747c4d12e478) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if roc_ack._packed_fingerprint is None:
            roc_ack._packed_fingerprint = struct.pack(">Q", roc_ack._get_hash_recursive([]))
        return roc_ack._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

