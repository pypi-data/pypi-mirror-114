# Generated from ./grammar/ParaC.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0080")
        buf.write("\u04f9\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\3\2\3\2")
        buf.write("\3\2\3\2\3\2\6\2\u00d2\n\2\r\2\16\2\u00d3\3\2\3\2\3\2")
        buf.write("\3\2\3\2\3\2\3\2\5\2\u00dd\n\2\3\2\3\2\3\2\3\2\3\2\3\2")
        buf.write("\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\5\2\u00f1")
        buf.write("\n\2\3\3\3\3\5\3\u00f5\n\3\3\3\3\3\3\3\3\4\3\4\5\4\u00fc")
        buf.write("\n\4\3\5\3\5\3\5\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\b\3\b\3\b\7\b\u010e\n\b\f\b\16\b\u0111\13\b\3\t\3")
        buf.write("\t\5\t\u0115\n\t\3\t\3\t\3\t\3\n\3\n\5\n\u011c\n\n\3\n")
        buf.write("\3\n\3\n\3\n\3\n\3\n\5\n\u0124\n\n\3\n\3\n\5\n\u0128\n")
        buf.write("\n\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u0130\n\n\3\n\3\n\3\n\3")
        buf.write("\n\7\n\u0136\n\n\f\n\16\n\u0139\13\n\3\13\3\13\3\13\7")
        buf.write("\13\u013e\n\13\f\13\16\13\u0141\13\13\3\f\7\f\u0144\n")
        buf.write("\f\f\f\16\f\u0147\13\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f")
        buf.write("\3\f\3\f\3\f\5\f\u0154\n\f\3\r\3\r\3\16\3\16\5\16\u015a")
        buf.write("\n\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\5\16\u0163\n")
        buf.write("\16\3\16\3\16\3\16\7\16\u0168\n\16\f\16\16\16\u016b\13")
        buf.write("\16\3\17\3\17\3\17\7\17\u0170\n\17\f\17\16\17\u0173\13")
        buf.write("\17\3\20\3\20\3\20\7\20\u0178\n\20\f\20\16\20\u017b\13")
        buf.write("\20\3\21\3\21\3\21\7\21\u0180\n\21\f\21\16\21\u0183\13")
        buf.write("\21\3\22\3\22\3\22\7\22\u0188\n\22\f\22\16\22\u018b\13")
        buf.write("\22\3\23\3\23\3\23\7\23\u0190\n\23\f\23\16\23\u0193\13")
        buf.write("\23\3\24\3\24\3\24\7\24\u0198\n\24\f\24\16\24\u019b\13")
        buf.write("\24\3\25\3\25\3\25\7\25\u01a0\n\25\f\25\16\25\u01a3\13")
        buf.write("\25\3\26\3\26\3\26\7\26\u01a8\n\26\f\26\16\26\u01ab\13")
        buf.write("\26\3\27\3\27\3\27\7\27\u01b0\n\27\f\27\16\27\u01b3\13")
        buf.write("\27\3\30\3\30\3\30\7\30\u01b8\n\30\f\30\16\30\u01bb\13")
        buf.write("\30\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u01c3\n\31\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\5\32\u01cb\n\32\3\33\3\33\3")
        buf.write("\34\3\34\3\34\7\34\u01d2\n\34\f\34\16\34\u01d5\13\34\3")
        buf.write("\35\3\35\3\36\3\36\5\36\u01db\n\36\3\36\3\36\3\36\5\36")
        buf.write("\u01e0\n\36\3\37\6\37\u01e3\n\37\r\37\16\37\u01e4\3 \3")
        buf.write(" \3 \3 \3 \3 \5 \u01ed\n \3!\3!\3!\7!\u01f2\n!\f!\16!")
        buf.write("\u01f5\13!\3\"\3\"\3\"\5\"\u01fa\n\"\3#\3#\3$\3$\3%\3")
        buf.write("%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3")
        buf.write("%\3%\3%\3%\3%\3%\3%\5%\u021a\n%\3%\3%\3%\3%\3%\3%\3%\3")
        buf.write("%\3%\3%\3%\3%\3%\5%\u0229\n%\3%\3%\7%\u022d\n%\f%\16%")
        buf.write("\u0230\13%\3&\3&\5&\u0234\n&\3&\3&\7&\u0238\n&\f&\16&")
        buf.write("\u023b\13&\3&\3&\3&\3&\3&\5&\u0242\n&\3\'\3\'\3(\6(\u0247")
        buf.write("\n(\r(\16(\u0248\3)\3)\5)\u024d\n)\3)\3)\3)\5)\u0252\n")
        buf.write(")\3*\3*\5*\u0256\n*\3*\5*\u0259\n*\3+\3+\3+\7+\u025e\n")
        buf.write("+\f+\16+\u0261\13+\3,\3,\5,\u0265\n,\3,\3,\5,\u0269\n")
        buf.write(",\3-\3-\5-\u026d\n-\3-\3-\3-\5-\u0272\n-\3-\3-\3-\3-\5")
        buf.write("-\u0278\n-\3.\3.\3.\7.\u027d\n.\f.\16.\u0280\13.\3/\3")
        buf.write("/\3/\5/\u0285\n/\3\60\3\60\3\61\3\61\3\61\3\61\3\61\3")
        buf.write("\62\3\62\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u0297")
        buf.write("\n\63\3\64\3\64\3\64\3\64\5\64\u029d\n\64\3\64\3\64\3")
        buf.write("\65\5\65\u02a2\n\65\3\65\3\65\7\65\u02a6\n\65\f\65\16")
        buf.write("\65\u02a9\13\65\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66")
        buf.write("\3\66\3\66\3\66\5\66\u02b6\n\66\3\66\3\66\3\66\3\66\5")
        buf.write("\66\u02bc\n\66\3\66\3\66\3\66\5\66\u02c1\n\66\3\66\5\66")
        buf.write("\u02c4\n\66\3\66\3\66\3\66\3\66\3\66\5\66\u02cb\n\66\3")
        buf.write("\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66")
        buf.write("\3\66\3\66\5\66\u02da\n\66\3\66\3\66\3\66\3\66\3\66\3")
        buf.write("\66\3\66\3\66\3\66\3\66\5\66\u02e6\n\66\3\66\7\66\u02e9")
        buf.write("\n\66\f\66\16\66\u02ec\13\66\3\67\3\67\3\67\6\67\u02f1")
        buf.write("\n\67\r\67\16\67\u02f2\3\67\3\67\5\67\u02f7\n\67\38\3")
        buf.write("8\38\38\38\38\38\39\59\u0301\n9\39\39\59\u0305\n9\79\u0307")
        buf.write("\n9\f9\169\u030a\139\3:\3:\3:\5:\u030f\n:\3:\5:\u0312")
        buf.write("\n:\3;\3;\3;\3;\3;\7;\u0319\n;\f;\16;\u031c\13;\3<\3<")
        buf.write("\5<\u0320\n<\6<\u0322\n<\r<\16<\u0323\3=\6=\u0327\n=\r")
        buf.write("=\16=\u0328\3>\3>\3>\5>\u032e\n>\3?\3?\3?\7?\u0333\n?")
        buf.write("\f?\16?\u0336\13?\3@\3@\3@\3@\3@\5@\u033d\n@\5@\u033f")
        buf.write("\n@\3A\3A\3A\7A\u0344\nA\fA\16A\u0347\13A\3B\3B\5B\u034b")
        buf.write("\nB\3C\3C\5C\u034f\nC\3C\3C\7C\u0353\nC\fC\16C\u0356\13")
        buf.write("C\5C\u0358\nC\3D\3D\3D\3D\3D\7D\u035f\nD\fD\16D\u0362")
        buf.write("\13D\3D\3D\5D\u0366\nD\3D\5D\u0369\nD\3D\3D\3D\3D\5D\u036f")
        buf.write("\nD\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\5D\u037f")
        buf.write("\nD\3D\3D\7D\u0383\nD\fD\16D\u0386\13D\5D\u0388\nD\3D")
        buf.write("\3D\3D\5D\u038d\nD\3D\5D\u0390\nD\3D\3D\3D\3D\3D\5D\u0397")
        buf.write("\nD\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3")
        buf.write("D\5D\u03aa\nD\3D\3D\7D\u03ae\nD\fD\16D\u03b1\13D\7D\u03b3")
        buf.write("\nD\fD\16D\u03b6\13D\3E\3E\3F\3F\3F\3F\5F\u03be\nF\3F")
        buf.write("\3F\5F\u03c2\nF\3G\5G\u03c5\nG\3G\3G\3G\5G\u03ca\nG\3")
        buf.write("G\7G\u03cd\nG\fG\16G\u03d0\13G\3H\3H\3H\3I\6I\u03d6\n")
        buf.write("I\rI\16I\u03d7\3J\3J\3J\3J\3J\3J\5J\u03e0\nJ\3K\3K\3K")
        buf.write("\3K\3K\6K\u03e7\nK\rK\16K\u03e8\3K\3K\3K\3L\3L\3L\3L\3")
        buf.write("L\3L\3L\3L\3L\3L\3L\3L\3L\7L\u03fb\nL\fL\16L\u03fe\13")
        buf.write("L\5L\u0400\nL\3L\3L\3L\3L\7L\u0406\nL\fL\16L\u0409\13")
        buf.write("L\5L\u040b\nL\7L\u040d\nL\fL\16L\u0410\13L\3L\3L\5L\u0414")
        buf.write("\nL\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\5M\u0421\nM\3N\3")
        buf.write("N\5N\u0425\nN\3N\3N\3O\6O\u042a\nO\rO\16O\u042b\3P\3P")
        buf.write("\5P\u0430\nP\3Q\5Q\u0433\nQ\3Q\3Q\3R\3R\3R\6R\u043a\n")
        buf.write("R\rR\16R\u043b\3R\3R\5R\u0440\nR\3R\3R\5R\u0444\nR\5R")
        buf.write("\u0446\nR\3S\3S\3S\3S\5S\u044c\nS\3S\3S\3S\5S\u0451\n")
        buf.write("S\3S\3S\3T\3T\3T\3U\3U\3U\3V\3V\3V\3V\3V\3V\3V\5V\u0462")
        buf.write("\nV\3V\3V\3V\3V\3V\3V\5V\u046a\nV\3W\3W\3W\3W\3W\3W\3")
        buf.write("W\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W\5W\u0480\nW\3")
        buf.write("X\3X\5X\u0484\nX\5X\u0486\nX\3X\3X\5X\u048a\nX\3X\3X\5")
        buf.write("X\u048e\nX\3Y\3Y\5Y\u0492\nY\3Z\3Z\3Z\7Z\u0497\nZ\fZ\16")
        buf.write("Z\u049a\13Z\3[\3[\3[\3[\3[\5[\u04a1\n[\3[\3[\5[\u04a5")
        buf.write("\n[\3[\3[\3\\\5\\\u04aa\n\\\3\\\3\\\3]\3]\6]\u04b0\n]")
        buf.write("\r]\16]\u04b1\3^\3^\3^\5^\u04b7\n^\3_\3_\3_\5_\u04bc\n")
        buf.write("_\3_\3_\3_\3_\3_\5_\u04c3\n_\3_\3_\3_\5_\u04c8\n_\3`\7")
        buf.write("`\u04cb\n`\f`\16`\u04ce\13`\3`\5`\u04d1\n`\3a\3a\3a\3")
        buf.write("b\3b\3b\3b\5b\u04da\nb\3b\3b\5b\u04de\nb\3c\3c\3c\3c\7")
        buf.write("c\u04e4\nc\fc\16c\u04e7\13c\5c\u04e9\nc\3c\3c\3d\3d\3")
        buf.write("d\3d\3e\3e\3e\3f\6f\u04f5\nf\rf\16f\u04f6\3f\2\6\32Hj")
        buf.write("\u0086g\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*")
        buf.write(",.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080")
        buf.write("\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092")
        buf.write("\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4")
        buf.write("\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6")
        buf.write("\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8")
        buf.write("\u00ca\2\31\3\2uv\4\2UUWW\5\2\61\61UUWW\4\2\61\61??\7")
        buf.write("\2TTVVXX[[`a\3\2XZ\4\2TTVV\3\2RS\3\2NQ\3\2st\3\2hr\b\2")
        buf.write("\25\25\"\",,\63\6388GG\3\2\6\b\4\2\t\t\67\67\4\2\65\65")
        buf.write("99\6\2\31\31--<<@@\5\2\n\13\'\'EE\4\2HIgg\3\2HI\4\2XX")
        buf.write("__\4\2\r\r\17\17\4\2\20\20<<\4\2\26\26\32\32\2\u056f\2")
        buf.write("\u00f0\3\2\2\2\4\u00f2\3\2\2\2\6\u00fb\3\2\2\2\b\u00fd")
        buf.write("\3\2\2\2\n\u0100\3\2\2\2\f\u0103\3\2\2\2\16\u010a\3\2")
        buf.write("\2\2\20\u0114\3\2\2\2\22\u0127\3\2\2\2\24\u013a\3\2\2")
        buf.write("\2\26\u0145\3\2\2\2\30\u0155\3\2\2\2\32\u0162\3\2\2\2")
        buf.write("\34\u016c\3\2\2\2\36\u0174\3\2\2\2 \u017c\3\2\2\2\"\u0184")
        buf.write("\3\2\2\2$\u018c\3\2\2\2&\u0194\3\2\2\2(\u019c\3\2\2\2")
        buf.write("*\u01a4\3\2\2\2,\u01ac\3\2\2\2.\u01b4\3\2\2\2\60\u01bc")
        buf.write("\3\2\2\2\62\u01ca\3\2\2\2\64\u01cc\3\2\2\2\66\u01ce\3")
        buf.write("\2\2\28\u01d6\3\2\2\2:\u01df\3\2\2\2<\u01e2\3\2\2\2>\u01ec")
        buf.write("\3\2\2\2@\u01ee\3\2\2\2B\u01f6\3\2\2\2D\u01fb\3\2\2\2")
        buf.write("F\u01fd\3\2\2\2H\u0228\3\2\2\2J\u0241\3\2\2\2L\u0243\3")
        buf.write("\2\2\2N\u0246\3\2\2\2P\u0251\3\2\2\2R\u0255\3\2\2\2T\u025a")
        buf.write("\3\2\2\2V\u0268\3\2\2\2X\u0277\3\2\2\2Z\u0279\3\2\2\2")
        buf.write("\\\u0281\3\2\2\2^\u0286\3\2\2\2`\u0288\3\2\2\2b\u028d")
        buf.write("\3\2\2\2d\u0296\3\2\2\2f\u0298\3\2\2\2h\u02a1\3\2\2\2")
        buf.write("j\u02bb\3\2\2\2l\u02f6\3\2\2\2n\u02f8\3\2\2\2p\u0300\3")
        buf.write("\2\2\2r\u030b\3\2\2\2t\u031a\3\2\2\2v\u0321\3\2\2\2x\u0326")
        buf.write("\3\2\2\2z\u032a\3\2\2\2|\u032f\3\2\2\2~\u033e\3\2\2\2")
        buf.write("\u0080\u0340\3\2\2\2\u0082\u0348\3\2\2\2\u0084\u0357\3")
        buf.write("\2\2\2\u0086\u0387\3\2\2\2\u0088\u03b7\3\2\2\2\u008a\u03c1")
        buf.write("\3\2\2\2\u008c\u03c4\3\2\2\2\u008e\u03d1\3\2\2\2\u0090")
        buf.write("\u03d5\3\2\2\2\u0092\u03df\3\2\2\2\u0094\u03e1\3\2\2\2")
        buf.write("\u0096\u0413\3\2\2\2\u0098\u0420\3\2\2\2\u009a\u0422\3")
        buf.write("\2\2\2\u009c\u0429\3\2\2\2\u009e\u042f\3\2\2\2\u00a0\u0432")
        buf.write("\3\2\2\2\u00a2\u0436\3\2\2\2\u00a4\u0447\3\2\2\2\u00a6")
        buf.write("\u0454\3\2\2\2\u00a8\u0457\3\2\2\2\u00aa\u0469\3\2\2\2")
        buf.write("\u00ac\u047f\3\2\2\2\u00ae\u0485\3\2\2\2\u00b0\u048f\3")
        buf.write("\2\2\2\u00b2\u0493\3\2\2\2\u00b4\u04a4\3\2\2\2\u00b6\u04a9")
        buf.write("\3\2\2\2\u00b8\u04af\3\2\2\2\u00ba\u04b6\3\2\2\2\u00bc")
        buf.write("\u04c7\3\2\2\2\u00be\u04cc\3\2\2\2\u00c0\u04d2\3\2\2\2")
        buf.write("\u00c2\u04d5\3\2\2\2\u00c4\u04df\3\2\2\2\u00c6\u04ec\3")
        buf.write("\2\2\2\u00c8\u04f0\3\2\2\2\u00ca\u04f4\3\2\2\2\u00cc\u00f1")
        buf.write("\7x\2\2\u00cd\u00ce\7\62\2\2\u00ce\u00f1\7x\2\2\u00cf")
        buf.write("\u00f1\7z\2\2\u00d0\u00d2\7|\2\2\u00d1\u00d0\3\2\2\2\u00d2")
        buf.write("\u00d3\3\2\2\2\u00d3\u00d1\3\2\2\2\u00d3\u00d4\3\2\2\2")
        buf.write("\u00d4\u00f1\3\2\2\2\u00d5\u00d6\7H\2\2\u00d6\u00d7\5")
        buf.write("\66\34\2\u00d7\u00d8\7I\2\2\u00d8\u00f1\3\2\2\2\u00d9")
        buf.write("\u00f1\5\f\7\2\u00da\u00f1\5\4\3\2\u00db\u00dd\7\3\2\2")
        buf.write("\u00dc\u00db\3\2\2\2\u00dc\u00dd\3\2\2\2\u00dd\u00de\3")
        buf.write("\2\2\2\u00de\u00df\7H\2\2\u00df\u00e0\5\u009aN\2\u00e0")
        buf.write("\u00e1\7I\2\2\u00e1\u00f1\3\2\2\2\u00e2\u00e3\7\4\2\2")
        buf.write("\u00e3\u00e4\7H\2\2\u00e4\u00e5\5\26\f\2\u00e5\u00e6\7")
        buf.write("g\2\2\u00e6\u00e7\5\u0082B\2\u00e7\u00e8\7I\2\2\u00e8")
        buf.write("\u00f1\3\2\2\2\u00e9\u00ea\7\5\2\2\u00ea\u00eb\7H\2\2")
        buf.write("\u00eb\u00ec\5\u0082B\2\u00ec\u00ed\7g\2\2\u00ed\u00ee")
        buf.write("\5\26\f\2\u00ee\u00ef\7I\2\2\u00ef\u00f1\3\2\2\2\u00f0")
        buf.write("\u00cc\3\2\2\2\u00f0\u00cd\3\2\2\2\u00f0\u00cf\3\2\2\2")
        buf.write("\u00f0\u00d1\3\2\2\2\u00f0\u00d5\3\2\2\2\u00f0\u00d9\3")
        buf.write("\2\2\2\u00f0\u00da\3\2\2\2\u00f0\u00dc\3\2\2\2\u00f0\u00e2")
        buf.write("\3\2\2\2\u00f0\u00e9\3\2\2\2\u00f1\3\3\2\2\2\u00f2\u00f4")
        buf.write("\7H\2\2\u00f3\u00f5\5|?\2\u00f4\u00f3\3\2\2\2\u00f4\u00f5")
        buf.write("\3\2\2\2\u00f5\u00f6\3\2\2\2\u00f6\u00f7\7I\2\2\u00f7")
        buf.write("\u00f8\5\6\4\2\u00f8\5\3\2\2\2\u00f9\u00fc\5\b\5\2\u00fa")
        buf.write("\u00fc\5\n\6\2\u00fb\u00f9\3\2\2\2\u00fb\u00fa\3\2\2\2")
        buf.write("\u00fc\7\3\2\2\2\u00fd\u00fe\7c\2\2\u00fe\u00ff\5\66\34")
        buf.write("\2\u00ff\t\3\2\2\2\u0100\u0101\7c\2\2\u0101\u0102\5\u009a")
        buf.write("N\2\u0102\13\3\2\2\2\u0103\u0104\7C\2\2\u0104\u0105\7")
        buf.write("H\2\2\u0105\u0106\5\62\32\2\u0106\u0107\7g\2\2\u0107\u0108")
        buf.write("\5\16\b\2\u0108\u0109\7I\2\2\u0109\r\3\2\2\2\u010a\u010f")
        buf.write("\5\20\t\2\u010b\u010c\7g\2\2\u010c\u010e\5\20\t\2\u010d")
        buf.write("\u010b\3\2\2\2\u010e\u0111\3\2\2\2\u010f\u010d\3\2\2\2")
        buf.write("\u010f\u0110\3\2\2\2\u0110\17\3\2\2\2\u0111\u010f\3\2")
        buf.write("\2\2\u0112\u0115\5\u0082B\2\u0113\u0115\7\33\2\2\u0114")
        buf.write("\u0112\3\2\2\2\u0114\u0113\3\2\2\2\u0115\u0116\3\2\2\2")
        buf.write("\u0116\u0117\7e\2\2\u0117\u0118\5\62\32\2\u0118\21\3\2")
        buf.write("\2\2\u0119\u0128\5\2\2\2\u011a\u011c\7\3\2\2\u011b\u011a")
        buf.write("\3\2\2\2\u011b\u011c\3\2\2\2\u011c\u011d\3\2\2\2\u011d")
        buf.write("\u011e\7H\2\2\u011e\u011f\5\u0082B\2\u011f\u0120\7I\2")
        buf.write("\2\u0120\u0121\7L\2\2\u0121\u0123\5\u008cG\2\u0122\u0124")
        buf.write("\7g\2\2\u0123\u0122\3\2\2\2\u0123\u0124\3\2\2\2\u0124")
        buf.write("\u0125\3\2\2\2\u0125\u0126\7M\2\2\u0126\u0128\3\2\2\2")
        buf.write("\u0127\u0119\3\2\2\2\u0127\u011b\3\2\2\2\u0128\u0137\3")
        buf.write("\2\2\2\u0129\u012a\7J\2\2\u012a\u012b\5\66\34\2\u012b")
        buf.write("\u012c\7K\2\2\u012c\u0136\3\2\2\2\u012d\u012f\7H\2\2\u012e")
        buf.write("\u0130\5\24\13\2\u012f\u012e\3\2\2\2\u012f\u0130\3\2\2")
        buf.write("\2\u0130\u0131\3\2\2\2\u0131\u0136\7I\2\2\u0132\u0133")
        buf.write("\t\2\2\2\u0133\u0136\7x\2\2\u0134\u0136\t\3\2\2\u0135")
        buf.write("\u0129\3\2\2\2\u0135\u012d\3\2\2\2\u0135\u0132\3\2\2\2")
        buf.write("\u0135\u0134\3\2\2\2\u0136\u0139\3\2\2\2\u0137\u0135\3")
        buf.write("\2\2\2\u0137\u0138\3\2\2\2\u0138\23\3\2\2\2\u0139\u0137")
        buf.write("\3\2\2\2\u013a\u013f\5\62\32\2\u013b\u013c\7g\2\2\u013c")
        buf.write("\u013e\5\62\32\2\u013d\u013b\3\2\2\2\u013e\u0141\3\2\2")
        buf.write("\2\u013f\u013d\3\2\2\2\u013f\u0140\3\2\2\2\u0140\25\3")
        buf.write("\2\2\2\u0141\u013f\3\2\2\2\u0142\u0144\t\4\2\2\u0143\u0142")
        buf.write("\3\2\2\2\u0144\u0147\3\2\2\2\u0145\u0143\3\2\2\2\u0145")
        buf.write("\u0146\3\2\2\2\u0146\u0153\3\2\2\2\u0147\u0145\3\2\2\2")
        buf.write("\u0148\u0154\5\22\n\2\u0149\u014a\5\30\r\2\u014a\u014b")
        buf.write("\5\32\16\2\u014b\u0154\3\2\2\2\u014c\u014d\t\5\2\2\u014d")
        buf.write("\u014e\7H\2\2\u014e\u014f\5\u0082B\2\u014f\u0150\7I\2")
        buf.write("\2\u0150\u0154\3\2\2\2\u0151\u0152\7]\2\2\u0152\u0154")
        buf.write("\7x\2\2\u0153\u0148\3\2\2\2\u0153\u0149\3\2\2\2\u0153")
        buf.write("\u014c\3\2\2\2\u0153\u0151\3\2\2\2\u0154\27\3\2\2\2\u0155")
        buf.write("\u0156\t\6\2\2\u0156\31\3\2\2\2\u0157\u0159\b\16\1\2\u0158")
        buf.write("\u015a\7\3\2\2\u0159\u0158\3\2\2\2\u0159\u015a\3\2\2\2")
        buf.write("\u015a\u015b\3\2\2\2\u015b\u015c\7H\2\2\u015c\u015d\5")
        buf.write("\u0082B\2\u015d\u015e\7I\2\2\u015e\u015f\5\32\16\6\u015f")
        buf.write("\u0163\3\2\2\2\u0160\u0163\5\26\f\2\u0161\u0163\7{\2\2")
        buf.write("\u0162\u0157\3\2\2\2\u0162\u0160\3\2\2\2\u0162\u0161\3")
        buf.write("\2\2\2\u0163\u0169\3\2\2\2\u0164\u0165\f\5\2\2\u0165\u0166")
        buf.write("\7\24\2\2\u0166\u0168\5\u0082B\2\u0167\u0164\3\2\2\2\u0168")
        buf.write("\u016b\3\2\2\2\u0169\u0167\3\2\2\2\u0169\u016a\3\2\2\2")
        buf.write("\u016a\33\3\2\2\2\u016b\u0169\3\2\2\2\u016c\u0171\5\32")
        buf.write("\16\2\u016d\u016e\t\7\2\2\u016e\u0170\5\32\16\2\u016f")
        buf.write("\u016d\3\2\2\2\u0170\u0173\3\2\2\2\u0171\u016f\3\2\2\2")
        buf.write("\u0171\u0172\3\2\2\2\u0172\35\3\2\2\2\u0173\u0171\3\2")
        buf.write("\2\2\u0174\u0179\5\34\17\2\u0175\u0176\t\b\2\2\u0176\u0178")
        buf.write("\5\34\17\2\u0177\u0175\3\2\2\2\u0178\u017b\3\2\2\2\u0179")
        buf.write("\u0177\3\2\2\2\u0179\u017a\3\2\2\2\u017a\37\3\2\2\2\u017b")
        buf.write("\u0179\3\2\2\2\u017c\u0181\5\36\20\2\u017d\u017e\t\t\2")
        buf.write("\2\u017e\u0180\5\36\20\2\u017f\u017d\3\2\2\2\u0180\u0183")
        buf.write("\3\2\2\2\u0181\u017f\3\2\2\2\u0181\u0182\3\2\2\2\u0182")
        buf.write("!\3\2\2\2\u0183\u0181\3\2\2\2\u0184\u0189\5 \21\2\u0185")
        buf.write("\u0186\t\n\2\2\u0186\u0188\5 \21\2\u0187\u0185\3\2\2\2")
        buf.write("\u0188\u018b\3\2\2\2\u0189\u0187\3\2\2\2\u0189\u018a\3")
        buf.write("\2\2\2\u018a#\3\2\2\2\u018b\u0189\3\2\2\2\u018c\u0191")
        buf.write("\5\"\22\2\u018d\u018e\t\13\2\2\u018e\u0190\5\"\22\2\u018f")
        buf.write("\u018d\3\2\2\2\u0190\u0193\3\2\2\2\u0191\u018f\3\2\2\2")
        buf.write("\u0191\u0192\3\2\2\2\u0192%\3\2\2\2\u0193\u0191\3\2\2")
        buf.write("\2\u0194\u0199\5$\23\2\u0195\u0196\7[\2\2\u0196\u0198")
        buf.write("\5$\23\2\u0197\u0195\3\2\2\2\u0198\u019b\3\2\2\2\u0199")
        buf.write("\u0197\3\2\2\2\u0199\u019a\3\2\2\2\u019a\'\3\2\2\2\u019b")
        buf.write("\u0199\3\2\2\2\u019c\u01a1\5&\24\2\u019d\u019e\7_\2\2")
        buf.write("\u019e\u01a0\5&\24\2\u019f\u019d\3\2\2\2\u01a0\u01a3\3")
        buf.write("\2\2\2\u01a1\u019f\3\2\2\2\u01a1\u01a2\3\2\2\2\u01a2)")
        buf.write("\3\2\2\2\u01a3\u01a1\3\2\2\2\u01a4\u01a9\5(\25\2\u01a5")
        buf.write("\u01a6\7\\\2\2\u01a6\u01a8\5(\25\2\u01a7\u01a5\3\2\2\2")
        buf.write("\u01a8\u01ab\3\2\2\2\u01a9\u01a7\3\2\2\2\u01a9\u01aa\3")
        buf.write("\2\2\2\u01aa+\3\2\2\2\u01ab\u01a9\3\2\2\2\u01ac\u01b1")
        buf.write("\5*\26\2\u01ad\u01ae\7]\2\2\u01ae\u01b0\5*\26\2\u01af")
        buf.write("\u01ad\3\2\2\2\u01b0\u01b3\3\2\2\2\u01b1\u01af\3\2\2\2")
        buf.write("\u01b1\u01b2\3\2\2\2\u01b2-\3\2\2\2\u01b3\u01b1\3\2\2")
        buf.write("\2\u01b4\u01b9\5,\27\2\u01b5\u01b6\7^\2\2\u01b6\u01b8")
        buf.write("\5,\27\2\u01b7\u01b5\3\2\2\2\u01b8\u01bb\3\2\2\2\u01b9")
        buf.write("\u01b7\3\2\2\2\u01b9\u01ba\3\2\2\2\u01ba/\3\2\2\2\u01bb")
        buf.write("\u01b9\3\2\2\2\u01bc\u01c2\5.\30\2\u01bd\u01be\7d\2\2")
        buf.write("\u01be\u01bf\5\66\34\2\u01bf\u01c0\7e\2\2\u01c0\u01c1")
        buf.write("\5\60\31\2\u01c1\u01c3\3\2\2\2\u01c2\u01bd\3\2\2\2\u01c2")
        buf.write("\u01c3\3\2\2\2\u01c3\61\3\2\2\2\u01c4\u01cb\5\60\31\2")
        buf.write("\u01c5\u01c6\5\26\f\2\u01c6\u01c7\5\64\33\2\u01c7\u01c8")
        buf.write("\5\62\32\2\u01c8\u01cb\3\2\2\2\u01c9\u01cb\7{\2\2\u01ca")
        buf.write("\u01c4\3\2\2\2\u01ca\u01c5\3\2\2\2\u01ca\u01c9\3\2\2\2")
        buf.write("\u01cb\63\3\2\2\2\u01cc\u01cd\t\f\2\2\u01cd\65\3\2\2\2")
        buf.write("\u01ce\u01d3\5\62\32\2\u01cf\u01d0\7g\2\2\u01d0\u01d2")
        buf.write("\5\62\32\2\u01d1\u01cf\3\2\2\2\u01d2\u01d5\3\2\2\2\u01d3")
        buf.write("\u01d1\3\2\2\2\u01d3\u01d4\3\2\2\2\u01d4\67\3\2\2\2\u01d5")
        buf.write("\u01d3\3\2\2\2\u01d6\u01d7\5\60\31\2\u01d79\3\2\2\2\u01d8")
        buf.write("\u01da\5<\37\2\u01d9\u01db\5@!\2\u01da\u01d9\3\2\2\2\u01da")
        buf.write("\u01db\3\2\2\2\u01db\u01dc\3\2\2\2\u01dc\u01dd\7f\2\2")
        buf.write("\u01dd\u01e0\3\2\2\2\u01de\u01e0\5\u0094K\2\u01df\u01d8")
        buf.write("\3\2\2\2\u01df\u01de\3\2\2\2\u01e0;\3\2\2\2\u01e1\u01e3")
        buf.write("\5> \2\u01e2\u01e1\3\2\2\2\u01e3\u01e4\3\2\2\2\u01e4\u01e2")
        buf.write("\3\2\2\2\u01e4\u01e5\3\2\2\2\u01e5=\3\2\2\2\u01e6\u01ed")
        buf.write("\5F$\2\u01e7\u01ed\5D#\2\u01e8\u01ed\5H%\2\u01e9\u01ed")
        buf.write("\5b\62\2\u01ea\u01ed\5d\63\2\u01eb\u01ed\5f\64\2\u01ec")
        buf.write("\u01e6\3\2\2\2\u01ec\u01e7\3\2\2\2\u01ec\u01e8\3\2\2\2")
        buf.write("\u01ec\u01e9\3\2\2\2\u01ec\u01ea\3\2\2\2\u01ec\u01eb\3")
        buf.write("\2\2\2\u01ed?\3\2\2\2\u01ee\u01f3\5B\"\2\u01ef\u01f0\7")
        buf.write("g\2\2\u01f0\u01f2\5B\"\2\u01f1\u01ef\3\2\2\2\u01f2\u01f5")
        buf.write("\3\2\2\2\u01f3\u01f1\3\2\2\2\u01f3\u01f4\3\2\2\2\u01f4")
        buf.write("A\3\2\2\2\u01f5\u01f3\3\2\2\2\u01f6\u01f9\5h\65\2\u01f7")
        buf.write("\u01f8\7h\2\2\u01f8\u01fa\5\u008aF\2\u01f9\u01f7\3\2\2")
        buf.write("\2\u01f9\u01fa\3\2\2\2\u01faC\3\2\2\2\u01fb\u01fc\7 \2")
        buf.write("\2\u01fcE\3\2\2\2\u01fd\u01fe\t\r\2\2\u01feG\3\2\2\2\u01ff")
        buf.write("\u0219\b%\1\2\u0200\u021a\7;\2\2\u0201\u021a\7\30\2\2")
        buf.write("\u0202\u021a\7/\2\2\u0203\u021a\7(\2\2\u0204\u021a\7\64")
        buf.write("\2\2\u0205\u021a\7+\2\2\u0206\u021a\7#\2\2\u0207\u021a")
        buf.write("\7\35\2\2\u0208\u021a\7\60\2\2\u0209\u020a\7*\2\2\u020a")
        buf.write("\u020b\7N\2\2\u020b\u020c\5H%\2\u020c\u020d\7P\2\2\u020d")
        buf.write("\u021a\3\2\2\2\u020e\u020f\7)\2\2\u020f\u0210\7N\2\2\u0210")
        buf.write("\u0211\5z>\2\u0211\u0212\7P\2\2\u0212\u021a\3\2\2\2\u0213")
        buf.write("\u021a\7:\2\2\u0214\u021a\7A\2\2\u0215\u021a\7B\2\2\u0216")
        buf.write("\u021a\7\6\2\2\u0217\u021a\7\7\2\2\u0218\u021a\7\b\2\2")
        buf.write("\u0219\u0200\3\2\2\2\u0219\u0201\3\2\2\2\u0219\u0202\3")
        buf.write("\2\2\2\u0219\u0203\3\2\2\2\u0219\u0204\3\2\2\2\u0219\u0205")
        buf.write("\3\2\2\2\u0219\u0206\3\2\2\2\u0219\u0207\3\2\2\2\u0219")
        buf.write("\u0208\3\2\2\2\u0219\u0209\3\2\2\2\u0219\u020e\3\2\2\2")
        buf.write("\u0219\u0213\3\2\2\2\u0219\u0214\3\2\2\2\u0219\u0215\3")
        buf.write("\2\2\2\u0219\u0216\3\2\2\2\u0219\u0217\3\2\2\2\u0219\u0218")
        buf.write("\3\2\2\2\u021a\u0229\3\2\2\2\u021b\u021c\7\3\2\2\u021c")
        buf.write("\u021d\7H\2\2\u021d\u021e\t\16\2\2\u021e\u0229\7I\2\2")
        buf.write("\u021f\u0229\5`\61\2\u0220\u0229\5J&\2\u0221\u0229\5X")
        buf.write("-\2\u0222\u0229\5\u0088E\2\u0223\u0224\t\17\2\2\u0224")
        buf.write("\u0225\7H\2\2\u0225\u0226\58\35\2\u0226\u0227\7I\2\2\u0227")
        buf.write("\u0229\3\2\2\2\u0228\u01ff\3\2\2\2\u0228\u021b\3\2\2\2")
        buf.write("\u0228\u021f\3\2\2\2\u0228\u0220\3\2\2\2\u0228\u0221\3")
        buf.write("\2\2\2\u0228\u0222\3\2\2\2\u0228\u0223\3\2\2\2\u0229\u022e")
        buf.write("\3\2\2\2\u022a\u022b\f\3\2\2\u022b\u022d\5v<\2\u022c\u022a")
        buf.write("\3\2\2\2\u022d\u0230\3\2\2\2\u022e\u022c\3\2\2\2\u022e")
        buf.write("\u022f\3\2\2\2\u022fI\3\2\2\2\u0230\u022e\3\2\2\2\u0231")
        buf.write("\u0233\5L\'\2\u0232\u0234\7x\2\2\u0233\u0232\3\2\2\2\u0233")
        buf.write("\u0234\3\2\2\2\u0234\u0235\3\2\2\2\u0235\u0239\7L\2\2")
        buf.write("\u0236\u0238\5N(\2\u0237\u0236\3\2\2\2\u0238\u023b\3\2")
        buf.write("\2\2\u0239\u0237\3\2\2\2\u0239\u023a\3\2\2\2\u023a\u023c")
        buf.write("\3\2\2\2\u023b\u0239\3\2\2\2\u023c\u023d\7M\2\2\u023d")
        buf.write("\u0242\3\2\2\2\u023e\u023f\5L\'\2\u023f\u0240\7x\2\2\u0240")
        buf.write("\u0242\3\2\2\2\u0241\u0231\3\2\2\2\u0241\u023e\3\2\2\2")
        buf.write("\u0242K\3\2\2\2\u0243\u0244\t\20\2\2\u0244M\3\2\2\2\u0245")
        buf.write("\u0247\5P)\2\u0246\u0245\3\2\2\2\u0247\u0248\3\2\2\2\u0248")
        buf.write("\u0246\3\2\2\2\u0248\u0249\3\2\2\2\u0249O\3\2\2\2\u024a")
        buf.write("\u024c\5R*\2\u024b\u024d\5T+\2\u024c\u024b\3\2\2\2\u024c")
        buf.write("\u024d\3\2\2\2\u024d\u024e\3\2\2\2\u024e\u024f\7f\2\2")
        buf.write("\u024f\u0252\3\2\2\2\u0250\u0252\5\u0094K\2\u0251\u024a")
        buf.write("\3\2\2\2\u0251\u0250\3\2\2\2\u0252Q\3\2\2\2\u0253\u0256")
        buf.write("\5H%\2\u0254\u0256\5b\62\2\u0255\u0253\3\2\2\2\u0255\u0254")
        buf.write("\3\2\2\2\u0256\u0258\3\2\2\2\u0257\u0259\5R*\2\u0258\u0257")
        buf.write("\3\2\2\2\u0258\u0259\3\2\2\2\u0259S\3\2\2\2\u025a\u025f")
        buf.write("\5V,\2\u025b\u025c\7g\2\2\u025c\u025e\5V,\2\u025d\u025b")
        buf.write("\3\2\2\2\u025e\u0261\3\2\2\2\u025f\u025d\3\2\2\2\u025f")
        buf.write("\u0260\3\2\2\2\u0260U\3\2\2\2\u0261\u025f\3\2\2\2\u0262")
        buf.write("\u0269\5h\65\2\u0263\u0265\5h\65\2\u0264\u0263\3\2\2\2")
        buf.write("\u0264\u0265\3\2\2\2\u0265\u0266\3\2\2\2\u0266\u0267\7")
        buf.write("e\2\2\u0267\u0269\58\35\2\u0268\u0262\3\2\2\2\u0268\u0264")
        buf.write("\3\2\2\2\u0269W\3\2\2\2\u026a\u026c\7!\2\2\u026b\u026d")
        buf.write("\7x\2\2\u026c\u026b\3\2\2\2\u026c\u026d\3\2\2\2\u026d")
        buf.write("\u026e\3\2\2\2\u026e\u026f\7L\2\2\u026f\u0271\5Z.\2\u0270")
        buf.write("\u0272\7g\2\2\u0271\u0270\3\2\2\2\u0271\u0272\3\2\2\2")
        buf.write("\u0272\u0273\3\2\2\2\u0273\u0274\7M\2\2\u0274\u0278\3")
        buf.write("\2\2\2\u0275\u0276\7!\2\2\u0276\u0278\7x\2\2\u0277\u026a")
        buf.write("\3\2\2\2\u0277\u0275\3\2\2\2\u0278Y\3\2\2\2\u0279\u027e")
        buf.write("\5\\/\2\u027a\u027b\7g\2\2\u027b\u027d\5\\/\2\u027c\u027a")
        buf.write("\3\2\2\2\u027d\u0280\3\2\2\2\u027e\u027c\3\2\2\2\u027e")
        buf.write("\u027f\3\2\2\2\u027f[\3\2\2\2\u0280\u027e\3\2\2\2\u0281")
        buf.write("\u0284\5^\60\2\u0282\u0283\7h\2\2\u0283\u0285\58\35\2")
        buf.write("\u0284\u0282\3\2\2\2\u0284\u0285\3\2\2\2\u0285]\3\2\2")
        buf.write("\2\u0286\u0287\7x\2\2\u0287_\3\2\2\2\u0288\u0289\7@\2")
        buf.write("\2\u0289\u028a\7H\2\2\u028a\u028b\5\u0082B\2\u028b\u028c")
        buf.write("\7I\2\2\u028ca\3\2\2\2\u028d\u028e\t\21\2\2\u028ec\3\2")
        buf.write("\2\2\u028f\u0297\t\22\2\2\u0290\u0297\5n8\2\u0291\u0292")
        buf.write("\7\f\2\2\u0292\u0293\7H\2\2\u0293\u0294\7x\2\2\u0294\u0297")
        buf.write("\7I\2\2\u0295\u0297\5D#\2\u0296\u028f\3\2\2\2\u0296\u0290")
        buf.write("\3\2\2\2\u0296\u0291\3\2\2\2\u0296\u0295\3\2\2\2\u0297")
        buf.write("e\3\2\2\2\u0298\u0299\7>\2\2\u0299\u029c\7H\2\2\u029a")
        buf.write("\u029d\5\u0082B\2\u029b\u029d\58\35\2\u029c\u029a\3\2")
        buf.write("\2\2\u029c\u029b\3\2\2\2\u029d\u029e\3\2\2\2\u029e\u029f")
        buf.write("\7I\2\2\u029fg\3\2\2\2\u02a0\u02a2\5v<\2\u02a1\u02a0\3")
        buf.write("\2\2\2\u02a1\u02a2\3\2\2\2\u02a2\u02a3\3\2\2\2\u02a3\u02a7")
        buf.write("\5j\66\2\u02a4\u02a6\5l\67\2\u02a5\u02a4\3\2\2\2\u02a6")
        buf.write("\u02a9\3\2\2\2\u02a7\u02a5\3\2\2\2\u02a7\u02a8\3\2\2\2")
        buf.write("\u02a8i\3\2\2\2\u02a9\u02a7\3\2\2\2\u02aa\u02ab\b\66\1")
        buf.write("\2\u02ab\u02bc\7x\2\2\u02ac\u02ad\7H\2\2\u02ad\u02ae\5")
        buf.write("h\65\2\u02ae\u02af\7I\2\2\u02af\u02bc\3\2\2\2\u02b0\u02b1")
        buf.write("\7x\2\2\u02b1\u02b2\7e\2\2\u02b2\u02bc\7{\2\2\u02b3\u02b5")
        buf.write("\7H\2\2\u02b4\u02b6\5H%\2\u02b5\u02b4\3\2\2\2\u02b5\u02b6")
        buf.write("\3\2\2\2\u02b6\u02b7\3\2\2\2\u02b7\u02b8\5v<\2\u02b8\u02b9")
        buf.write("\5j\66\2\u02b9\u02ba\7I\2\2\u02ba\u02bc\3\2\2\2\u02bb")
        buf.write("\u02aa\3\2\2\2\u02bb\u02ac\3\2\2\2\u02bb\u02b0\3\2\2\2")
        buf.write("\u02bb\u02b3\3\2\2\2\u02bc\u02ea\3\2\2\2\u02bd\u02be\f")
        buf.write("\n\2\2\u02be\u02c0\7J\2\2\u02bf\u02c1\5x=\2\u02c0\u02bf")
        buf.write("\3\2\2\2\u02c0\u02c1\3\2\2\2\u02c1\u02c3\3\2\2\2\u02c2")
        buf.write("\u02c4\5\62\32\2\u02c3\u02c2\3\2\2\2\u02c3\u02c4\3\2\2")
        buf.write("\2\u02c4\u02c5\3\2\2\2\u02c5\u02e9\7K\2\2\u02c6\u02c7")
        buf.write("\f\t\2\2\u02c7\u02c8\7J\2\2\u02c8\u02ca\7\63\2\2\u02c9")
        buf.write("\u02cb\5x=\2\u02ca\u02c9\3\2\2\2\u02ca\u02cb\3\2\2\2\u02cb")
        buf.write("\u02cc\3\2\2\2\u02cc\u02cd\5\62\32\2\u02cd\u02ce\7K\2")
        buf.write("\2\u02ce\u02e9\3\2\2\2\u02cf\u02d0\f\b\2\2\u02d0\u02d1")
        buf.write("\7J\2\2\u02d1\u02d2\5x=\2\u02d2\u02d3\7\63\2\2\u02d3\u02d4")
        buf.write("\5\62\32\2\u02d4\u02d5\7K\2\2\u02d5\u02e9\3\2\2\2\u02d6")
        buf.write("\u02d7\f\7\2\2\u02d7\u02d9\7J\2\2\u02d8\u02da\5x=\2\u02d9")
        buf.write("\u02d8\3\2\2\2\u02d9\u02da\3\2\2\2\u02da\u02db\3\2\2\2")
        buf.write("\u02db\u02dc\7X\2\2\u02dc\u02e9\7K\2\2\u02dd\u02de\f\6")
        buf.write("\2\2\u02de\u02df\7H\2\2\u02df\u02e0\5z>\2\u02e0\u02e1")
        buf.write("\7I\2\2\u02e1\u02e9\3\2\2\2\u02e2\u02e3\f\5\2\2\u02e3")
        buf.write("\u02e5\7H\2\2\u02e4\u02e6\5\u0080A\2\u02e5\u02e4\3\2\2")
        buf.write("\2\u02e5\u02e6\3\2\2\2\u02e6\u02e7\3\2\2\2\u02e7\u02e9")
        buf.write("\7I\2\2\u02e8\u02bd\3\2\2\2\u02e8\u02c6\3\2\2\2\u02e8")
        buf.write("\u02cf\3\2\2\2\u02e8\u02d6\3\2\2\2\u02e8\u02dd\3\2\2\2")
        buf.write("\u02e8\u02e2\3\2\2\2\u02e9\u02ec\3\2\2\2\u02ea\u02e8\3")
        buf.write("\2\2\2\u02ea\u02eb\3\2\2\2\u02ebk\3\2\2\2\u02ec\u02ea")
        buf.write("\3\2\2\2\u02ed\u02ee\7\r\2\2\u02ee\u02f0\7H\2\2\u02ef")
        buf.write("\u02f1\7|\2\2\u02f0\u02ef\3\2\2\2\u02f1\u02f2\3\2\2\2")
        buf.write("\u02f2\u02f0\3\2\2\2\u02f2\u02f3\3\2\2\2\u02f3\u02f4\3")
        buf.write("\2\2\2\u02f4\u02f7\7I\2\2\u02f5\u02f7\5n8\2\u02f6\u02ed")
        buf.write("\3\2\2\2\u02f6\u02f5\3\2\2\2\u02f7m\3\2\2\2\u02f8\u02f9")
        buf.write("\7\16\2\2\u02f9\u02fa\7H\2\2\u02fa\u02fb\7H\2\2\u02fb")
        buf.write("\u02fc\5p9\2\u02fc\u02fd\7I\2\2\u02fd\u02fe\7I\2\2\u02fe")
        buf.write("o\3\2\2\2\u02ff\u0301\5r:\2\u0300\u02ff\3\2\2\2\u0300")
        buf.write("\u0301\3\2\2\2\u0301\u0308\3\2\2\2\u0302\u0304\7g\2\2")
        buf.write("\u0303\u0305\5r:\2\u0304\u0303\3\2\2\2\u0304\u0305\3\2")
        buf.write("\2\2\u0305\u0307\3\2\2\2\u0306\u0302\3\2\2\2\u0307\u030a")
        buf.write("\3\2\2\2\u0308\u0306\3\2\2\2\u0308\u0309\3\2\2\2\u0309")
        buf.write("q\3\2\2\2\u030a\u0308\3\2\2\2\u030b\u0311\n\23\2\2\u030c")
        buf.write("\u030e\7H\2\2\u030d\u030f\5\24\13\2\u030e\u030d\3\2\2")
        buf.write("\2\u030e\u030f\3\2\2\2\u030f\u0310\3\2\2\2\u0310\u0312")
        buf.write("\7I\2\2\u0311\u030c\3\2\2\2\u0311\u0312\3\2\2\2\u0312")
        buf.write("s\3\2\2\2\u0313\u0319\n\24\2\2\u0314\u0315\7H\2\2\u0315")
        buf.write("\u0316\5t;\2\u0316\u0317\7I\2\2\u0317\u0319\3\2\2\2\u0318")
        buf.write("\u0313\3\2\2\2\u0318\u0314\3\2\2\2\u0319\u031c\3\2\2\2")
        buf.write("\u031a\u0318\3\2\2\2\u031a\u031b\3\2\2\2\u031bu\3\2\2")
        buf.write("\2\u031c\u031a\3\2\2\2\u031d\u031f\t\25\2\2\u031e\u0320")
        buf.write("\5x=\2\u031f\u031e\3\2\2\2\u031f\u0320\3\2\2\2\u0320\u0322")
        buf.write("\3\2\2\2\u0321\u031d\3\2\2\2\u0322\u0323\3\2\2\2\u0323")
        buf.write("\u0321\3\2\2\2\u0323\u0324\3\2\2\2\u0324w\3\2\2\2\u0325")
        buf.write("\u0327\5b\62\2\u0326\u0325\3\2\2\2\u0327\u0328\3\2\2\2")
        buf.write("\u0328\u0326\3\2\2\2\u0328\u0329\3\2\2\2\u0329y\3\2\2")
        buf.write("\2\u032a\u032d\5|?\2\u032b\u032c\7g\2\2\u032c\u032e\7")
        buf.write("w\2\2\u032d\u032b\3\2\2\2\u032d\u032e\3\2\2\2\u032e{\3")
        buf.write("\2\2\2\u032f\u0334\5~@\2\u0330\u0331\7g\2\2\u0331\u0333")
        buf.write("\5~@\2\u0332\u0330\3\2\2\2\u0333\u0336\3\2\2\2\u0334\u0332")
        buf.write("\3\2\2\2\u0334\u0335\3\2\2\2\u0335}\3\2\2\2\u0336\u0334")
        buf.write("\3\2\2\2\u0337\u0338\5<\37\2\u0338\u0339\5h\65\2\u0339")
        buf.write("\u033f\3\2\2\2\u033a\u033c\5<\37\2\u033b\u033d\5\u0084")
        buf.write("C\2\u033c\u033b\3\2\2\2\u033c\u033d\3\2\2\2\u033d\u033f")
        buf.write("\3\2\2\2\u033e\u0337\3\2\2\2\u033e\u033a\3\2\2\2\u033f")
        buf.write("\177\3\2\2\2\u0340\u0345\7x\2\2\u0341\u0342\7g\2\2\u0342")
        buf.write("\u0344\7x\2\2\u0343\u0341\3\2\2\2\u0344\u0347\3\2\2\2")
        buf.write("\u0345\u0343\3\2\2\2\u0345\u0346\3\2\2\2\u0346\u0081\3")
        buf.write("\2\2\2\u0347\u0345\3\2\2\2\u0348\u034a\5R*\2\u0349\u034b")
        buf.write("\5\u0084C\2\u034a\u0349\3\2\2\2\u034a\u034b\3\2\2\2\u034b")
        buf.write("\u0083\3\2\2\2\u034c\u0358\5v<\2\u034d\u034f\5v<\2\u034e")
        buf.write("\u034d\3\2\2\2\u034e\u034f\3\2\2\2\u034f\u0350\3\2\2\2")
        buf.write("\u0350\u0354\5\u0086D\2\u0351\u0353\5l\67\2\u0352\u0351")
        buf.write("\3\2\2\2\u0353\u0356\3\2\2\2\u0354\u0352\3\2\2\2\u0354")
        buf.write("\u0355\3\2\2\2\u0355\u0358\3\2\2\2\u0356\u0354\3\2\2\2")
        buf.write("\u0357\u034c\3\2\2\2\u0357\u034e\3\2\2\2\u0358\u0085\3")
        buf.write("\2\2\2\u0359\u035a\bD\1\2\u035a\u035b\7H\2\2\u035b\u035c")
        buf.write("\5\u0084C\2\u035c\u0360\7I\2\2\u035d\u035f\5l\67\2\u035e")
        buf.write("\u035d\3\2\2\2\u035f\u0362\3\2\2\2\u0360\u035e\3\2\2\2")
        buf.write("\u0360\u0361\3\2\2\2\u0361\u0388\3\2\2\2\u0362\u0360\3")
        buf.write("\2\2\2\u0363\u0365\7J\2\2\u0364\u0366\5x=\2\u0365\u0364")
        buf.write("\3\2\2\2\u0365\u0366\3\2\2\2\u0366\u0368\3\2\2\2\u0367")
        buf.write("\u0369\5\62\32\2\u0368\u0367\3\2\2\2\u0368\u0369\3\2\2")
        buf.write("\2\u0369\u036a\3\2\2\2\u036a\u0388\7K\2\2\u036b\u036c")
        buf.write("\7J\2\2\u036c\u036e\7\63\2\2\u036d\u036f\5x=\2\u036e\u036d")
        buf.write("\3\2\2\2\u036e\u036f\3\2\2\2\u036f\u0370\3\2\2\2\u0370")
        buf.write("\u0371\5\62\32\2\u0371\u0372\7K\2\2\u0372\u0388\3\2\2")
        buf.write("\2\u0373\u0374\7J\2\2\u0374\u0375\5x=\2\u0375\u0376\7")
        buf.write("\63\2\2\u0376\u0377\5\62\32\2\u0377\u0378\7K\2\2\u0378")
        buf.write("\u0388\3\2\2\2\u0379\u037a\7J\2\2\u037a\u037b\7X\2\2\u037b")
        buf.write("\u0388\7K\2\2\u037c\u037e\7H\2\2\u037d\u037f\5z>\2\u037e")
        buf.write("\u037d\3\2\2\2\u037e\u037f\3\2\2\2\u037f\u0380\3\2\2\2")
        buf.write("\u0380\u0384\7I\2\2\u0381\u0383\5l\67\2\u0382\u0381\3")
        buf.write("\2\2\2\u0383\u0386\3\2\2\2\u0384\u0382\3\2\2\2\u0384\u0385")
        buf.write("\3\2\2\2\u0385\u0388\3\2\2\2\u0386\u0384\3\2\2\2\u0387")
        buf.write("\u0359\3\2\2\2\u0387\u0363\3\2\2\2\u0387\u036b\3\2\2\2")
        buf.write("\u0387\u0373\3\2\2\2\u0387\u0379\3\2\2\2\u0387\u037c\3")
        buf.write("\2\2\2\u0388\u03b4\3\2\2\2\u0389\u038a\f\7\2\2\u038a\u038c")
        buf.write("\7J\2\2\u038b\u038d\5x=\2\u038c\u038b\3\2\2\2\u038c\u038d")
        buf.write("\3\2\2\2\u038d\u038f\3\2\2\2\u038e\u0390\5\62\32\2\u038f")
        buf.write("\u038e\3\2\2\2\u038f\u0390\3\2\2\2\u0390\u0391\3\2\2\2")
        buf.write("\u0391\u03b3\7K\2\2\u0392\u0393\f\6\2\2\u0393\u0394\7")
        buf.write("J\2\2\u0394\u0396\7\63\2\2\u0395\u0397\5x=\2\u0396\u0395")
        buf.write("\3\2\2\2\u0396\u0397\3\2\2\2\u0397\u0398\3\2\2\2\u0398")
        buf.write("\u0399\5\62\32\2\u0399\u039a\7K\2\2\u039a\u03b3\3\2\2")
        buf.write("\2\u039b\u039c\f\5\2\2\u039c\u039d\7J\2\2\u039d\u039e")
        buf.write("\5x=\2\u039e\u039f\7\63\2\2\u039f\u03a0\5\62\32\2\u03a0")
        buf.write("\u03a1\7K\2\2\u03a1\u03b3\3\2\2\2\u03a2\u03a3\f\4\2\2")
        buf.write("\u03a3\u03a4\7J\2\2\u03a4\u03a5\7X\2\2\u03a5\u03b3\7K")
        buf.write("\2\2\u03a6\u03a7\f\3\2\2\u03a7\u03a9\7H\2\2\u03a8\u03aa")
        buf.write("\5z>\2\u03a9\u03a8\3\2\2\2\u03a9\u03aa\3\2\2\2\u03aa\u03ab")
        buf.write("\3\2\2\2\u03ab\u03af\7I\2\2\u03ac\u03ae\5l\67\2\u03ad")
        buf.write("\u03ac\3\2\2\2\u03ae\u03b1\3\2\2\2\u03af\u03ad\3\2\2\2")
        buf.write("\u03af\u03b0\3\2\2\2\u03b0\u03b3\3\2\2\2\u03b1\u03af\3")
        buf.write("\2\2\2\u03b2\u0389\3\2\2\2\u03b2\u0392\3\2\2\2\u03b2\u039b")
        buf.write("\3\2\2\2\u03b2\u03a2\3\2\2\2\u03b2\u03a6\3\2\2\2\u03b3")
        buf.write("\u03b6\3\2\2\2\u03b4\u03b2\3\2\2\2\u03b4\u03b5\3\2\2\2")
        buf.write("\u03b5\u0087\3\2\2\2\u03b6\u03b4\3\2\2\2\u03b7\u03b8\7")
        buf.write("x\2\2\u03b8\u0089\3\2\2\2\u03b9\u03c2\5\62\32\2\u03ba")
        buf.write("\u03bb\7L\2\2\u03bb\u03bd\5\u008cG\2\u03bc\u03be\7g\2")
        buf.write("\2\u03bd\u03bc\3\2\2\2\u03bd\u03be\3\2\2\2\u03be\u03bf")
        buf.write("\3\2\2\2\u03bf\u03c0\7M\2\2\u03c0\u03c2\3\2\2\2\u03c1")
        buf.write("\u03b9\3\2\2\2\u03c1\u03ba\3\2\2\2\u03c2\u008b\3\2\2\2")
        buf.write("\u03c3\u03c5\5\u008eH\2\u03c4\u03c3\3\2\2\2\u03c4\u03c5")
        buf.write("\3\2\2\2\u03c5\u03c6\3\2\2\2\u03c6\u03ce\5\u008aF\2\u03c7")
        buf.write("\u03c9\7g\2\2\u03c8\u03ca\5\u008eH\2\u03c9\u03c8\3\2\2")
        buf.write("\2\u03c9\u03ca\3\2\2\2\u03ca\u03cb\3\2\2\2\u03cb\u03cd")
        buf.write("\5\u008aF\2\u03cc\u03c7\3\2\2\2\u03cd\u03d0\3\2\2\2\u03ce")
        buf.write("\u03cc\3\2\2\2\u03ce\u03cf\3\2\2\2\u03cf\u008d\3\2\2\2")
        buf.write("\u03d0\u03ce\3\2\2\2\u03d1\u03d2\5\u0090I\2\u03d2\u03d3")
        buf.write("\7h\2\2\u03d3\u008f\3\2\2\2\u03d4\u03d6\5\u0092J\2\u03d5")
        buf.write("\u03d4\3\2\2\2\u03d6\u03d7\3\2\2\2\u03d7\u03d5\3\2\2\2")
        buf.write("\u03d7\u03d8\3\2\2\2\u03d8\u0091\3\2\2\2\u03d9\u03da\7")
        buf.write("J\2\2\u03da\u03db\58\35\2\u03db\u03dc\7K\2\2\u03dc\u03e0")
        buf.write("\3\2\2\2\u03dd\u03de\7v\2\2\u03de\u03e0\7x\2\2\u03df\u03d9")
        buf.write("\3\2\2\2\u03df\u03dd\3\2\2\2\u03e0\u0093\3\2\2\2\u03e1")
        buf.write("\u03e2\7F\2\2\u03e2\u03e3\7H\2\2\u03e3\u03e4\58\35\2\u03e4")
        buf.write("\u03e6\7g\2\2\u03e5\u03e7\7|\2\2\u03e6\u03e5\3\2\2\2\u03e7")
        buf.write("\u03e8\3\2\2\2\u03e8\u03e6\3\2\2\2\u03e8\u03e9\3\2\2\2")
        buf.write("\u03e9\u03ea\3\2\2\2\u03ea\u03eb\7I\2\2\u03eb\u03ec\7")
        buf.write("f\2\2\u03ec\u0095\3\2\2\2\u03ed\u0414\5\u0098M\2\u03ee")
        buf.write("\u0414\5\u009aN\2\u03ef\u0414\5\u00a0Q\2\u03f0\u0414\5")
        buf.write("\u00a2R\2\u03f1\u0414\5\u00aaV\2\u03f2\u0414\5\u00acW")
        buf.write("\2\u03f3\u0414\5\u00b4[\2\u03f4\u03f5\t\26\2\2\u03f5\u03f6")
        buf.write("\t\27\2\2\u03f6\u03ff\7H\2\2\u03f7\u03fc\5.\30\2\u03f8")
        buf.write("\u03f9\7g\2\2\u03f9\u03fb\5.\30\2\u03fa\u03f8\3\2\2\2")
        buf.write("\u03fb\u03fe\3\2\2\2\u03fc\u03fa\3\2\2\2\u03fc\u03fd\3")
        buf.write("\2\2\2\u03fd\u0400\3\2\2\2\u03fe\u03fc\3\2\2\2\u03ff\u03f7")
        buf.write("\3\2\2\2\u03ff\u0400\3\2\2\2\u0400\u040e\3\2\2\2\u0401")
        buf.write("\u040a\7e\2\2\u0402\u0407\5.\30\2\u0403\u0404\7g\2\2\u0404")
        buf.write("\u0406\5.\30\2\u0405\u0403\3\2\2\2\u0406\u0409\3\2\2\2")
        buf.write("\u0407\u0405\3\2\2\2\u0407\u0408\3\2\2\2\u0408\u040b\3")
        buf.write("\2\2\2\u0409\u0407\3\2\2\2\u040a\u0402\3\2\2\2\u040a\u040b")
        buf.write("\3\2\2\2\u040b\u040d\3\2\2\2\u040c\u0401\3\2\2\2\u040d")
        buf.write("\u0410\3\2\2\2\u040e\u040c\3\2\2\2\u040e\u040f\3\2\2\2")
        buf.write("\u040f\u0411\3\2\2\2\u0410\u040e\3\2\2\2\u0411\u0412\7")
        buf.write("I\2\2\u0412\u0414\7f\2\2\u0413\u03ed\3\2\2\2\u0413\u03ee")
        buf.write("\3\2\2\2\u0413\u03ef\3\2\2\2\u0413\u03f0\3\2\2\2\u0413")
        buf.write("\u03f1\3\2\2\2\u0413\u03f2\3\2\2\2\u0413\u03f3\3\2\2\2")
        buf.write("\u0413\u03f4\3\2\2\2\u0414\u0097\3\2\2\2\u0415\u0416\7")
        buf.write("x\2\2\u0416\u0417\7e\2\2\u0417\u0421\5\u0096L\2\u0418")
        buf.write("\u0419\7\27\2\2\u0419\u041a\58\35\2\u041a\u041b\7e\2\2")
        buf.write("\u041b\u041c\5\u0096L\2\u041c\u0421\3\2\2\2\u041d\u041e")
        buf.write("\7\33\2\2\u041e\u041f\7e\2\2\u041f\u0421\5\u0096L\2\u0420")
        buf.write("\u0415\3\2\2\2\u0420\u0418\3\2\2\2\u0420\u041d\3\2\2\2")
        buf.write("\u0421\u0099\3\2\2\2\u0422\u0424\7L\2\2\u0423\u0425\5")
        buf.write("\u009cO\2\u0424\u0423\3\2\2\2\u0424\u0425\3\2\2\2\u0425")
        buf.write("\u0426\3\2\2\2\u0426\u0427\7M\2\2\u0427\u009b\3\2\2\2")
        buf.write("\u0428\u042a\5\u009eP\2\u0429\u0428\3\2\2\2\u042a\u042b")
        buf.write("\3\2\2\2\u042b\u0429\3\2\2\2\u042b\u042c\3\2\2\2\u042c")
        buf.write("\u009d\3\2\2\2\u042d\u0430\5\u0096L\2\u042e\u0430\5:\36")
        buf.write("\2\u042f\u042d\3\2\2\2\u042f\u042e\3\2\2\2\u0430\u009f")
        buf.write("\3\2\2\2\u0431\u0433\5\66\34\2\u0432\u0431\3\2\2\2\u0432")
        buf.write("\u0433\3\2\2\2\u0433\u0434\3\2\2\2\u0434\u0435\7f\2\2")
        buf.write("\u0435\u00a1\3\2\2\2\u0436\u0437\7\21\2\2\u0437\u0439")
        buf.write("\5\u009aN\2\u0438\u043a\5\u00a4S\2\u0439\u0438\3\2\2\2")
        buf.write("\u043a\u043b\3\2\2\2\u043b\u0439\3\2\2\2\u043b\u043c\3")
        buf.write("\2\2\2\u043c\u0445\3\2\2\2\u043d\u043f\5\u00a6T\2\u043e")
        buf.write("\u0440\5\u00a8U\2\u043f\u043e\3\2\2\2\u043f\u0440\3\2")
        buf.write("\2\2\u0440\u0446\3\2\2\2\u0441\u0443\5\u00a8U\2\u0442")
        buf.write("\u0444\5\u00a6T\2\u0443\u0442\3\2\2\2\u0443\u0444\3\2")
        buf.write("\2\2\u0444\u0446\3\2\2\2\u0445\u043d\3\2\2\2\u0445\u0441")
        buf.write("\3\2\2\2\u0445\u0446\3\2\2\2\u0446\u00a3\3\2\2\2\u0447")
        buf.write("\u0448\7\22\2\2\u0448\u044b\7H\2\2\u0449\u044c\7x\2\2")
        buf.write("\u044a\u044c\5\u0080A\2\u044b\u0449\3\2\2\2\u044b\u044a")
        buf.write("\3\2\2\2\u044c\u044d\3\2\2\2\u044d\u0450\7I\2\2\u044e")
        buf.write("\u044f\7\24\2\2\u044f\u0451\7x\2\2\u0450\u044e\3\2\2\2")
        buf.write("\u0450\u0451\3\2\2\2\u0451\u0452\3\2\2\2\u0452\u0453\5")
        buf.write("\u009aN\2\u0453\u00a5\3\2\2\2\u0454\u0455\7\23\2\2\u0455")
        buf.write("\u0456\5\u009aN\2\u0456\u00a7\3\2\2\2\u0457\u0458\7\36")
        buf.write("\2\2\u0458\u0459\5\u009aN\2\u0459\u00a9\3\2\2\2\u045a")
        buf.write("\u045b\7&\2\2\u045b\u045c\7H\2\2\u045c\u045d\5\66\34\2")
        buf.write("\u045d\u045e\7I\2\2\u045e\u0461\5\u0096L\2\u045f\u0460")
        buf.write("\7\36\2\2\u0460\u0462\5\u0096L\2\u0461\u045f\3\2\2\2\u0461")
        buf.write("\u0462\3\2\2\2\u0462\u046a\3\2\2\2\u0463\u0464\7\66\2")
        buf.write("\2\u0464\u0465\7H\2\2\u0465\u0466\5\66\34\2\u0466\u0467")
        buf.write("\7I\2\2\u0467\u0468\5\u0096L\2\u0468\u046a\3\2\2\2\u0469")
        buf.write("\u045a\3\2\2\2\u0469\u0463\3\2\2\2\u046a\u00ab\3\2\2\2")
        buf.write("\u046b\u046c\7=\2\2\u046c\u046d\7H\2\2\u046d\u046e\5\66")
        buf.write("\34\2\u046e\u046f\7I\2\2\u046f\u0470\5\u0096L\2\u0470")
        buf.write("\u0480\3\2\2\2\u0471\u0472\7\34\2\2\u0472\u0473\5\u0096")
        buf.write("L\2\u0473\u0474\7=\2\2\u0474\u0475\7H\2\2\u0475\u0476")
        buf.write("\5\66\34\2\u0476\u0477\7I\2\2\u0477\u0478\7f\2\2\u0478")
        buf.write("\u0480\3\2\2\2\u0479\u047a\7$\2\2\u047a\u047b\7H\2\2\u047b")
        buf.write("\u047c\5\u00aeX\2\u047c\u047d\7I\2\2\u047d\u047e\5\u0096")
        buf.write("L\2\u047e\u0480\3\2\2\2\u047f\u046b\3\2\2\2\u047f\u0471")
        buf.write("\3\2\2\2\u047f\u0479\3\2\2\2\u0480\u00ad\3\2\2\2\u0481")
        buf.write("\u0486\5\u00b0Y\2\u0482\u0484\5\66\34\2\u0483\u0482\3")
        buf.write("\2\2\2\u0483\u0484\3\2\2\2\u0484\u0486\3\2\2\2\u0485\u0481")
        buf.write("\3\2\2\2\u0485\u0483\3\2\2\2\u0486\u0487\3\2\2\2\u0487")
        buf.write("\u0489\7f\2\2\u0488\u048a\5\u00b2Z\2\u0489\u0488\3\2\2")
        buf.write("\2\u0489\u048a\3\2\2\2\u048a\u048b\3\2\2\2\u048b\u048d")
        buf.write("\7f\2\2\u048c\u048e\5\u00b2Z\2\u048d\u048c\3\2\2\2\u048d")
        buf.write("\u048e\3\2\2\2\u048e\u00af\3\2\2\2\u048f\u0491\5<\37\2")
        buf.write("\u0490\u0492\5@!\2\u0491\u0490\3\2\2\2\u0491\u0492\3\2")
        buf.write("\2\2\u0492\u00b1\3\2\2\2\u0493\u0498\5\62\32\2\u0494\u0495")
        buf.write("\7g\2\2\u0495\u0497\5\62\32\2\u0496\u0494\3\2\2\2\u0497")
        buf.write("\u049a\3\2\2\2\u0498\u0496\3\2\2\2\u0498\u0499\3\2\2\2")
        buf.write("\u0499\u00b3\3\2\2\2\u049a\u0498\3\2\2\2\u049b\u049c\7")
        buf.write("%\2\2\u049c\u04a5\7x\2\2\u049d\u04a5\t\30\2\2\u049e\u04a0")
        buf.write("\7.\2\2\u049f\u04a1\5\66\34\2\u04a0\u049f\3\2\2\2\u04a0")
        buf.write("\u04a1\3\2\2\2\u04a1\u04a5\3\2\2\2\u04a2\u04a3\7%\2\2")
        buf.write("\u04a3\u04a5\5\26\f\2\u04a4\u049b\3\2\2\2\u04a4\u049d")
        buf.write("\3\2\2\2\u04a4\u049e\3\2\2\2\u04a4\u04a2\3\2\2\2\u04a5")
        buf.write("\u04a6\3\2\2\2\u04a6\u04a7\7f\2\2\u04a7\u00b5\3\2\2\2")
        buf.write("\u04a8\u04aa\5\u00b8]\2\u04a9\u04a8\3\2\2\2\u04a9\u04aa")
        buf.write("\3\2\2\2\u04aa\u04ab\3\2\2\2\u04ab\u04ac\7\2\2\3\u04ac")
        buf.write("\u00b7\3\2\2\2\u04ad\u04b0\5\u00ba^\2\u04ae\u04b0\7f\2")
        buf.write("\2\u04af\u04ad\3\2\2\2\u04af\u04ae\3\2\2\2\u04b0\u04b1")
        buf.write("\3\2\2\2\u04b1\u04af\3\2\2\2\u04b1\u04b2\3\2\2\2\u04b2")
        buf.write("\u00b9\3\2\2\2\u04b3\u04b7\5\u00bc_\2\u04b4\u04b7\5:\36")
        buf.write("\2\u04b5\u04b7\5\u00c2b\2\u04b6\u04b3\3\2\2\2\u04b6\u04b4")
        buf.write("\3\2\2\2\u04b6\u04b5\3\2\2\2\u04b7\u00bb\3\2\2\2\u04b8")
        buf.write("\u04b9\5\u00be`\2\u04b9\u04bb\5h\65\2\u04ba\u04bc\5\u00ca")
        buf.write("f\2\u04bb\u04ba\3\2\2\2\u04bb\u04bc\3\2\2\2\u04bc\u04bd")
        buf.write("\3\2\2\2\u04bd\u04be\5\u009aN\2\u04be\u04c8\3\2\2\2\u04bf")
        buf.write("\u04c0\5\u00be`\2\u04c0\u04c2\5h\65\2\u04c1\u04c3\5\u00ca")
        buf.write("f\2\u04c2\u04c1\3\2\2\2\u04c2\u04c3\3\2\2\2\u04c3\u04c4")
        buf.write("\3\2\2\2\u04c4\u04c5\5\b\5\2\u04c5\u04c6\7f\2\2\u04c6")
        buf.write("\u04c8\3\2\2\2\u04c7\u04b8\3\2\2\2\u04c7\u04bf\3\2\2\2")
        buf.write("\u04c8\u00bd\3\2\2\2\u04c9\u04cb\5\u00c0a\2\u04ca\u04c9")
        buf.write("\3\2\2\2\u04cb\u04ce\3\2\2\2\u04cc\u04ca\3\2\2\2\u04cc")
        buf.write("\u04cd\3\2\2\2\u04cd\u04d0\3\2\2\2\u04ce\u04cc\3\2\2\2")
        buf.write("\u04cf\u04d1\5<\37\2\u04d0\u04cf\3\2\2\2\u04d0\u04d1\3")
        buf.write("\2\2\2\u04d1\u00bf\3\2\2\2\u04d2\u04d3\7b\2\2\u04d3\u04d4")
        buf.write("\7x\2\2\u04d4\u00c1\3\2\2\2\u04d5\u04d6\7\37\2\2\u04d6")
        buf.write("\u04d7\7x\2\2\u04d7\u04d9\5j\66\2\u04d8\u04da\5\u00ca")
        buf.write("f\2\u04d9\u04d8\3\2\2\2\u04d9\u04da\3\2\2\2\u04da\u04db")
        buf.write("\3\2\2\2\u04db\u04dd\5\u00c4c\2\u04dc\u04de\5\u00c8e\2")
        buf.write("\u04dd\u04dc\3\2\2\2\u04dd\u04de\3\2\2\2\u04de\u00c3\3")
        buf.write("\2\2\2\u04df\u04e8\7L\2\2\u04e0\u04e5\5\u00c6d\2\u04e1")
        buf.write("\u04e2\7g\2\2\u04e2\u04e4\5\u00c6d\2\u04e3\u04e1\3\2\2")
        buf.write("\2\u04e4\u04e7\3\2\2\2\u04e5\u04e3\3\2\2\2\u04e5\u04e6")
        buf.write("\3\2\2\2\u04e6\u04e9\3\2\2\2\u04e7\u04e5\3\2\2\2\u04e8")
        buf.write("\u04e0\3\2\2\2\u04e8\u04e9\3\2\2\2\u04e9\u04ea\3\2\2\2")
        buf.write("\u04ea\u04eb\7M\2\2\u04eb\u00c5\3\2\2\2\u04ec\u04ed\7")
        buf.write("x\2\2\u04ed\u04ee\7e\2\2\u04ee\u04ef\5\2\2\2\u04ef\u00c7")
        buf.write("\3\2\2\2\u04f0\u04f1\7c\2\2\u04f1\u04f2\7y\2\2\u04f2\u00c9")
        buf.write("\3\2\2\2\u04f3\u04f5\5:\36\2\u04f4\u04f3\3\2\2\2\u04f5")
        buf.write("\u04f6\3\2\2\2\u04f6\u04f4\3\2\2\2\u04f6\u04f7\3\2\2\2")
        buf.write("\u04f7\u00cb\3\2\2\2\u009d\u00d3\u00dc\u00f0\u00f4\u00fb")
        buf.write("\u010f\u0114\u011b\u0123\u0127\u012f\u0135\u0137\u013f")
        buf.write("\u0145\u0153\u0159\u0162\u0169\u0171\u0179\u0181\u0189")
        buf.write("\u0191\u0199\u01a1\u01a9\u01b1\u01b9\u01c2\u01ca\u01d3")
        buf.write("\u01da\u01df\u01e4\u01ec\u01f3\u01f9\u0219\u0228\u022e")
        buf.write("\u0233\u0239\u0241\u0248\u024c\u0251\u0255\u0258\u025f")
        buf.write("\u0264\u0268\u026c\u0271\u0277\u027e\u0284\u0296\u029c")
        buf.write("\u02a1\u02a7\u02b5\u02bb\u02c0\u02c3\u02ca\u02d9\u02e5")
        buf.write("\u02e8\u02ea\u02f2\u02f6\u0300\u0304\u0308\u030e\u0311")
        buf.write("\u0318\u031a\u031f\u0323\u0328\u032d\u0334\u033c\u033e")
        buf.write("\u0345\u034a\u034e\u0354\u0357\u0360\u0365\u0368\u036e")
        buf.write("\u037e\u0384\u0387\u038c\u038f\u0396\u03a9\u03af\u03b2")
        buf.write("\u03b4\u03bd\u03c1\u03c4\u03c9\u03ce\u03d7\u03df\u03e8")
        buf.write("\u03fc\u03ff\u0407\u040a\u040e\u0413\u0420\u0424\u042b")
        buf.write("\u042f\u0432\u043b\u043f\u0443\u0445\u044b\u0450\u0461")
        buf.write("\u0469\u047f\u0483\u0485\u0489\u048d\u0491\u0498\u04a0")
        buf.write("\u04a4\u04a9\u04af\u04b1\u04b6\u04bb\u04c2\u04c7\u04cc")
        buf.write("\u04d0\u04d9\u04dd\u04e5\u04e8\u04f6")
        return buf.getvalue()


class ParaCParser ( Parser ):

    grammarFileName = "ParaC.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'__extension__'", "'__builtin_va_arg'", 
                     "'__builtin_offsetof'", "'__m128'", "'__m128d'", "'__m128i'", 
                     "'__typeof__'", "'__inline__'", "'__stdcall'", "'__declspec'", 
                     "'__asm'", "'__attribute__'", "'__asm__'", "'__volatile__'", 
                     "'try'", "'except'", "'finally'", "'as'", "'auto'", 
                     "'break'", "'case'", "'char'", "'const'", "'continue'", 
                     "'default'", "'do'", "'double'", "'else'", "'exttask'", 
                     "'entry'", "'enum'", "'extern'", "'float'", "'for'", 
                     "'goto'", "'if'", "'inline'", "'int'", "'lambda'", 
                     "'list'", "'long'", "'register'", "'restrict'", "'return'", 
                     "'short'", "'signed'", "'sizeof'", "'spawn'", "'static'", 
                     "'status'", "'struct'", "'switch'", "'typeof'", "'typedef'", 
                     "'union'", "'unsigned'", "'void'", "'volatile'", "'while'", 
                     "'_Alignas'", "'_Alignof'", "'_Atomic'", "'_Bool'", 
                     "'_Complex'", "'_Generic'", "'_Imaginary'", "'_Noreturn'", 
                     "'_Static_assert'", "'_Thread_local'", "'('", "')'", 
                     "'['", "']'", "'{'", "'}'", "'<'", "'<='", "'>'", "'>='", 
                     "'<<'", "'>>'", "'+'", "'++'", "'-'", "'--'", "'*'", 
                     "'/'", "'%'", "'&'", "'|'", "'&&'", "'||'", "'^'", 
                     "'!'", "'~'", "'@'", "'=>'", "'?'", "':'", "';'", "','", 
                     "'='", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", 
                     "'>>='", "'&='", "'^='", "'|='", "'=='", "'!='", "'->'", 
                     "'.'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "As", "Auto", "Break", "Case", 
                      "Char", "Const", "Continue", "Default", "Do", "Double", 
                      "Else", "ExtensionTask", "Entry", "Enum", "Extern", 
                      "Float", "For", "Goto", "If", "Inline", "Int", "Lambda", 
                      "List", "Long", "Register", "Restrict", "Return", 
                      "Short", "Signed", "Sizeof", "Spawn", "Static", "Status", 
                      "Struct", "Switch", "Typeof", "Typedef", "Union", 
                      "Unsigned", "Void", "Volatile", "While", "Alignas", 
                      "Alignof", "Atomic", "Bool", "Complex", "Generic", 
                      "Imaginary", "Noreturn", "StaticAssert", "ThreadLocal", 
                      "LeftParen", "RightParen", "LeftBracket", "RightBracket", 
                      "LeftBrace", "RightBrace", "Less", "LessEqual", "Greater", 
                      "GreaterEqual", "LeftShift", "RightShift", "Plus", 
                      "PlusPlus", "Minus", "MinusMinus", "Star", "Div", 
                      "Mod", "And", "Or", "AndAnd", "OrOr", "Caret", "Not", 
                      "Tilde", "DecoratorSign", "LambdaStartBlock", "Question", 
                      "Colon", "Semi", "Comma", "Assign", "StarAssign", 
                      "DivAssign", "ModAssign", "PlusAssign", "MinusAssign", 
                      "LeftShiftAssign", "RightShiftAssign", "AndAssign", 
                      "XorAssign", "OrAssign", "Equal", "NotEqual", "Arrow", 
                      "Dot", "Ellipsis", "Identifier", "ExtensionTaskLambda", 
                      "Constant", "DigitSequence", "StringLiteral", "AsmBlock", 
                      "Directive", "Whitespace", "Newline" ]

    RULE_primaryExpression = 0
    RULE_lambdaFunction = 1
    RULE_lambdaBody = 2
    RULE_expressionLambda = 3
    RULE_statementLambda = 4
    RULE_genericSelection = 5
    RULE_genericAssocList = 6
    RULE_genericAssociation = 7
    RULE_postfixExpression = 8
    RULE_argumentExpressionList = 9
    RULE_unaryExpression = 10
    RULE_unaryOperator = 11
    RULE_castOrConvertExpression = 12
    RULE_multiplicativeExpression = 13
    RULE_additiveExpression = 14
    RULE_shiftExpression = 15
    RULE_relationalExpression = 16
    RULE_equalityExpression = 17
    RULE_andExpression = 18
    RULE_exclusiveOrExpression = 19
    RULE_inclusiveOrExpression = 20
    RULE_logicalAndExpression = 21
    RULE_logicalOrExpression = 22
    RULE_conditionalExpression = 23
    RULE_assignmentExpression = 24
    RULE_assignmentOperator = 25
    RULE_expression = 26
    RULE_constantExpression = 27
    RULE_declaration = 28
    RULE_declarationSpecifiers = 29
    RULE_declarationSpecifier = 30
    RULE_initDeclaratorList = 31
    RULE_initDeclarator = 32
    RULE_entryPointSpecifier = 33
    RULE_storageClassSpecifier = 34
    RULE_typeSpecifier = 35
    RULE_structOrUnionSpecifier = 36
    RULE_structOrUnion = 37
    RULE_structDeclarationList = 38
    RULE_structDeclaration = 39
    RULE_specifierQualifierList = 40
    RULE_structDeclaratorList = 41
    RULE_structDeclarator = 42
    RULE_enumSpecifier = 43
    RULE_enumeratorList = 44
    RULE_enumerator = 45
    RULE_enumerationConstant = 46
    RULE_atomicTypeSpecifier = 47
    RULE_typeQualifier = 48
    RULE_functionSpecifier = 49
    RULE_alignmentSpecifier = 50
    RULE_declarator = 51
    RULE_directDeclarator = 52
    RULE_gccDeclaratorExtension = 53
    RULE_gccAttributeSpecifier = 54
    RULE_gccAttributeList = 55
    RULE_gccAttribute = 56
    RULE_nestedParenthesesBlock = 57
    RULE_pointer = 58
    RULE_typeQualifierList = 59
    RULE_parameterTypeList = 60
    RULE_parameterList = 61
    RULE_parameterDeclaration = 62
    RULE_identifierList = 63
    RULE_typeName = 64
    RULE_abstractDeclarator = 65
    RULE_directAbstractDeclarator = 66
    RULE_typedefName = 67
    RULE_initializer = 68
    RULE_initializerList = 69
    RULE_designation = 70
    RULE_designatorList = 71
    RULE_designator = 72
    RULE_staticAssertDeclaration = 73
    RULE_statement = 74
    RULE_labeledStatement = 75
    RULE_compoundStatement = 76
    RULE_blockItemList = 77
    RULE_blockItem = 78
    RULE_expressionStatement = 79
    RULE_tryExceptStatement = 80
    RULE_exceptBlock = 81
    RULE_finallyBlock = 82
    RULE_elseBlock = 83
    RULE_selectionStatement = 84
    RULE_iterationStatement = 85
    RULE_forCondition = 86
    RULE_forDeclaration = 87
    RULE_forExpression = 88
    RULE_jumpStatement = 89
    RULE_compilationUnit = 90
    RULE_translationUnit = 91
    RULE_externalItem = 92
    RULE_functionDefinition = 93
    RULE_functionDeclarationSpecifiers = 94
    RULE_decoratorSpecifier = 95
    RULE_extensionTaskDefinition = 96
    RULE_extensionTaskParameterList = 97
    RULE_extensionTaskParameter = 98
    RULE_extensionTaskLambda = 99
    RULE_declarationList = 100

    ruleNames =  [ "primaryExpression", "lambdaFunction", "lambdaBody", 
                   "expressionLambda", "statementLambda", "genericSelection", 
                   "genericAssocList", "genericAssociation", "postfixExpression", 
                   "argumentExpressionList", "unaryExpression", "unaryOperator", 
                   "castOrConvertExpression", "multiplicativeExpression", 
                   "additiveExpression", "shiftExpression", "relationalExpression", 
                   "equalityExpression", "andExpression", "exclusiveOrExpression", 
                   "inclusiveOrExpression", "logicalAndExpression", "logicalOrExpression", 
                   "conditionalExpression", "assignmentExpression", "assignmentOperator", 
                   "expression", "constantExpression", "declaration", "declarationSpecifiers", 
                   "declarationSpecifier", "initDeclaratorList", "initDeclarator", 
                   "entryPointSpecifier", "storageClassSpecifier", "typeSpecifier", 
                   "structOrUnionSpecifier", "structOrUnion", "structDeclarationList", 
                   "structDeclaration", "specifierQualifierList", "structDeclaratorList", 
                   "structDeclarator", "enumSpecifier", "enumeratorList", 
                   "enumerator", "enumerationConstant", "atomicTypeSpecifier", 
                   "typeQualifier", "functionSpecifier", "alignmentSpecifier", 
                   "declarator", "directDeclarator", "gccDeclaratorExtension", 
                   "gccAttributeSpecifier", "gccAttributeList", "gccAttribute", 
                   "nestedParenthesesBlock", "pointer", "typeQualifierList", 
                   "parameterTypeList", "parameterList", "parameterDeclaration", 
                   "identifierList", "typeName", "abstractDeclarator", "directAbstractDeclarator", 
                   "typedefName", "initializer", "initializerList", "designation", 
                   "designatorList", "designator", "staticAssertDeclaration", 
                   "statement", "labeledStatement", "compoundStatement", 
                   "blockItemList", "blockItem", "expressionStatement", 
                   "tryExceptStatement", "exceptBlock", "finallyBlock", 
                   "elseBlock", "selectionStatement", "iterationStatement", 
                   "forCondition", "forDeclaration", "forExpression", "jumpStatement", 
                   "compilationUnit", "translationUnit", "externalItem", 
                   "functionDefinition", "functionDeclarationSpecifiers", 
                   "decoratorSpecifier", "extensionTaskDefinition", "extensionTaskParameterList", 
                   "extensionTaskParameter", "extensionTaskLambda", "declarationList" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    As=18
    Auto=19
    Break=20
    Case=21
    Char=22
    Const=23
    Continue=24
    Default=25
    Do=26
    Double=27
    Else=28
    ExtensionTask=29
    Entry=30
    Enum=31
    Extern=32
    Float=33
    For=34
    Goto=35
    If=36
    Inline=37
    Int=38
    Lambda=39
    List=40
    Long=41
    Register=42
    Restrict=43
    Return=44
    Short=45
    Signed=46
    Sizeof=47
    Spawn=48
    Static=49
    Status=50
    Struct=51
    Switch=52
    Typeof=53
    Typedef=54
    Union=55
    Unsigned=56
    Void=57
    Volatile=58
    While=59
    Alignas=60
    Alignof=61
    Atomic=62
    Bool=63
    Complex=64
    Generic=65
    Imaginary=66
    Noreturn=67
    StaticAssert=68
    ThreadLocal=69
    LeftParen=70
    RightParen=71
    LeftBracket=72
    RightBracket=73
    LeftBrace=74
    RightBrace=75
    Less=76
    LessEqual=77
    Greater=78
    GreaterEqual=79
    LeftShift=80
    RightShift=81
    Plus=82
    PlusPlus=83
    Minus=84
    MinusMinus=85
    Star=86
    Div=87
    Mod=88
    And=89
    Or=90
    AndAnd=91
    OrOr=92
    Caret=93
    Not=94
    Tilde=95
    DecoratorSign=96
    LambdaStartBlock=97
    Question=98
    Colon=99
    Semi=100
    Comma=101
    Assign=102
    StarAssign=103
    DivAssign=104
    ModAssign=105
    PlusAssign=106
    MinusAssign=107
    LeftShiftAssign=108
    RightShiftAssign=109
    AndAssign=110
    XorAssign=111
    OrAssign=112
    Equal=113
    NotEqual=114
    Arrow=115
    Dot=116
    Ellipsis=117
    Identifier=118
    ExtensionTaskLambda=119
    Constant=120
    DigitSequence=121
    StringLiteral=122
    AsmBlock=123
    Directive=124
    Whitespace=125
    Newline=126

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Spawn(self):
            return self.getToken(ParaCParser.Spawn, 0)

        def Constant(self):
            return self.getToken(ParaCParser.Constant, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.StringLiteral)
            else:
                return self.getToken(ParaCParser.StringLiteral, i)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def genericSelection(self):
            return self.getTypedRuleContext(ParaCParser.GenericSelectionContext,0)


        def lambdaFunction(self):
            return self.getTypedRuleContext(ParaCParser.LambdaFunctionContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.UnaryExpressionContext,0)


        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = ParaCParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_primaryExpression)
        self._la = 0 # Token type
        try:
            self.state = 238
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 202
                self.match(ParaCParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 203
                self.match(ParaCParser.Spawn)
                self.state = 204
                self.match(ParaCParser.Identifier)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 205
                self.match(ParaCParser.Constant)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 207 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 206
                        self.match(ParaCParser.StringLiteral)

                    else:
                        raise NoViableAltException(self)
                    self.state = 209 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 211
                self.match(ParaCParser.LeftParen)
                self.state = 212
                self.expression()
                self.state = 213
                self.match(ParaCParser.RightParen)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 215
                self.genericSelection()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 216
                self.lambdaFunction()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.T__0:
                    self.state = 217
                    self.match(ParaCParser.T__0)


                self.state = 220
                self.match(ParaCParser.LeftParen)
                self.state = 221
                self.compoundStatement()
                self.state = 222
                self.match(ParaCParser.RightParen)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 224
                self.match(ParaCParser.T__1)
                self.state = 225
                self.match(ParaCParser.LeftParen)
                self.state = 226
                self.unaryExpression()
                self.state = 227
                self.match(ParaCParser.Comma)
                self.state = 228
                self.typeName()
                self.state = 229
                self.match(ParaCParser.RightParen)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 231
                self.match(ParaCParser.T__2)
                self.state = 232
                self.match(ParaCParser.LeftParen)
                self.state = 233
                self.typeName()
                self.state = 234
                self.match(ParaCParser.Comma)
                self.state = 235
                self.unaryExpression()
                self.state = 236
                self.match(ParaCParser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def lambdaBody(self):
            return self.getTypedRuleContext(ParaCParser.LambdaBodyContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(ParaCParser.ParameterListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_lambdaFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaFunction" ):
                listener.enterLambdaFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaFunction" ):
                listener.exitLambdaFunction(self)




    def lambdaFunction(self):

        localctx = ParaCParser.LambdaFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_lambdaFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            self.match(ParaCParser.LeftParen)
            self.state = 242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.List) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Complex - 64)) | (1 << (ParaCParser.Noreturn - 64)) | (1 << (ParaCParser.ThreadLocal - 64)) | (1 << (ParaCParser.Identifier - 64)))) != 0):
                self.state = 241
                self.parameterList()


            self.state = 244
            self.match(ParaCParser.RightParen)
            self.state = 245
            self.lambdaBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionLambda(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionLambdaContext,0)


        def statementLambda(self):
            return self.getTypedRuleContext(ParaCParser.StatementLambdaContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_lambdaBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaBody" ):
                listener.enterLambdaBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaBody" ):
                listener.exitLambdaBody(self)




    def lambdaBody(self):

        localctx = ParaCParser.LambdaBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_lambdaBody)
        try:
            self.state = 249
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 247
                self.expressionLambda()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 248
                self.statementLambda()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionLambdaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LambdaStartBlock(self):
            return self.getToken(ParaCParser.LambdaStartBlock, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_expressionLambda

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionLambda" ):
                listener.enterExpressionLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionLambda" ):
                listener.exitExpressionLambda(self)




    def expressionLambda(self):

        localctx = ParaCParser.ExpressionLambdaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_expressionLambda)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 251
            self.match(ParaCParser.LambdaStartBlock)
            self.state = 252
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementLambdaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LambdaStartBlock(self):
            return self.getToken(ParaCParser.LambdaStartBlock, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_statementLambda

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementLambda" ):
                listener.enterStatementLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementLambda" ):
                listener.exitStatementLambda(self)




    def statementLambda(self):

        localctx = ParaCParser.StatementLambdaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_statementLambda)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 254
            self.match(ParaCParser.LambdaStartBlock)
            self.state = 255
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericSelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Generic(self):
            return self.getToken(ParaCParser.Generic, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def genericAssocList(self):
            return self.getTypedRuleContext(ParaCParser.GenericAssocListContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_genericSelection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericSelection" ):
                listener.enterGenericSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericSelection" ):
                listener.exitGenericSelection(self)




    def genericSelection(self):

        localctx = ParaCParser.GenericSelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_genericSelection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 257
            self.match(ParaCParser.Generic)
            self.state = 258
            self.match(ParaCParser.LeftParen)
            self.state = 259
            self.assignmentExpression()
            self.state = 260
            self.match(ParaCParser.Comma)
            self.state = 261
            self.genericAssocList()
            self.state = 262
            self.match(ParaCParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericAssocListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericAssociation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.GenericAssociationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.GenericAssociationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_genericAssocList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericAssocList" ):
                listener.enterGenericAssocList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericAssocList" ):
                listener.exitGenericAssocList(self)




    def genericAssocList(self):

        localctx = ParaCParser.GenericAssocListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_genericAssocList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 264
            self.genericAssociation()
            self.state = 269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 265
                self.match(ParaCParser.Comma)
                self.state = 266
                self.genericAssociation()
                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericAssociationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def Default(self):
            return self.getToken(ParaCParser.Default, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_genericAssociation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericAssociation" ):
                listener.enterGenericAssociation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericAssociation" ):
                listener.exitGenericAssociation(self)




    def genericAssociation(self):

        localctx = ParaCParser.GenericAssociationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_genericAssociation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 274
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__0, ParaCParser.T__3, ParaCParser.T__4, ParaCParser.T__5, ParaCParser.T__6, ParaCParser.Char, ParaCParser.Const, ParaCParser.Double, ParaCParser.Enum, ParaCParser.Float, ParaCParser.Int, ParaCParser.Lambda, ParaCParser.List, ParaCParser.Long, ParaCParser.Restrict, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Status, ParaCParser.Struct, ParaCParser.Typeof, ParaCParser.Union, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Volatile, ParaCParser.Atomic, ParaCParser.Bool, ParaCParser.Complex, ParaCParser.Identifier]:
                self.state = 272
                self.typeName()
                pass
            elif token in [ParaCParser.Default]:
                self.state = 273
                self.match(ParaCParser.Default)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 276
            self.match(ParaCParser.Colon)
            self.state = 277
            self.assignmentExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.PrimaryExpressionContext,0)


        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftParen)
            else:
                return self.getToken(ParaCParser.LeftParen, i)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightParen)
            else:
                return self.getToken(ParaCParser.RightParen, i)

        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def initializerList(self):
            return self.getTypedRuleContext(ParaCParser.InitializerListContext,0)


        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def LeftBracket(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftBracket)
            else:
                return self.getToken(ParaCParser.LeftBracket, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ExpressionContext,i)


        def RightBracket(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightBracket)
            else:
                return self.getToken(ParaCParser.RightBracket, i)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Identifier)
            else:
                return self.getToken(ParaCParser.Identifier, i)

        def Dot(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Dot)
            else:
                return self.getToken(ParaCParser.Dot, i)

        def Arrow(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Arrow)
            else:
                return self.getToken(ParaCParser.Arrow, i)

        def PlusPlus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.PlusPlus)
            else:
                return self.getToken(ParaCParser.PlusPlus, i)

        def MinusMinus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.MinusMinus)
            else:
                return self.getToken(ParaCParser.MinusMinus, i)

        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def argumentExpressionList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ArgumentExpressionListContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ArgumentExpressionListContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)




    def postfixExpression(self):

        localctx = ParaCParser.PostfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_postfixExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 279
                self.primaryExpression()
                pass

            elif la_ == 2:
                self.state = 281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.T__0:
                    self.state = 280
                    self.match(ParaCParser.T__0)


                self.state = 283
                self.match(ParaCParser.LeftParen)
                self.state = 284
                self.typeName()
                self.state = 285
                self.match(ParaCParser.RightParen)
                self.state = 286
                self.match(ParaCParser.LeftBrace)
                self.state = 287
                self.initializerList()
                self.state = 289
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Comma:
                    self.state = 288
                    self.match(ParaCParser.Comma)


                self.state = 291
                self.match(ParaCParser.RightBrace)
                pass


            self.state = 309
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 307
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ParaCParser.LeftBracket]:
                        self.state = 295
                        self.match(ParaCParser.LeftBracket)
                        self.state = 296
                        self.expression()
                        self.state = 297
                        self.match(ParaCParser.RightBracket)
                        pass
                    elif token in [ParaCParser.LeftParen]:
                        self.state = 299
                        self.match(ParaCParser.LeftParen)
                        self.state = 301
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ParaCParser.Generic - 65)) | (1 << (ParaCParser.LeftParen - 65)) | (1 << (ParaCParser.Plus - 65)) | (1 << (ParaCParser.PlusPlus - 65)) | (1 << (ParaCParser.Minus - 65)) | (1 << (ParaCParser.MinusMinus - 65)) | (1 << (ParaCParser.Star - 65)) | (1 << (ParaCParser.And - 65)) | (1 << (ParaCParser.AndAnd - 65)) | (1 << (ParaCParser.Not - 65)) | (1 << (ParaCParser.Tilde - 65)) | (1 << (ParaCParser.Identifier - 65)) | (1 << (ParaCParser.Constant - 65)) | (1 << (ParaCParser.DigitSequence - 65)) | (1 << (ParaCParser.StringLiteral - 65)))) != 0):
                            self.state = 300
                            self.argumentExpressionList()


                        self.state = 303
                        self.match(ParaCParser.RightParen)
                        pass
                    elif token in [ParaCParser.Arrow, ParaCParser.Dot]:
                        self.state = 304
                        _la = self._input.LA(1)
                        if not(_la==ParaCParser.Arrow or _la==ParaCParser.Dot):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 305
                        self.match(ParaCParser.Identifier)
                        pass
                    elif token in [ParaCParser.PlusPlus, ParaCParser.MinusMinus]:
                        self.state = 306
                        _la = self._input.LA(1)
                        if not(_la==ParaCParser.PlusPlus or _la==ParaCParser.MinusMinus):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 311
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_argumentExpressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentExpressionList" ):
                listener.enterArgumentExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentExpressionList" ):
                listener.exitArgumentExpressionList(self)




    def argumentExpressionList(self):

        localctx = ParaCParser.ArgumentExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_argumentExpressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            self.assignmentExpression()
            self.state = 317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 313
                self.match(ParaCParser.Comma)
                self.state = 314
                self.assignmentExpression()
                self.state = 319
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(ParaCParser.PostfixExpressionContext,0)


        def unaryOperator(self):
            return self.getTypedRuleContext(ParaCParser.UnaryOperatorContext,0)


        def castOrConvertExpression(self):
            return self.getTypedRuleContext(ParaCParser.CastOrConvertExpressionContext,0)


        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def AndAnd(self):
            return self.getToken(ParaCParser.AndAnd, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Sizeof(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Sizeof)
            else:
                return self.getToken(ParaCParser.Sizeof, i)

        def Alignof(self):
            return self.getToken(ParaCParser.Alignof, 0)

        def PlusPlus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.PlusPlus)
            else:
                return self.getToken(ParaCParser.PlusPlus, i)

        def MinusMinus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.MinusMinus)
            else:
                return self.getToken(ParaCParser.MinusMinus, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)




    def unaryExpression(self):

        localctx = ParaCParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_unaryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 323
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 320
                    _la = self._input.LA(1)
                    if not(((((_la - 47)) & ~0x3f) == 0 and ((1 << (_la - 47)) & ((1 << (ParaCParser.Sizeof - 47)) | (1 << (ParaCParser.PlusPlus - 47)) | (1 << (ParaCParser.MinusMinus - 47)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 325
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

            self.state = 337
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__0, ParaCParser.T__1, ParaCParser.T__2, ParaCParser.Spawn, ParaCParser.Generic, ParaCParser.LeftParen, ParaCParser.Identifier, ParaCParser.Constant, ParaCParser.StringLiteral]:
                self.state = 326
                self.postfixExpression()
                pass
            elif token in [ParaCParser.Plus, ParaCParser.Minus, ParaCParser.Star, ParaCParser.And, ParaCParser.Not, ParaCParser.Tilde]:
                self.state = 327
                self.unaryOperator()
                self.state = 328
                self.castOrConvertExpression(0)
                pass
            elif token in [ParaCParser.Sizeof, ParaCParser.Alignof]:
                self.state = 330
                _la = self._input.LA(1)
                if not(_la==ParaCParser.Sizeof or _la==ParaCParser.Alignof):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 331
                self.match(ParaCParser.LeftParen)
                self.state = 332
                self.typeName()
                self.state = 333
                self.match(ParaCParser.RightParen)
                pass
            elif token in [ParaCParser.AndAnd]:
                self.state = 335
                self.match(ParaCParser.AndAnd)
                self.state = 336
                self.match(ParaCParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def And(self):
            return self.getToken(ParaCParser.And, 0)

        def Star(self):
            return self.getToken(ParaCParser.Star, 0)

        def Plus(self):
            return self.getToken(ParaCParser.Plus, 0)

        def Minus(self):
            return self.getToken(ParaCParser.Minus, 0)

        def Tilde(self):
            return self.getToken(ParaCParser.Tilde, 0)

        def Not(self):
            return self.getToken(ParaCParser.Not, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)




    def unaryOperator(self):

        localctx = ParaCParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            _la = self._input.LA(1)
            if not(((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (ParaCParser.Plus - 82)) | (1 << (ParaCParser.Minus - 82)) | (1 << (ParaCParser.Star - 82)) | (1 << (ParaCParser.And - 82)) | (1 << (ParaCParser.Not - 82)) | (1 << (ParaCParser.Tilde - 82)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastOrConvertExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def castOrConvertExpression(self):
            return self.getTypedRuleContext(ParaCParser.CastOrConvertExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.UnaryExpressionContext,0)


        def DigitSequence(self):
            return self.getToken(ParaCParser.DigitSequence, 0)

        def As(self):
            return self.getToken(ParaCParser.As, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_castOrConvertExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastOrConvertExpression" ):
                listener.enterCastOrConvertExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastOrConvertExpression" ):
                listener.exitCastOrConvertExpression(self)



    def castOrConvertExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ParaCParser.CastOrConvertExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 24
        self.enterRecursionRule(localctx, 24, self.RULE_castOrConvertExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.T__0:
                    self.state = 342
                    self.match(ParaCParser.T__0)


                self.state = 345
                self.match(ParaCParser.LeftParen)
                self.state = 346
                self.typeName()
                self.state = 347
                self.match(ParaCParser.RightParen)
                self.state = 348
                self.castOrConvertExpression(4)
                pass

            elif la_ == 2:
                self.state = 350
                self.unaryExpression()
                pass

            elif la_ == 3:
                self.state = 351
                self.match(ParaCParser.DigitSequence)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 359
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ParaCParser.CastOrConvertExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_castOrConvertExpression)
                    self.state = 354
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 355
                    self.match(ParaCParser.As)
                    self.state = 356
                    self.typeName() 
                self.state = 361
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castOrConvertExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.CastOrConvertExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.CastOrConvertExpressionContext,i)


        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Star)
            else:
                return self.getToken(ParaCParser.Star, i)

        def Div(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Div)
            else:
                return self.getToken(ParaCParser.Div, i)

        def Mod(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Mod)
            else:
                return self.getToken(ParaCParser.Mod, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)




    def multiplicativeExpression(self):

        localctx = ParaCParser.MultiplicativeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_multiplicativeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self.castOrConvertExpression(0)
            self.state = 367
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 363
                    _la = self._input.LA(1)
                    if not(((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & ((1 << (ParaCParser.Star - 86)) | (1 << (ParaCParser.Div - 86)) | (1 << (ParaCParser.Mod - 86)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 364
                    self.castOrConvertExpression(0) 
                self.state = 369
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.MultiplicativeExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.MultiplicativeExpressionContext,i)


        def Plus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Plus)
            else:
                return self.getToken(ParaCParser.Plus, i)

        def Minus(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Minus)
            else:
                return self.getToken(ParaCParser.Minus, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)




    def additiveExpression(self):

        localctx = ParaCParser.AdditiveExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_additiveExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 370
            self.multiplicativeExpression()
            self.state = 375
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 371
                    _la = self._input.LA(1)
                    if not(_la==ParaCParser.Plus or _la==ParaCParser.Minus):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 372
                    self.multiplicativeExpression() 
                self.state = 377
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShiftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AdditiveExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AdditiveExpressionContext,i)


        def LeftShift(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftShift)
            else:
                return self.getToken(ParaCParser.LeftShift, i)

        def RightShift(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightShift)
            else:
                return self.getToken(ParaCParser.RightShift, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_shiftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftExpression" ):
                listener.enterShiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftExpression" ):
                listener.exitShiftExpression(self)




    def shiftExpression(self):

        localctx = ParaCParser.ShiftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_shiftExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self.additiveExpression()
            self.state = 383
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 379
                    _la = self._input.LA(1)
                    if not(_la==ParaCParser.LeftShift or _la==ParaCParser.RightShift):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 380
                    self.additiveExpression() 
                self.state = 385
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ShiftExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ShiftExpressionContext,i)


        def Less(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Less)
            else:
                return self.getToken(ParaCParser.Less, i)

        def Greater(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Greater)
            else:
                return self.getToken(ParaCParser.Greater, i)

        def LessEqual(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LessEqual)
            else:
                return self.getToken(ParaCParser.LessEqual, i)

        def GreaterEqual(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.GreaterEqual)
            else:
                return self.getToken(ParaCParser.GreaterEqual, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_relationalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)




    def relationalExpression(self):

        localctx = ParaCParser.RelationalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_relationalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 386
            self.shiftExpression()
            self.state = 391
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 387
                    _la = self._input.LA(1)
                    if not(((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (ParaCParser.Less - 76)) | (1 << (ParaCParser.LessEqual - 76)) | (1 << (ParaCParser.Greater - 76)) | (1 << (ParaCParser.GreaterEqual - 76)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 388
                    self.shiftExpression() 
                self.state = 393
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.RelationalExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.RelationalExpressionContext,i)


        def Equal(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Equal)
            else:
                return self.getToken(ParaCParser.Equal, i)

        def NotEqual(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.NotEqual)
            else:
                return self.getToken(ParaCParser.NotEqual, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_equalityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)




    def equalityExpression(self):

        localctx = ParaCParser.EqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_equalityExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394
            self.relationalExpression()
            self.state = 399
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 395
                    _la = self._input.LA(1)
                    if not(_la==ParaCParser.Equal or _la==ParaCParser.NotEqual):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 396
                    self.relationalExpression() 
                self.state = 401
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.EqualityExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.EqualityExpressionContext,i)


        def And(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.And)
            else:
                return self.getToken(ParaCParser.And, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_andExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpression" ):
                listener.enterAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpression" ):
                listener.exitAndExpression(self)




    def andExpression(self):

        localctx = ParaCParser.AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_andExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            self.equalityExpression()
            self.state = 407
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 403
                    self.match(ParaCParser.And)
                    self.state = 404
                    self.equalityExpression() 
                self.state = 409
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExclusiveOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AndExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AndExpressionContext,i)


        def Caret(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Caret)
            else:
                return self.getToken(ParaCParser.Caret, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_exclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusiveOrExpression" ):
                listener.enterExclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusiveOrExpression" ):
                listener.exitExclusiveOrExpression(self)




    def exclusiveOrExpression(self):

        localctx = ParaCParser.ExclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_exclusiveOrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self.andExpression()
            self.state = 415
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 411
                    self.match(ParaCParser.Caret)
                    self.state = 412
                    self.andExpression() 
                self.state = 417
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InclusiveOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ExclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ExclusiveOrExpressionContext,i)


        def Or(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Or)
            else:
                return self.getToken(ParaCParser.Or, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_inclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusiveOrExpression" ):
                listener.enterInclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusiveOrExpression" ):
                listener.exitInclusiveOrExpression(self)




    def inclusiveOrExpression(self):

        localctx = ParaCParser.InclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_inclusiveOrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.exclusiveOrExpression()
            self.state = 423
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 419
                    self.match(ParaCParser.Or)
                    self.state = 420
                    self.exclusiveOrExpression() 
                self.state = 425
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.InclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.InclusiveOrExpressionContext,i)


        def AndAnd(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.AndAnd)
            else:
                return self.getToken(ParaCParser.AndAnd, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_logicalAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)




    def logicalAndExpression(self):

        localctx = ParaCParser.LogicalAndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_logicalAndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            self.inclusiveOrExpression()
            self.state = 431
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 427
                    self.match(ParaCParser.AndAnd)
                    self.state = 428
                    self.inclusiveOrExpression() 
                self.state = 433
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalAndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.LogicalAndExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.LogicalAndExpressionContext,i)


        def OrOr(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.OrOr)
            else:
                return self.getToken(ParaCParser.OrOr, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_logicalOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpression" ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpression" ):
                listener.exitLogicalOrExpression(self)




    def logicalOrExpression(self):

        localctx = ParaCParser.LogicalOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_logicalOrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 434
            self.logicalAndExpression()
            self.state = 439
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 435
                    self.match(ParaCParser.OrOr)
                    self.state = 436
                    self.logicalAndExpression() 
                self.state = 441
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalOrExpression(self):
            return self.getTypedRuleContext(ParaCParser.LogicalOrExpressionContext,0)


        def Question(self):
            return self.getToken(ParaCParser.Question, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def conditionalExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_conditionalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExpression" ):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExpression" ):
                listener.exitConditionalExpression(self)




    def conditionalExpression(self):

        localctx = ParaCParser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_conditionalExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442
            self.logicalOrExpression()
            self.state = 448
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 443
                self.match(ParaCParser.Question)
                self.state = 444
                self.expression()
                self.state = 445
                self.match(ParaCParser.Colon)
                self.state = 446
                self.conditionalExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConditionalExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.UnaryExpressionContext,0)


        def assignmentOperator(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentOperatorContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def DigitSequence(self):
            return self.getToken(ParaCParser.DigitSequence, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_assignmentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpression" ):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpression" ):
                listener.exitAssignmentExpression(self)




    def assignmentExpression(self):

        localctx = ParaCParser.AssignmentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_assignmentExpression)
        try:
            self.state = 456
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 450
                self.conditionalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 451
                self.unaryExpression()
                self.state = 452
                self.assignmentOperator()
                self.state = 453
                self.assignmentExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 455
                self.match(ParaCParser.DigitSequence)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(ParaCParser.Assign, 0)

        def StarAssign(self):
            return self.getToken(ParaCParser.StarAssign, 0)

        def DivAssign(self):
            return self.getToken(ParaCParser.DivAssign, 0)

        def ModAssign(self):
            return self.getToken(ParaCParser.ModAssign, 0)

        def PlusAssign(self):
            return self.getToken(ParaCParser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(ParaCParser.MinusAssign, 0)

        def LeftShiftAssign(self):
            return self.getToken(ParaCParser.LeftShiftAssign, 0)

        def RightShiftAssign(self):
            return self.getToken(ParaCParser.RightShiftAssign, 0)

        def AndAssign(self):
            return self.getToken(ParaCParser.AndAssign, 0)

        def XorAssign(self):
            return self.getToken(ParaCParser.XorAssign, 0)

        def OrAssign(self):
            return self.getToken(ParaCParser.OrAssign, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)




    def assignmentOperator(self):

        localctx = ParaCParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            _la = self._input.LA(1)
            if not(((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & ((1 << (ParaCParser.Assign - 102)) | (1 << (ParaCParser.StarAssign - 102)) | (1 << (ParaCParser.DivAssign - 102)) | (1 << (ParaCParser.ModAssign - 102)) | (1 << (ParaCParser.PlusAssign - 102)) | (1 << (ParaCParser.MinusAssign - 102)) | (1 << (ParaCParser.LeftShiftAssign - 102)) | (1 << (ParaCParser.RightShiftAssign - 102)) | (1 << (ParaCParser.AndAssign - 102)) | (1 << (ParaCParser.XorAssign - 102)) | (1 << (ParaCParser.OrAssign - 102)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = ParaCParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 460
            self.assignmentExpression()
            self.state = 465
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 461
                    self.match(ParaCParser.Comma)
                    self.state = 462
                    self.assignmentExpression() 
                self.state = 467
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_constantExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpression" ):
                listener.enterConstantExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpression" ):
                listener.exitConstantExpression(self)




    def constantExpression(self):

        localctx = ParaCParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_constantExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            self.conditionalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiersContext,0)


        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)

        def initDeclaratorList(self):
            return self.getTypedRuleContext(ParaCParser.InitDeclaratorListContext,0)


        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(ParaCParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = ParaCParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.state = 477
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__0, ParaCParser.T__3, ParaCParser.T__4, ParaCParser.T__5, ParaCParser.T__6, ParaCParser.T__7, ParaCParser.T__8, ParaCParser.T__9, ParaCParser.T__11, ParaCParser.Auto, ParaCParser.Char, ParaCParser.Const, ParaCParser.Double, ParaCParser.Entry, ParaCParser.Enum, ParaCParser.Extern, ParaCParser.Float, ParaCParser.Inline, ParaCParser.Int, ParaCParser.Lambda, ParaCParser.List, ParaCParser.Long, ParaCParser.Register, ParaCParser.Restrict, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Static, ParaCParser.Status, ParaCParser.Struct, ParaCParser.Typeof, ParaCParser.Typedef, ParaCParser.Union, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Volatile, ParaCParser.Alignas, ParaCParser.Atomic, ParaCParser.Bool, ParaCParser.Complex, ParaCParser.Noreturn, ParaCParser.ThreadLocal, ParaCParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 470
                self.declarationSpecifiers()
                self.state = 472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (ParaCParser.LeftParen - 70)) | (1 << (ParaCParser.Star - 70)) | (1 << (ParaCParser.Caret - 70)) | (1 << (ParaCParser.Identifier - 70)))) != 0):
                    self.state = 471
                    self.initDeclaratorList()


                self.state = 474
                self.match(ParaCParser.Semi)
                pass
            elif token in [ParaCParser.StaticAssert]:
                self.enterOuterAlt(localctx, 2)
                self.state = 476
                self.staticAssertDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DeclarationSpecifierContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_declarationSpecifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifiers" ):
                listener.enterDeclarationSpecifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifiers" ):
                listener.exitDeclarationSpecifiers(self)




    def declarationSpecifiers(self):

        localctx = ParaCParser.DeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_declarationSpecifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 479
                    self.declarationSpecifier()

                else:
                    raise NoViableAltException(self)
                self.state = 482 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storageClassSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.StorageClassSpecifierContext,0)


        def entryPointSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.EntryPointSpecifierContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeQualifierContext,0)


        def functionSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.FunctionSpecifierContext,0)


        def alignmentSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.AlignmentSpecifierContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_declarationSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifier" ):
                listener.enterDeclarationSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifier" ):
                listener.exitDeclarationSpecifier(self)




    def declarationSpecifier(self):

        localctx = ParaCParser.DeclarationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_declarationSpecifier)
        try:
            self.state = 490
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 484
                self.storageClassSpecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 485
                self.entryPointSpecifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 486
                self.typeSpecifier(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 487
                self.typeQualifier()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 488
                self.functionSpecifier()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 489
                self.alignmentSpecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.InitDeclaratorContext)
            else:
                return self.getTypedRuleContext(ParaCParser.InitDeclaratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_initDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclaratorList" ):
                listener.enterInitDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclaratorList" ):
                listener.exitInitDeclaratorList(self)




    def initDeclaratorList(self):

        localctx = ParaCParser.InitDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_initDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 492
            self.initDeclarator()
            self.state = 497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 493
                self.match(ParaCParser.Comma)
                self.state = 494
                self.initDeclarator()
                self.state = 499
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)


        def Assign(self):
            return self.getToken(ParaCParser.Assign, 0)

        def initializer(self):
            return self.getTypedRuleContext(ParaCParser.InitializerContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_initDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclarator" ):
                listener.enterInitDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclarator" ):
                listener.exitInitDeclarator(self)




    def initDeclarator(self):

        localctx = ParaCParser.InitDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_initDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 500
            self.declarator()
            self.state = 503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Assign:
                self.state = 501
                self.match(ParaCParser.Assign)
                self.state = 502
                self.initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntryPointSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Entry(self):
            return self.getToken(ParaCParser.Entry, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_entryPointSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntryPointSpecifier" ):
                listener.enterEntryPointSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntryPointSpecifier" ):
                listener.exitEntryPointSpecifier(self)




    def entryPointSpecifier(self):

        localctx = ParaCParser.EntryPointSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_entryPointSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            self.match(ParaCParser.Entry)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageClassSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typedef(self):
            return self.getToken(ParaCParser.Typedef, 0)

        def Extern(self):
            return self.getToken(ParaCParser.Extern, 0)

        def Static(self):
            return self.getToken(ParaCParser.Static, 0)

        def ThreadLocal(self):
            return self.getToken(ParaCParser.ThreadLocal, 0)

        def Auto(self):
            return self.getToken(ParaCParser.Auto, 0)

        def Register(self):
            return self.getToken(ParaCParser.Register, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_storageClassSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageClassSpecifier" ):
                listener.enterStorageClassSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageClassSpecifier" ):
                listener.exitStorageClassSpecifier(self)




    def storageClassSpecifier(self):

        localctx = ParaCParser.StorageClassSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_storageClassSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            _la = self._input.LA(1)
            if not(((((_la - 19)) & ~0x3f) == 0 and ((1 << (_la - 19)) & ((1 << (ParaCParser.Auto - 19)) | (1 << (ParaCParser.Extern - 19)) | (1 << (ParaCParser.Register - 19)) | (1 << (ParaCParser.Static - 19)) | (1 << (ParaCParser.Typedef - 19)) | (1 << (ParaCParser.ThreadLocal - 19)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Void(self):
            return self.getToken(ParaCParser.Void, 0)

        def Char(self):
            return self.getToken(ParaCParser.Char, 0)

        def Short(self):
            return self.getToken(ParaCParser.Short, 0)

        def Int(self):
            return self.getToken(ParaCParser.Int, 0)

        def Status(self):
            return self.getToken(ParaCParser.Status, 0)

        def Long(self):
            return self.getToken(ParaCParser.Long, 0)

        def Float(self):
            return self.getToken(ParaCParser.Float, 0)

        def Double(self):
            return self.getToken(ParaCParser.Double, 0)

        def Signed(self):
            return self.getToken(ParaCParser.Signed, 0)

        def List(self):
            return self.getToken(ParaCParser.List, 0)

        def Less(self):
            return self.getToken(ParaCParser.Less, 0)

        def typeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeSpecifierContext,0)


        def Greater(self):
            return self.getToken(ParaCParser.Greater, 0)

        def Lambda(self):
            return self.getToken(ParaCParser.Lambda, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(ParaCParser.ParameterTypeListContext,0)


        def Unsigned(self):
            return self.getToken(ParaCParser.Unsigned, 0)

        def Bool(self):
            return self.getToken(ParaCParser.Bool, 0)

        def Complex(self):
            return self.getToken(ParaCParser.Complex, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def atomicTypeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.AtomicTypeSpecifierContext,0)


        def structOrUnionSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.StructOrUnionSpecifierContext,0)


        def enumSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.EnumSpecifierContext,0)


        def typedefName(self):
            return self.getTypedRuleContext(ParaCParser.TypedefNameContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def Typeof(self):
            return self.getToken(ParaCParser.Typeof, 0)

        def pointer(self):
            return self.getTypedRuleContext(ParaCParser.PointerContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_typeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpecifier" ):
                listener.enterTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpecifier" ):
                listener.exitTypeSpecifier(self)



    def typeSpecifier(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ParaCParser.TypeSpecifierContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 70
        self.enterRecursionRule(localctx, 70, self.RULE_typeSpecifier, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 550
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__3, ParaCParser.T__4, ParaCParser.T__5, ParaCParser.Char, ParaCParser.Double, ParaCParser.Float, ParaCParser.Int, ParaCParser.Lambda, ParaCParser.List, ParaCParser.Long, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Status, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Bool, ParaCParser.Complex]:
                self.state = 535
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ParaCParser.Void]:
                    self.state = 510
                    self.match(ParaCParser.Void)
                    pass
                elif token in [ParaCParser.Char]:
                    self.state = 511
                    self.match(ParaCParser.Char)
                    pass
                elif token in [ParaCParser.Short]:
                    self.state = 512
                    self.match(ParaCParser.Short)
                    pass
                elif token in [ParaCParser.Int]:
                    self.state = 513
                    self.match(ParaCParser.Int)
                    pass
                elif token in [ParaCParser.Status]:
                    self.state = 514
                    self.match(ParaCParser.Status)
                    pass
                elif token in [ParaCParser.Long]:
                    self.state = 515
                    self.match(ParaCParser.Long)
                    pass
                elif token in [ParaCParser.Float]:
                    self.state = 516
                    self.match(ParaCParser.Float)
                    pass
                elif token in [ParaCParser.Double]:
                    self.state = 517
                    self.match(ParaCParser.Double)
                    pass
                elif token in [ParaCParser.Signed]:
                    self.state = 518
                    self.match(ParaCParser.Signed)
                    pass
                elif token in [ParaCParser.List]:
                    self.state = 519
                    self.match(ParaCParser.List)
                    self.state = 520
                    self.match(ParaCParser.Less)
                    self.state = 521
                    self.typeSpecifier(0)
                    self.state = 522
                    self.match(ParaCParser.Greater)
                    pass
                elif token in [ParaCParser.Lambda]:
                    self.state = 524
                    self.match(ParaCParser.Lambda)
                    self.state = 525
                    self.match(ParaCParser.Less)
                    self.state = 526
                    self.parameterTypeList()
                    self.state = 527
                    self.match(ParaCParser.Greater)
                    pass
                elif token in [ParaCParser.Unsigned]:
                    self.state = 529
                    self.match(ParaCParser.Unsigned)
                    pass
                elif token in [ParaCParser.Bool]:
                    self.state = 530
                    self.match(ParaCParser.Bool)
                    pass
                elif token in [ParaCParser.Complex]:
                    self.state = 531
                    self.match(ParaCParser.Complex)
                    pass
                elif token in [ParaCParser.T__3]:
                    self.state = 532
                    self.match(ParaCParser.T__3)
                    pass
                elif token in [ParaCParser.T__4]:
                    self.state = 533
                    self.match(ParaCParser.T__4)
                    pass
                elif token in [ParaCParser.T__5]:
                    self.state = 534
                    self.match(ParaCParser.T__5)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [ParaCParser.T__0]:
                self.state = 537
                self.match(ParaCParser.T__0)
                self.state = 538
                self.match(ParaCParser.LeftParen)
                self.state = 539
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 540
                self.match(ParaCParser.RightParen)
                pass
            elif token in [ParaCParser.Atomic]:
                self.state = 541
                self.atomicTypeSpecifier()
                pass
            elif token in [ParaCParser.Struct, ParaCParser.Union]:
                self.state = 542
                self.structOrUnionSpecifier()
                pass
            elif token in [ParaCParser.Enum]:
                self.state = 543
                self.enumSpecifier()
                pass
            elif token in [ParaCParser.Identifier]:
                self.state = 544
                self.typedefName()
                pass
            elif token in [ParaCParser.T__6, ParaCParser.Typeof]:
                self.state = 545
                _la = self._input.LA(1)
                if not(_la==ParaCParser.T__6 or _la==ParaCParser.Typeof):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 546
                self.match(ParaCParser.LeftParen)
                self.state = 547
                self.constantExpression()
                self.state = 548
                self.match(ParaCParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 556
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ParaCParser.TypeSpecifierContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeSpecifier)
                    self.state = 552
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 553
                    self.pointer() 
                self.state = 558
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class StructOrUnionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structOrUnion(self):
            return self.getTypedRuleContext(ParaCParser.StructOrUnionContext,0)


        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def structDeclarationList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.StructDeclarationListContext)
            else:
                return self.getTypedRuleContext(ParaCParser.StructDeclarationListContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_structOrUnionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnionSpecifier" ):
                listener.enterStructOrUnionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnionSpecifier" ):
                listener.exitStructOrUnionSpecifier(self)




    def structOrUnionSpecifier(self):

        localctx = ParaCParser.StructOrUnionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_structOrUnionSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 575
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 559
                self.structOrUnion()
                self.state = 561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Identifier:
                    self.state = 560
                    self.match(ParaCParser.Identifier)


                self.state = 563
                self.match(ParaCParser.LeftBrace)
                self.state = 567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Float) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.List) | (1 << ParaCParser.Long) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Complex - 64)) | (1 << (ParaCParser.StaticAssert - 64)) | (1 << (ParaCParser.Identifier - 64)))) != 0):
                    self.state = 564
                    self.structDeclarationList()
                    self.state = 569
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 570
                self.match(ParaCParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 572
                self.structOrUnion()
                self.state = 573
                self.match(ParaCParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructOrUnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Struct(self):
            return self.getToken(ParaCParser.Struct, 0)

        def Union(self):
            return self.getToken(ParaCParser.Union, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_structOrUnion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnion" ):
                listener.enterStructOrUnion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnion" ):
                listener.exitStructOrUnion(self)




    def structOrUnion(self):

        localctx = ParaCParser.StructOrUnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_structOrUnion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 577
            _la = self._input.LA(1)
            if not(_la==ParaCParser.Struct or _la==ParaCParser.Union):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.StructDeclarationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.StructDeclarationContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_structDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclarationList" ):
                listener.enterStructDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclarationList" ):
                listener.exitStructDeclarationList(self)




    def structDeclarationList(self):

        localctx = ParaCParser.StructDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_structDeclarationList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 580 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 579
                    self.structDeclaration()

                else:
                    raise NoViableAltException(self)
                self.state = 582 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.SpecifierQualifierListContext,0)


        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)

        def structDeclaratorList(self):
            return self.getTypedRuleContext(ParaCParser.StructDeclaratorListContext,0)


        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(ParaCParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_structDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclaration" ):
                listener.enterStructDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclaration" ):
                listener.exitStructDeclaration(self)




    def structDeclaration(self):

        localctx = ParaCParser.StructDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_structDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 591
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__0, ParaCParser.T__3, ParaCParser.T__4, ParaCParser.T__5, ParaCParser.T__6, ParaCParser.Char, ParaCParser.Const, ParaCParser.Double, ParaCParser.Enum, ParaCParser.Float, ParaCParser.Int, ParaCParser.Lambda, ParaCParser.List, ParaCParser.Long, ParaCParser.Restrict, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Status, ParaCParser.Struct, ParaCParser.Typeof, ParaCParser.Union, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Volatile, ParaCParser.Atomic, ParaCParser.Bool, ParaCParser.Complex, ParaCParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 584
                self.specifierQualifierList()
                self.state = 586
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (ParaCParser.LeftParen - 70)) | (1 << (ParaCParser.Star - 70)) | (1 << (ParaCParser.Caret - 70)) | (1 << (ParaCParser.Colon - 70)) | (1 << (ParaCParser.Identifier - 70)))) != 0):
                    self.state = 585
                    self.structDeclaratorList()


                self.state = 588
                self.match(ParaCParser.Semi)
                pass
            elif token in [ParaCParser.StaticAssert]:
                self.enterOuterAlt(localctx, 2)
                self.state = 590
                self.staticAssertDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecifierQualifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeQualifierContext,0)


        def specifierQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.SpecifierQualifierListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_specifierQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecifierQualifierList" ):
                listener.enterSpecifierQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecifierQualifierList" ):
                listener.exitSpecifierQualifierList(self)




    def specifierQualifierList(self):

        localctx = ParaCParser.SpecifierQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_specifierQualifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 595
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 593
                self.typeSpecifier(0)
                pass

            elif la_ == 2:
                self.state = 594
                self.typeQualifier()
                pass


            self.state = 598
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 597
                self.specifierQualifierList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclaratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.StructDeclaratorContext)
            else:
                return self.getTypedRuleContext(ParaCParser.StructDeclaratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_structDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclaratorList" ):
                listener.enterStructDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclaratorList" ):
                listener.exitStructDeclaratorList(self)




    def structDeclaratorList(self):

        localctx = ParaCParser.StructDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_structDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 600
            self.structDeclarator()
            self.state = 605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 601
                self.match(ParaCParser.Comma)
                self.state = 602
                self.structDeclarator()
                self.state = 607
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)


        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_structDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclarator" ):
                listener.enterStructDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclarator" ):
                listener.exitStructDeclarator(self)




    def structDeclarator(self):

        localctx = ParaCParser.StructDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_structDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 614
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 608
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (ParaCParser.LeftParen - 70)) | (1 << (ParaCParser.Star - 70)) | (1 << (ParaCParser.Caret - 70)) | (1 << (ParaCParser.Identifier - 70)))) != 0):
                    self.state = 609
                    self.declarator()


                self.state = 612
                self.match(ParaCParser.Colon)
                self.state = 613
                self.constantExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Enum(self):
            return self.getToken(ParaCParser.Enum, 0)

        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def enumeratorList(self):
            return self.getTypedRuleContext(ParaCParser.EnumeratorListContext,0)


        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_enumSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumSpecifier" ):
                listener.enterEnumSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumSpecifier" ):
                listener.exitEnumSpecifier(self)




    def enumSpecifier(self):

        localctx = ParaCParser.EnumSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_enumSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 629
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 616
                self.match(ParaCParser.Enum)
                self.state = 618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Identifier:
                    self.state = 617
                    self.match(ParaCParser.Identifier)


                self.state = 620
                self.match(ParaCParser.LeftBrace)
                self.state = 621
                self.enumeratorList()
                self.state = 623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Comma:
                    self.state = 622
                    self.match(ParaCParser.Comma)


                self.state = 625
                self.match(ParaCParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 627
                self.match(ParaCParser.Enum)
                self.state = 628
                self.match(ParaCParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.EnumeratorContext)
            else:
                return self.getTypedRuleContext(ParaCParser.EnumeratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_enumeratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratorList" ):
                listener.enterEnumeratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratorList" ):
                listener.exitEnumeratorList(self)




    def enumeratorList(self):

        localctx = ParaCParser.EnumeratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_enumeratorList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self.enumerator()
            self.state = 636
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 632
                    self.match(ParaCParser.Comma)
                    self.state = 633
                    self.enumerator() 
                self.state = 638
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerationConstant(self):
            return self.getTypedRuleContext(ParaCParser.EnumerationConstantContext,0)


        def Assign(self):
            return self.getToken(ParaCParser.Assign, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_enumerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerator" ):
                listener.enterEnumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerator" ):
                listener.exitEnumerator(self)




    def enumerator(self):

        localctx = ParaCParser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_enumerator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self.enumerationConstant()
            self.state = 642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Assign:
                self.state = 640
                self.match(ParaCParser.Assign)
                self.state = 641
                self.constantExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumerationConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_enumerationConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerationConstant" ):
                listener.enterEnumerationConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerationConstant" ):
                listener.exitEnumerationConstant(self)




    def enumerationConstant(self):

        localctx = ParaCParser.EnumerationConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_enumerationConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self.match(ParaCParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomicTypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atomic(self):
            return self.getToken(ParaCParser.Atomic, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_atomicTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicTypeSpecifier" ):
                listener.enterAtomicTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicTypeSpecifier" ):
                listener.exitAtomicTypeSpecifier(self)




    def atomicTypeSpecifier(self):

        localctx = ParaCParser.AtomicTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_atomicTypeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self.match(ParaCParser.Atomic)
            self.state = 647
            self.match(ParaCParser.LeftParen)
            self.state = 648
            self.typeName()
            self.state = 649
            self.match(ParaCParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Const(self):
            return self.getToken(ParaCParser.Const, 0)

        def Restrict(self):
            return self.getToken(ParaCParser.Restrict, 0)

        def Volatile(self):
            return self.getToken(ParaCParser.Volatile, 0)

        def Atomic(self):
            return self.getToken(ParaCParser.Atomic, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_typeQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifier" ):
                listener.enterTypeQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifier" ):
                listener.exitTypeQualifier(self)




    def typeQualifier(self):

        localctx = ParaCParser.TypeQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_typeQualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Inline(self):
            return self.getToken(ParaCParser.Inline, 0)

        def Noreturn(self):
            return self.getToken(ParaCParser.Noreturn, 0)

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.GccAttributeSpecifierContext,0)


        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def entryPointSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.EntryPointSpecifierContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_functionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionSpecifier" ):
                listener.enterFunctionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionSpecifier" ):
                listener.exitFunctionSpecifier(self)




    def functionSpecifier(self):

        localctx = ParaCParser.FunctionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_functionSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 660
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__7, ParaCParser.T__8, ParaCParser.Inline, ParaCParser.Noreturn]:
                self.enterOuterAlt(localctx, 1)
                self.state = 653
                _la = self._input.LA(1)
                if not(((((_la - 8)) & ~0x3f) == 0 and ((1 << (_la - 8)) & ((1 << (ParaCParser.T__7 - 8)) | (1 << (ParaCParser.T__8 - 8)) | (1 << (ParaCParser.Inline - 8)) | (1 << (ParaCParser.Noreturn - 8)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [ParaCParser.T__11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 654
                self.gccAttributeSpecifier()
                pass
            elif token in [ParaCParser.T__9]:
                self.enterOuterAlt(localctx, 3)
                self.state = 655
                self.match(ParaCParser.T__9)
                self.state = 656
                self.match(ParaCParser.LeftParen)
                self.state = 657
                self.match(ParaCParser.Identifier)
                self.state = 658
                self.match(ParaCParser.RightParen)
                pass
            elif token in [ParaCParser.Entry]:
                self.enterOuterAlt(localctx, 4)
                self.state = 659
                self.entryPointSpecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlignmentSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Alignas(self):
            return self.getToken(ParaCParser.Alignas, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(ParaCParser.TypeNameContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_alignmentSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignmentSpecifier" ):
                listener.enterAlignmentSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignmentSpecifier" ):
                listener.exitAlignmentSpecifier(self)




    def alignmentSpecifier(self):

        localctx = ParaCParser.AlignmentSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_alignmentSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662
            self.match(ParaCParser.Alignas)
            self.state = 663
            self.match(ParaCParser.LeftParen)
            self.state = 666
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 664
                self.typeName()
                pass

            elif la_ == 2:
                self.state = 665
                self.constantExpression()
                pass


            self.state = 668
            self.match(ParaCParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.DirectDeclaratorContext,0)


        def pointer(self):
            return self.getTypedRuleContext(ParaCParser.PointerContext,0)


        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator" ):
                listener.enterDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator" ):
                listener.exitDeclarator(self)




    def declarator(self):

        localctx = ParaCParser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Star or _la==ParaCParser.Caret:
                self.state = 670
                self.pointer()


            self.state = 673
            self.directDeclarator(0)
            self.state = 677
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 674
                    self.gccDeclaratorExtension() 
                self.state = 679
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def DigitSequence(self):
            return self.getToken(ParaCParser.DigitSequence, 0)

        def pointer(self):
            return self.getTypedRuleContext(ParaCParser.PointerContext,0)


        def directDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.DirectDeclaratorContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.TypeSpecifierContext,0)


        def LeftBracket(self):
            return self.getToken(ParaCParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(ParaCParser.RightBracket, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def Static(self):
            return self.getToken(ParaCParser.Static, 0)

        def Star(self):
            return self.getToken(ParaCParser.Star, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(ParaCParser.ParameterTypeListContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(ParaCParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_directDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectDeclarator" ):
                listener.enterDirectDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectDeclarator" ):
                listener.exitDirectDeclarator(self)



    def directDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ParaCParser.DirectDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 104
        self.enterRecursionRule(localctx, 104, self.RULE_directDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 681
                self.match(ParaCParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 682
                self.match(ParaCParser.LeftParen)
                self.state = 683
                self.declarator()
                self.state = 684
                self.match(ParaCParser.RightParen)
                pass

            elif la_ == 3:
                self.state = 686
                self.match(ParaCParser.Identifier)
                self.state = 687
                self.match(ParaCParser.Colon)
                self.state = 688
                self.match(ParaCParser.DigitSequence)
                pass

            elif la_ == 4:
                self.state = 689
                self.match(ParaCParser.LeftParen)
                self.state = 691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.Char) | (1 << ParaCParser.Double) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Float) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.List) | (1 << ParaCParser.Long) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool))) != 0) or _la==ParaCParser.Complex or _la==ParaCParser.Identifier:
                    self.state = 690
                    self.typeSpecifier(0)


                self.state = 693
                self.pointer()
                self.state = 694
                self.directDeclarator(0)
                self.state = 695
                self.match(ParaCParser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 744
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 742
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                    if la_ == 1:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 699
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 700
                        self.match(ParaCParser.LeftBracket)
                        self.state = 702
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                            self.state = 701
                            self.typeQualifierList()


                        self.state = 705
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ParaCParser.Generic - 65)) | (1 << (ParaCParser.LeftParen - 65)) | (1 << (ParaCParser.Plus - 65)) | (1 << (ParaCParser.PlusPlus - 65)) | (1 << (ParaCParser.Minus - 65)) | (1 << (ParaCParser.MinusMinus - 65)) | (1 << (ParaCParser.Star - 65)) | (1 << (ParaCParser.And - 65)) | (1 << (ParaCParser.AndAnd - 65)) | (1 << (ParaCParser.Not - 65)) | (1 << (ParaCParser.Tilde - 65)) | (1 << (ParaCParser.Identifier - 65)) | (1 << (ParaCParser.Constant - 65)) | (1 << (ParaCParser.DigitSequence - 65)) | (1 << (ParaCParser.StringLiteral - 65)))) != 0):
                            self.state = 704
                            self.assignmentExpression()


                        self.state = 707
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 708
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 709
                        self.match(ParaCParser.LeftBracket)
                        self.state = 710
                        self.match(ParaCParser.Static)
                        self.state = 712
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                            self.state = 711
                            self.typeQualifierList()


                        self.state = 714
                        self.assignmentExpression()
                        self.state = 715
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 717
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 718
                        self.match(ParaCParser.LeftBracket)
                        self.state = 719
                        self.typeQualifierList()
                        self.state = 720
                        self.match(ParaCParser.Static)
                        self.state = 721
                        self.assignmentExpression()
                        self.state = 722
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 724
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 725
                        self.match(ParaCParser.LeftBracket)
                        self.state = 727
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                            self.state = 726
                            self.typeQualifierList()


                        self.state = 729
                        self.match(ParaCParser.Star)
                        self.state = 730
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 731
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 732
                        self.match(ParaCParser.LeftParen)
                        self.state = 733
                        self.parameterTypeList()
                        self.state = 734
                        self.match(ParaCParser.RightParen)
                        pass

                    elif la_ == 6:
                        localctx = ParaCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 736
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 737
                        self.match(ParaCParser.LeftParen)
                        self.state = 739
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ParaCParser.Identifier:
                            self.state = 738
                            self.identifierList()


                        self.state = 741
                        self.match(ParaCParser.RightParen)
                        pass

             
                self.state = 746
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class GccDeclaratorExtensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.StringLiteral)
            else:
                return self.getToken(ParaCParser.StringLiteral, i)

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(ParaCParser.GccAttributeSpecifierContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_gccDeclaratorExtension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccDeclaratorExtension" ):
                listener.enterGccDeclaratorExtension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccDeclaratorExtension" ):
                listener.exitGccDeclaratorExtension(self)




    def gccDeclaratorExtension(self):

        localctx = ParaCParser.GccDeclaratorExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_gccDeclaratorExtension)
        self._la = 0 # Token type
        try:
            self.state = 756
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 747
                self.match(ParaCParser.T__10)
                self.state = 748
                self.match(ParaCParser.LeftParen)
                self.state = 750 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 749
                    self.match(ParaCParser.StringLiteral)
                    self.state = 752 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==ParaCParser.StringLiteral):
                        break

                self.state = 754
                self.match(ParaCParser.RightParen)
                pass
            elif token in [ParaCParser.T__11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 755
                self.gccAttributeSpecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftParen)
            else:
                return self.getToken(ParaCParser.LeftParen, i)

        def gccAttributeList(self):
            return self.getTypedRuleContext(ParaCParser.GccAttributeListContext,0)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightParen)
            else:
                return self.getToken(ParaCParser.RightParen, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_gccAttributeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttributeSpecifier" ):
                listener.enterGccAttributeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttributeSpecifier" ):
                listener.exitGccAttributeSpecifier(self)




    def gccAttributeSpecifier(self):

        localctx = ParaCParser.GccAttributeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_gccAttributeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.match(ParaCParser.T__11)
            self.state = 759
            self.match(ParaCParser.LeftParen)
            self.state = 760
            self.match(ParaCParser.LeftParen)
            self.state = 761
            self.gccAttributeList()
            self.state = 762
            self.match(ParaCParser.RightParen)
            self.state = 763
            self.match(ParaCParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gccAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.GccAttributeContext)
            else:
                return self.getTypedRuleContext(ParaCParser.GccAttributeContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_gccAttributeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttributeList" ):
                listener.enterGccAttributeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttributeList" ):
                listener.exitGccAttributeList(self)




    def gccAttributeList(self):

        localctx = ParaCParser.GccAttributeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_gccAttributeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__10) | (1 << ParaCParser.T__11) | (1 << ParaCParser.T__12) | (1 << ParaCParser.T__13) | (1 << ParaCParser.T__14) | (1 << ParaCParser.T__15) | (1 << ParaCParser.T__16) | (1 << ParaCParser.As) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Break) | (1 << ParaCParser.Case) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Continue) | (1 << ParaCParser.Default) | (1 << ParaCParser.Do) | (1 << ParaCParser.Double) | (1 << ParaCParser.Else) | (1 << ParaCParser.ExtensionTask) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.For) | (1 << ParaCParser.Goto) | (1 << ParaCParser.If) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.List) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Return) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Switch) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.While) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Complex - 64)) | (1 << (ParaCParser.Generic - 64)) | (1 << (ParaCParser.Imaginary - 64)) | (1 << (ParaCParser.Noreturn - 64)) | (1 << (ParaCParser.StaticAssert - 64)) | (1 << (ParaCParser.ThreadLocal - 64)) | (1 << (ParaCParser.LeftBracket - 64)) | (1 << (ParaCParser.RightBracket - 64)) | (1 << (ParaCParser.LeftBrace - 64)) | (1 << (ParaCParser.RightBrace - 64)) | (1 << (ParaCParser.Less - 64)) | (1 << (ParaCParser.LessEqual - 64)) | (1 << (ParaCParser.Greater - 64)) | (1 << (ParaCParser.GreaterEqual - 64)) | (1 << (ParaCParser.LeftShift - 64)) | (1 << (ParaCParser.RightShift - 64)) | (1 << (ParaCParser.Plus - 64)) | (1 << (ParaCParser.PlusPlus - 64)) | (1 << (ParaCParser.Minus - 64)) | (1 << (ParaCParser.MinusMinus - 64)) | (1 << (ParaCParser.Star - 64)) | (1 << (ParaCParser.Div - 64)) | (1 << (ParaCParser.Mod - 64)) | (1 << (ParaCParser.And - 64)) | (1 << (ParaCParser.Or - 64)) | (1 << (ParaCParser.AndAnd - 64)) | (1 << (ParaCParser.OrOr - 64)) | (1 << (ParaCParser.Caret - 64)) | (1 << (ParaCParser.Not - 64)) | (1 << (ParaCParser.Tilde - 64)) | (1 << (ParaCParser.DecoratorSign - 64)) | (1 << (ParaCParser.LambdaStartBlock - 64)) | (1 << (ParaCParser.Question - 64)) | (1 << (ParaCParser.Colon - 64)) | (1 << (ParaCParser.Semi - 64)) | (1 << (ParaCParser.Assign - 64)) | (1 << (ParaCParser.StarAssign - 64)) | (1 << (ParaCParser.DivAssign - 64)) | (1 << (ParaCParser.ModAssign - 64)) | (1 << (ParaCParser.PlusAssign - 64)) | (1 << (ParaCParser.MinusAssign - 64)) | (1 << (ParaCParser.LeftShiftAssign - 64)) | (1 << (ParaCParser.RightShiftAssign - 64)) | (1 << (ParaCParser.AndAssign - 64)) | (1 << (ParaCParser.XorAssign - 64)) | (1 << (ParaCParser.OrAssign - 64)) | (1 << (ParaCParser.Equal - 64)) | (1 << (ParaCParser.NotEqual - 64)) | (1 << (ParaCParser.Arrow - 64)) | (1 << (ParaCParser.Dot - 64)) | (1 << (ParaCParser.Ellipsis - 64)) | (1 << (ParaCParser.Identifier - 64)) | (1 << (ParaCParser.ExtensionTaskLambda - 64)) | (1 << (ParaCParser.Constant - 64)) | (1 << (ParaCParser.DigitSequence - 64)) | (1 << (ParaCParser.StringLiteral - 64)) | (1 << (ParaCParser.AsmBlock - 64)) | (1 << (ParaCParser.Directive - 64)) | (1 << (ParaCParser.Whitespace - 64)) | (1 << (ParaCParser.Newline - 64)))) != 0):
                self.state = 765
                self.gccAttribute()


            self.state = 774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 768
                self.match(ParaCParser.Comma)
                self.state = 770
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__10) | (1 << ParaCParser.T__11) | (1 << ParaCParser.T__12) | (1 << ParaCParser.T__13) | (1 << ParaCParser.T__14) | (1 << ParaCParser.T__15) | (1 << ParaCParser.T__16) | (1 << ParaCParser.As) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Break) | (1 << ParaCParser.Case) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Continue) | (1 << ParaCParser.Default) | (1 << ParaCParser.Do) | (1 << ParaCParser.Double) | (1 << ParaCParser.Else) | (1 << ParaCParser.ExtensionTask) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.For) | (1 << ParaCParser.Goto) | (1 << ParaCParser.If) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.List) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Return) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Switch) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.While) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Complex - 64)) | (1 << (ParaCParser.Generic - 64)) | (1 << (ParaCParser.Imaginary - 64)) | (1 << (ParaCParser.Noreturn - 64)) | (1 << (ParaCParser.StaticAssert - 64)) | (1 << (ParaCParser.ThreadLocal - 64)) | (1 << (ParaCParser.LeftBracket - 64)) | (1 << (ParaCParser.RightBracket - 64)) | (1 << (ParaCParser.LeftBrace - 64)) | (1 << (ParaCParser.RightBrace - 64)) | (1 << (ParaCParser.Less - 64)) | (1 << (ParaCParser.LessEqual - 64)) | (1 << (ParaCParser.Greater - 64)) | (1 << (ParaCParser.GreaterEqual - 64)) | (1 << (ParaCParser.LeftShift - 64)) | (1 << (ParaCParser.RightShift - 64)) | (1 << (ParaCParser.Plus - 64)) | (1 << (ParaCParser.PlusPlus - 64)) | (1 << (ParaCParser.Minus - 64)) | (1 << (ParaCParser.MinusMinus - 64)) | (1 << (ParaCParser.Star - 64)) | (1 << (ParaCParser.Div - 64)) | (1 << (ParaCParser.Mod - 64)) | (1 << (ParaCParser.And - 64)) | (1 << (ParaCParser.Or - 64)) | (1 << (ParaCParser.AndAnd - 64)) | (1 << (ParaCParser.OrOr - 64)) | (1 << (ParaCParser.Caret - 64)) | (1 << (ParaCParser.Not - 64)) | (1 << (ParaCParser.Tilde - 64)) | (1 << (ParaCParser.DecoratorSign - 64)) | (1 << (ParaCParser.LambdaStartBlock - 64)) | (1 << (ParaCParser.Question - 64)) | (1 << (ParaCParser.Colon - 64)) | (1 << (ParaCParser.Semi - 64)) | (1 << (ParaCParser.Assign - 64)) | (1 << (ParaCParser.StarAssign - 64)) | (1 << (ParaCParser.DivAssign - 64)) | (1 << (ParaCParser.ModAssign - 64)) | (1 << (ParaCParser.PlusAssign - 64)) | (1 << (ParaCParser.MinusAssign - 64)) | (1 << (ParaCParser.LeftShiftAssign - 64)) | (1 << (ParaCParser.RightShiftAssign - 64)) | (1 << (ParaCParser.AndAssign - 64)) | (1 << (ParaCParser.XorAssign - 64)) | (1 << (ParaCParser.OrAssign - 64)) | (1 << (ParaCParser.Equal - 64)) | (1 << (ParaCParser.NotEqual - 64)) | (1 << (ParaCParser.Arrow - 64)) | (1 << (ParaCParser.Dot - 64)) | (1 << (ParaCParser.Ellipsis - 64)) | (1 << (ParaCParser.Identifier - 64)) | (1 << (ParaCParser.ExtensionTaskLambda - 64)) | (1 << (ParaCParser.Constant - 64)) | (1 << (ParaCParser.DigitSequence - 64)) | (1 << (ParaCParser.StringLiteral - 64)) | (1 << (ParaCParser.AsmBlock - 64)) | (1 << (ParaCParser.Directive - 64)) | (1 << (ParaCParser.Whitespace - 64)) | (1 << (ParaCParser.Newline - 64)))) != 0):
                    self.state = 769
                    self.gccAttribute()


                self.state = 776
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftParen)
            else:
                return self.getToken(ParaCParser.LeftParen, i)

        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightParen)
            else:
                return self.getToken(ParaCParser.RightParen, i)

        def argumentExpressionList(self):
            return self.getTypedRuleContext(ParaCParser.ArgumentExpressionListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_gccAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttribute" ):
                listener.enterGccAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttribute" ):
                listener.exitGccAttribute(self)




    def gccAttribute(self):

        localctx = ParaCParser.GccAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_gccAttribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            _la = self._input.LA(1)
            if _la <= 0 or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (ParaCParser.LeftParen - 70)) | (1 << (ParaCParser.RightParen - 70)) | (1 << (ParaCParser.Comma - 70)))) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.LeftParen:
                self.state = 778
                self.match(ParaCParser.LeftParen)
                self.state = 780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ParaCParser.Generic - 65)) | (1 << (ParaCParser.LeftParen - 65)) | (1 << (ParaCParser.Plus - 65)) | (1 << (ParaCParser.PlusPlus - 65)) | (1 << (ParaCParser.Minus - 65)) | (1 << (ParaCParser.MinusMinus - 65)) | (1 << (ParaCParser.Star - 65)) | (1 << (ParaCParser.And - 65)) | (1 << (ParaCParser.AndAnd - 65)) | (1 << (ParaCParser.Not - 65)) | (1 << (ParaCParser.Tilde - 65)) | (1 << (ParaCParser.Identifier - 65)) | (1 << (ParaCParser.Constant - 65)) | (1 << (ParaCParser.DigitSequence - 65)) | (1 << (ParaCParser.StringLiteral - 65)))) != 0):
                    self.state = 779
                    self.argumentExpressionList()


                self.state = 782
                self.match(ParaCParser.RightParen)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedParenthesesBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.LeftParen)
            else:
                return self.getToken(ParaCParser.LeftParen, i)

        def nestedParenthesesBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.NestedParenthesesBlockContext)
            else:
                return self.getTypedRuleContext(ParaCParser.NestedParenthesesBlockContext,i)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.RightParen)
            else:
                return self.getToken(ParaCParser.RightParen, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_nestedParenthesesBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedParenthesesBlock" ):
                listener.enterNestedParenthesesBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedParenthesesBlock" ):
                listener.exitNestedParenthesesBlock(self)




    def nestedParenthesesBlock(self):

        localctx = ParaCParser.NestedParenthesesBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_nestedParenthesesBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__10) | (1 << ParaCParser.T__11) | (1 << ParaCParser.T__12) | (1 << ParaCParser.T__13) | (1 << ParaCParser.T__14) | (1 << ParaCParser.T__15) | (1 << ParaCParser.T__16) | (1 << ParaCParser.As) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Break) | (1 << ParaCParser.Case) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Continue) | (1 << ParaCParser.Default) | (1 << ParaCParser.Do) | (1 << ParaCParser.Double) | (1 << ParaCParser.Else) | (1 << ParaCParser.ExtensionTask) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.For) | (1 << ParaCParser.Goto) | (1 << ParaCParser.If) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.List) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Return) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Switch) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.While) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Complex - 64)) | (1 << (ParaCParser.Generic - 64)) | (1 << (ParaCParser.Imaginary - 64)) | (1 << (ParaCParser.Noreturn - 64)) | (1 << (ParaCParser.StaticAssert - 64)) | (1 << (ParaCParser.ThreadLocal - 64)) | (1 << (ParaCParser.LeftParen - 64)) | (1 << (ParaCParser.LeftBracket - 64)) | (1 << (ParaCParser.RightBracket - 64)) | (1 << (ParaCParser.LeftBrace - 64)) | (1 << (ParaCParser.RightBrace - 64)) | (1 << (ParaCParser.Less - 64)) | (1 << (ParaCParser.LessEqual - 64)) | (1 << (ParaCParser.Greater - 64)) | (1 << (ParaCParser.GreaterEqual - 64)) | (1 << (ParaCParser.LeftShift - 64)) | (1 << (ParaCParser.RightShift - 64)) | (1 << (ParaCParser.Plus - 64)) | (1 << (ParaCParser.PlusPlus - 64)) | (1 << (ParaCParser.Minus - 64)) | (1 << (ParaCParser.MinusMinus - 64)) | (1 << (ParaCParser.Star - 64)) | (1 << (ParaCParser.Div - 64)) | (1 << (ParaCParser.Mod - 64)) | (1 << (ParaCParser.And - 64)) | (1 << (ParaCParser.Or - 64)) | (1 << (ParaCParser.AndAnd - 64)) | (1 << (ParaCParser.OrOr - 64)) | (1 << (ParaCParser.Caret - 64)) | (1 << (ParaCParser.Not - 64)) | (1 << (ParaCParser.Tilde - 64)) | (1 << (ParaCParser.DecoratorSign - 64)) | (1 << (ParaCParser.LambdaStartBlock - 64)) | (1 << (ParaCParser.Question - 64)) | (1 << (ParaCParser.Colon - 64)) | (1 << (ParaCParser.Semi - 64)) | (1 << (ParaCParser.Comma - 64)) | (1 << (ParaCParser.Assign - 64)) | (1 << (ParaCParser.StarAssign - 64)) | (1 << (ParaCParser.DivAssign - 64)) | (1 << (ParaCParser.ModAssign - 64)) | (1 << (ParaCParser.PlusAssign - 64)) | (1 << (ParaCParser.MinusAssign - 64)) | (1 << (ParaCParser.LeftShiftAssign - 64)) | (1 << (ParaCParser.RightShiftAssign - 64)) | (1 << (ParaCParser.AndAssign - 64)) | (1 << (ParaCParser.XorAssign - 64)) | (1 << (ParaCParser.OrAssign - 64)) | (1 << (ParaCParser.Equal - 64)) | (1 << (ParaCParser.NotEqual - 64)) | (1 << (ParaCParser.Arrow - 64)) | (1 << (ParaCParser.Dot - 64)) | (1 << (ParaCParser.Ellipsis - 64)) | (1 << (ParaCParser.Identifier - 64)) | (1 << (ParaCParser.ExtensionTaskLambda - 64)) | (1 << (ParaCParser.Constant - 64)) | (1 << (ParaCParser.DigitSequence - 64)) | (1 << (ParaCParser.StringLiteral - 64)) | (1 << (ParaCParser.AsmBlock - 64)) | (1 << (ParaCParser.Directive - 64)) | (1 << (ParaCParser.Whitespace - 64)) | (1 << (ParaCParser.Newline - 64)))) != 0):
                self.state = 790
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ParaCParser.T__0, ParaCParser.T__1, ParaCParser.T__2, ParaCParser.T__3, ParaCParser.T__4, ParaCParser.T__5, ParaCParser.T__6, ParaCParser.T__7, ParaCParser.T__8, ParaCParser.T__9, ParaCParser.T__10, ParaCParser.T__11, ParaCParser.T__12, ParaCParser.T__13, ParaCParser.T__14, ParaCParser.T__15, ParaCParser.T__16, ParaCParser.As, ParaCParser.Auto, ParaCParser.Break, ParaCParser.Case, ParaCParser.Char, ParaCParser.Const, ParaCParser.Continue, ParaCParser.Default, ParaCParser.Do, ParaCParser.Double, ParaCParser.Else, ParaCParser.ExtensionTask, ParaCParser.Entry, ParaCParser.Enum, ParaCParser.Extern, ParaCParser.Float, ParaCParser.For, ParaCParser.Goto, ParaCParser.If, ParaCParser.Inline, ParaCParser.Int, ParaCParser.Lambda, ParaCParser.List, ParaCParser.Long, ParaCParser.Register, ParaCParser.Restrict, ParaCParser.Return, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Sizeof, ParaCParser.Spawn, ParaCParser.Static, ParaCParser.Status, ParaCParser.Struct, ParaCParser.Switch, ParaCParser.Typeof, ParaCParser.Typedef, ParaCParser.Union, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Volatile, ParaCParser.While, ParaCParser.Alignas, ParaCParser.Alignof, ParaCParser.Atomic, ParaCParser.Bool, ParaCParser.Complex, ParaCParser.Generic, ParaCParser.Imaginary, ParaCParser.Noreturn, ParaCParser.StaticAssert, ParaCParser.ThreadLocal, ParaCParser.LeftBracket, ParaCParser.RightBracket, ParaCParser.LeftBrace, ParaCParser.RightBrace, ParaCParser.Less, ParaCParser.LessEqual, ParaCParser.Greater, ParaCParser.GreaterEqual, ParaCParser.LeftShift, ParaCParser.RightShift, ParaCParser.Plus, ParaCParser.PlusPlus, ParaCParser.Minus, ParaCParser.MinusMinus, ParaCParser.Star, ParaCParser.Div, ParaCParser.Mod, ParaCParser.And, ParaCParser.Or, ParaCParser.AndAnd, ParaCParser.OrOr, ParaCParser.Caret, ParaCParser.Not, ParaCParser.Tilde, ParaCParser.DecoratorSign, ParaCParser.LambdaStartBlock, ParaCParser.Question, ParaCParser.Colon, ParaCParser.Semi, ParaCParser.Comma, ParaCParser.Assign, ParaCParser.StarAssign, ParaCParser.DivAssign, ParaCParser.ModAssign, ParaCParser.PlusAssign, ParaCParser.MinusAssign, ParaCParser.LeftShiftAssign, ParaCParser.RightShiftAssign, ParaCParser.AndAssign, ParaCParser.XorAssign, ParaCParser.OrAssign, ParaCParser.Equal, ParaCParser.NotEqual, ParaCParser.Arrow, ParaCParser.Dot, ParaCParser.Ellipsis, ParaCParser.Identifier, ParaCParser.ExtensionTaskLambda, ParaCParser.Constant, ParaCParser.DigitSequence, ParaCParser.StringLiteral, ParaCParser.AsmBlock, ParaCParser.Directive, ParaCParser.Whitespace, ParaCParser.Newline]:
                    self.state = 785
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==ParaCParser.LeftParen or _la==ParaCParser.RightParen:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [ParaCParser.LeftParen]:
                    self.state = 786
                    self.match(ParaCParser.LeftParen)
                    self.state = 787
                    self.nestedParenthesesBlock()
                    self.state = 788
                    self.match(ParaCParser.RightParen)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 794
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Star)
            else:
                return self.getToken(ParaCParser.Star, i)

        def Caret(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Caret)
            else:
                return self.getToken(ParaCParser.Caret, i)

        def typeQualifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.TypeQualifierListContext)
            else:
                return self.getTypedRuleContext(ParaCParser.TypeQualifierListContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_pointer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointer" ):
                listener.enterPointer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointer" ):
                listener.exitPointer(self)




    def pointer(self):

        localctx = ParaCParser.PointerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_pointer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 795
                    _la = self._input.LA(1)
                    if not(_la==ParaCParser.Star or _la==ParaCParser.Caret):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 797
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                    if la_ == 1:
                        self.state = 796
                        self.typeQualifierList()



                else:
                    raise NoViableAltException(self)
                self.state = 801 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeQualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.TypeQualifierContext)
            else:
                return self.getTypedRuleContext(ParaCParser.TypeQualifierContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_typeQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifierList" ):
                listener.enterTypeQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifierList" ):
                listener.exitTypeQualifierList(self)




    def typeQualifierList(self):

        localctx = ParaCParser.TypeQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_typeQualifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 803
                    self.typeQualifier()

                else:
                    raise NoViableAltException(self)
                self.state = 806 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(ParaCParser.ParameterListContext,0)


        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def Ellipsis(self):
            return self.getToken(ParaCParser.Ellipsis, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_parameterTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterTypeList" ):
                listener.enterParameterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterTypeList" ):
                listener.exitParameterTypeList(self)




    def parameterTypeList(self):

        localctx = ParaCParser.ParameterTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_parameterTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self.parameterList()
            self.state = 811
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Comma:
                self.state = 809
                self.match(ParaCParser.Comma)
                self.state = 810
                self.match(ParaCParser.Ellipsis)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ParameterDeclarationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ParameterDeclarationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)




    def parameterList(self):

        localctx = ParaCParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_parameterList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.parameterDeclaration()
            self.state = 818
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 814
                    self.match(ParaCParser.Comma)
                    self.state = 815
                    self.parameterDeclaration() 
                self.state = 820
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ParaCParser.RULE_parameterDeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AbstractParameterDeclarationContext(ParameterDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.ParameterDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiersContext,0)

        def abstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.AbstractDeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractParameterDeclaration" ):
                listener.enterAbstractParameterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractParameterDeclaration" ):
                listener.exitAbstractParameterDeclaration(self)


    class RegularParameterDeclarationContext(ParameterDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.ParameterDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiersContext,0)

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegularParameterDeclaration" ):
                listener.enterRegularParameterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegularParameterDeclaration" ):
                listener.exitRegularParameterDeclaration(self)



    def parameterDeclaration(self):

        localctx = ParaCParser.ParameterDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_parameterDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 828
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                localctx = ParaCParser.RegularParameterDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 821
                self.declarationSpecifiers()
                self.state = 822
                self.declarator()
                pass

            elif la_ == 2:
                localctx = ParaCParser.AbstractParameterDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 824
                self.declarationSpecifiers()
                self.state = 826
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (ParaCParser.LeftParen - 70)) | (1 << (ParaCParser.LeftBracket - 70)) | (1 << (ParaCParser.Star - 70)) | (1 << (ParaCParser.Caret - 70)))) != 0):
                    self.state = 825
                    self.abstractDeclarator()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Identifier)
            else:
                return self.getToken(ParaCParser.Identifier, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = ParaCParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 830
            self.match(ParaCParser.Identifier)
            self.state = 835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 831
                self.match(ParaCParser.Comma)
                self.state = 832
                self.match(ParaCParser.Identifier)
                self.state = 837
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.SpecifierQualifierListContext,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)




    def typeName(self):

        localctx = ParaCParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_typeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self.specifierQualifierList()
            self.state = 840
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 839
                self.abstractDeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbstractDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointer(self):
            return self.getTypedRuleContext(ParaCParser.PointerContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.DirectAbstractDeclaratorContext,0)


        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_abstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractDeclarator" ):
                listener.enterAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractDeclarator" ):
                listener.exitAbstractDeclarator(self)




    def abstractDeclarator(self):

        localctx = ParaCParser.AbstractDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_abstractDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 853
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 842
                self.pointer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Star or _la==ParaCParser.Caret:
                    self.state = 843
                    self.pointer()


                self.state = 846
                self.directAbstractDeclarator(0)
                self.state = 850
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 847
                        self.gccDeclaratorExtension() 
                    self.state = 852
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectAbstractDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def abstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.AbstractDeclaratorContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.GccDeclaratorExtensionContext,i)


        def LeftBracket(self):
            return self.getToken(ParaCParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(ParaCParser.RightBracket, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(ParaCParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def Static(self):
            return self.getToken(ParaCParser.Static, 0)

        def Star(self):
            return self.getToken(ParaCParser.Star, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(ParaCParser.ParameterTypeListContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.DirectAbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_directAbstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectAbstractDeclarator" ):
                listener.enterDirectAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectAbstractDeclarator" ):
                listener.exitDirectAbstractDeclarator(self)



    def directAbstractDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 132
        self.enterRecursionRule(localctx, 132, self.RULE_directAbstractDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 901
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 856
                self.match(ParaCParser.LeftParen)
                self.state = 857
                self.abstractDeclarator()
                self.state = 858
                self.match(ParaCParser.RightParen)
                self.state = 862
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 859
                        self.gccDeclaratorExtension() 
                    self.state = 864
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

                pass

            elif la_ == 2:
                self.state = 865
                self.match(ParaCParser.LeftBracket)
                self.state = 867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                    self.state = 866
                    self.typeQualifierList()


                self.state = 870
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ParaCParser.Generic - 65)) | (1 << (ParaCParser.LeftParen - 65)) | (1 << (ParaCParser.Plus - 65)) | (1 << (ParaCParser.PlusPlus - 65)) | (1 << (ParaCParser.Minus - 65)) | (1 << (ParaCParser.MinusMinus - 65)) | (1 << (ParaCParser.Star - 65)) | (1 << (ParaCParser.And - 65)) | (1 << (ParaCParser.AndAnd - 65)) | (1 << (ParaCParser.Not - 65)) | (1 << (ParaCParser.Tilde - 65)) | (1 << (ParaCParser.Identifier - 65)) | (1 << (ParaCParser.Constant - 65)) | (1 << (ParaCParser.DigitSequence - 65)) | (1 << (ParaCParser.StringLiteral - 65)))) != 0):
                    self.state = 869
                    self.assignmentExpression()


                self.state = 872
                self.match(ParaCParser.RightBracket)
                pass

            elif la_ == 3:
                self.state = 873
                self.match(ParaCParser.LeftBracket)
                self.state = 874
                self.match(ParaCParser.Static)
                self.state = 876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                    self.state = 875
                    self.typeQualifierList()


                self.state = 878
                self.assignmentExpression()
                self.state = 879
                self.match(ParaCParser.RightBracket)
                pass

            elif la_ == 4:
                self.state = 881
                self.match(ParaCParser.LeftBracket)
                self.state = 882
                self.typeQualifierList()
                self.state = 883
                self.match(ParaCParser.Static)
                self.state = 884
                self.assignmentExpression()
                self.state = 885
                self.match(ParaCParser.RightBracket)
                pass

            elif la_ == 5:
                self.state = 887
                self.match(ParaCParser.LeftBracket)
                self.state = 888
                self.match(ParaCParser.Star)
                self.state = 889
                self.match(ParaCParser.RightBracket)
                pass

            elif la_ == 6:
                self.state = 890
                self.match(ParaCParser.LeftParen)
                self.state = 892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.List) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Complex - 64)) | (1 << (ParaCParser.Noreturn - 64)) | (1 << (ParaCParser.ThreadLocal - 64)) | (1 << (ParaCParser.Identifier - 64)))) != 0):
                    self.state = 891
                    self.parameterTypeList()


                self.state = 894
                self.match(ParaCParser.RightParen)
                self.state = 898
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 895
                        self.gccDeclaratorExtension() 
                    self.state = 900
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 946
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 944
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                    if la_ == 1:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 903
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 904
                        self.match(ParaCParser.LeftBracket)
                        self.state = 906
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                            self.state = 905
                            self.typeQualifierList()


                        self.state = 909
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ParaCParser.Generic - 65)) | (1 << (ParaCParser.LeftParen - 65)) | (1 << (ParaCParser.Plus - 65)) | (1 << (ParaCParser.PlusPlus - 65)) | (1 << (ParaCParser.Minus - 65)) | (1 << (ParaCParser.MinusMinus - 65)) | (1 << (ParaCParser.Star - 65)) | (1 << (ParaCParser.And - 65)) | (1 << (ParaCParser.AndAnd - 65)) | (1 << (ParaCParser.Not - 65)) | (1 << (ParaCParser.Tilde - 65)) | (1 << (ParaCParser.Identifier - 65)) | (1 << (ParaCParser.Constant - 65)) | (1 << (ParaCParser.DigitSequence - 65)) | (1 << (ParaCParser.StringLiteral - 65)))) != 0):
                            self.state = 908
                            self.assignmentExpression()


                        self.state = 911
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 912
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 913
                        self.match(ParaCParser.LeftBracket)
                        self.state = 914
                        self.match(ParaCParser.Static)
                        self.state = 916
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.Const) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Atomic))) != 0):
                            self.state = 915
                            self.typeQualifierList()


                        self.state = 918
                        self.assignmentExpression()
                        self.state = 919
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 921
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 922
                        self.match(ParaCParser.LeftBracket)
                        self.state = 923
                        self.typeQualifierList()
                        self.state = 924
                        self.match(ParaCParser.Static)
                        self.state = 925
                        self.assignmentExpression()
                        self.state = 926
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 928
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 929
                        self.match(ParaCParser.LeftBracket)
                        self.state = 930
                        self.match(ParaCParser.Star)
                        self.state = 931
                        self.match(ParaCParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = ParaCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 932
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 933
                        self.match(ParaCParser.LeftParen)
                        self.state = 935
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.List) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Complex - 64)) | (1 << (ParaCParser.Noreturn - 64)) | (1 << (ParaCParser.ThreadLocal - 64)) | (1 << (ParaCParser.Identifier - 64)))) != 0):
                            self.state = 934
                            self.parameterTypeList()


                        self.state = 937
                        self.match(ParaCParser.RightParen)
                        self.state = 941
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 938
                                self.gccDeclaratorExtension() 
                            self.state = 943
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

                        pass

             
                self.state = 948
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypedefNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_typedefName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedefName" ):
                listener.enterTypedefName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedefName" ):
                listener.exitTypedefName(self)




    def typedefName(self):

        localctx = ParaCParser.TypedefNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_typedefName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            self.match(ParaCParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,0)


        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def initializerList(self):
            return self.getTypedRuleContext(ParaCParser.InitializerListContext,0)


        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)




    def initializer(self):

        localctx = ParaCParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_initializer)
        self._la = 0 # Token type
        try:
            self.state = 959
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.T__0, ParaCParser.T__1, ParaCParser.T__2, ParaCParser.Sizeof, ParaCParser.Spawn, ParaCParser.Alignof, ParaCParser.Generic, ParaCParser.LeftParen, ParaCParser.Plus, ParaCParser.PlusPlus, ParaCParser.Minus, ParaCParser.MinusMinus, ParaCParser.Star, ParaCParser.And, ParaCParser.AndAnd, ParaCParser.Not, ParaCParser.Tilde, ParaCParser.Identifier, ParaCParser.Constant, ParaCParser.DigitSequence, ParaCParser.StringLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 951
                self.assignmentExpression()
                pass
            elif token in [ParaCParser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 952
                self.match(ParaCParser.LeftBrace)
                self.state = 953
                self.initializerList()
                self.state = 955
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.Comma:
                    self.state = 954
                    self.match(ParaCParser.Comma)


                self.state = 957
                self.match(ParaCParser.RightBrace)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.InitializerContext)
            else:
                return self.getTypedRuleContext(ParaCParser.InitializerContext,i)


        def designation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DesignationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DesignationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_initializerList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerList" ):
                listener.enterInitializerList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerList" ):
                listener.exitInitializerList(self)




    def initializerList(self):

        localctx = ParaCParser.InitializerListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_initializerList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 962
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.LeftBracket or _la==ParaCParser.Dot:
                self.state = 961
                self.designation()


            self.state = 964
            self.initializer()
            self.state = 972
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 965
                    self.match(ParaCParser.Comma)
                    self.state = 967
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ParaCParser.LeftBracket or _la==ParaCParser.Dot:
                        self.state = 966
                        self.designation()


                    self.state = 969
                    self.initializer() 
                self.state = 974
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designatorList(self):
            return self.getTypedRuleContext(ParaCParser.DesignatorListContext,0)


        def Assign(self):
            return self.getToken(ParaCParser.Assign, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_designation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignation" ):
                listener.enterDesignation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignation" ):
                listener.exitDesignation(self)




    def designation(self):

        localctx = ParaCParser.DesignationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_designation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            self.designatorList()
            self.state = 976
            self.match(ParaCParser.Assign)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DesignatorContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DesignatorContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_designatorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignatorList" ):
                listener.enterDesignatorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignatorList" ):
                listener.exitDesignatorList(self)




    def designatorList(self):

        localctx = ParaCParser.DesignatorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_designatorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 978
                self.designator()
                self.state = 981 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ParaCParser.LeftBracket or _la==ParaCParser.Dot):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(ParaCParser.LeftBracket, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def RightBracket(self):
            return self.getToken(ParaCParser.RightBracket, 0)

        def Dot(self):
            return self.getToken(ParaCParser.Dot, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_designator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignator" ):
                listener.enterDesignator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignator" ):
                listener.exitDesignator(self)




    def designator(self):

        localctx = ParaCParser.DesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_designator)
        try:
            self.state = 989
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 983
                self.match(ParaCParser.LeftBracket)
                self.state = 984
                self.constantExpression()
                self.state = 985
                self.match(ParaCParser.RightBracket)
                pass
            elif token in [ParaCParser.Dot]:
                self.enterOuterAlt(localctx, 2)
                self.state = 987
                self.match(ParaCParser.Dot)
                self.state = 988
                self.match(ParaCParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticAssertDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StaticAssert(self):
            return self.getToken(ParaCParser.StaticAssert, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def Comma(self):
            return self.getToken(ParaCParser.Comma, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.StringLiteral)
            else:
                return self.getToken(ParaCParser.StringLiteral, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_staticAssertDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticAssertDeclaration" ):
                listener.enterStaticAssertDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticAssertDeclaration" ):
                listener.exitStaticAssertDeclaration(self)




    def staticAssertDeclaration(self):

        localctx = ParaCParser.StaticAssertDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_staticAssertDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 991
            self.match(ParaCParser.StaticAssert)
            self.state = 992
            self.match(ParaCParser.LeftParen)
            self.state = 993
            self.constantExpression()
            self.state = 994
            self.match(ParaCParser.Comma)
            self.state = 996 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 995
                self.match(ParaCParser.StringLiteral)
                self.state = 998 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ParaCParser.StringLiteral):
                    break

            self.state = 1000
            self.match(ParaCParser.RightParen)
            self.state = 1001
            self.match(ParaCParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledStatement(self):
            return self.getTypedRuleContext(ParaCParser.LabeledStatementContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionStatementContext,0)


        def tryExceptStatement(self):
            return self.getTypedRuleContext(ParaCParser.TryExceptStatementContext,0)


        def selectionStatement(self):
            return self.getTypedRuleContext(ParaCParser.SelectionStatementContext,0)


        def iterationStatement(self):
            return self.getTypedRuleContext(ParaCParser.IterationStatementContext,0)


        def jumpStatement(self):
            return self.getTypedRuleContext(ParaCParser.JumpStatementContext,0)


        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)

        def Volatile(self):
            return self.getToken(ParaCParser.Volatile, 0)

        def logicalOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.LogicalOrExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.LogicalOrExpressionContext,i)


        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Colon)
            else:
                return self.getToken(ParaCParser.Colon, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = ParaCParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1041
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1003
                self.labeledStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1004
                self.compoundStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1005
                self.expressionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1006
                self.tryExceptStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1007
                self.selectionStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1008
                self.iterationStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1009
                self.jumpStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1010
                _la = self._input.LA(1)
                if not(_la==ParaCParser.T__10 or _la==ParaCParser.T__12):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1011
                _la = self._input.LA(1)
                if not(_la==ParaCParser.T__13 or _la==ParaCParser.Volatile):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1012
                self.match(ParaCParser.LeftParen)
                self.state = 1021
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ParaCParser.Generic - 65)) | (1 << (ParaCParser.LeftParen - 65)) | (1 << (ParaCParser.Plus - 65)) | (1 << (ParaCParser.PlusPlus - 65)) | (1 << (ParaCParser.Minus - 65)) | (1 << (ParaCParser.MinusMinus - 65)) | (1 << (ParaCParser.Star - 65)) | (1 << (ParaCParser.And - 65)) | (1 << (ParaCParser.AndAnd - 65)) | (1 << (ParaCParser.Not - 65)) | (1 << (ParaCParser.Tilde - 65)) | (1 << (ParaCParser.Identifier - 65)) | (1 << (ParaCParser.Constant - 65)) | (1 << (ParaCParser.DigitSequence - 65)) | (1 << (ParaCParser.StringLiteral - 65)))) != 0):
                    self.state = 1013
                    self.logicalOrExpression()
                    self.state = 1018
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ParaCParser.Comma:
                        self.state = 1014
                        self.match(ParaCParser.Comma)
                        self.state = 1015
                        self.logicalOrExpression()
                        self.state = 1020
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1036
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.Colon:
                    self.state = 1023
                    self.match(ParaCParser.Colon)
                    self.state = 1032
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ParaCParser.Generic - 65)) | (1 << (ParaCParser.LeftParen - 65)) | (1 << (ParaCParser.Plus - 65)) | (1 << (ParaCParser.PlusPlus - 65)) | (1 << (ParaCParser.Minus - 65)) | (1 << (ParaCParser.MinusMinus - 65)) | (1 << (ParaCParser.Star - 65)) | (1 << (ParaCParser.And - 65)) | (1 << (ParaCParser.AndAnd - 65)) | (1 << (ParaCParser.Not - 65)) | (1 << (ParaCParser.Tilde - 65)) | (1 << (ParaCParser.Identifier - 65)) | (1 << (ParaCParser.Constant - 65)) | (1 << (ParaCParser.DigitSequence - 65)) | (1 << (ParaCParser.StringLiteral - 65)))) != 0):
                        self.state = 1024
                        self.logicalOrExpression()
                        self.state = 1029
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ParaCParser.Comma:
                            self.state = 1025
                            self.match(ParaCParser.Comma)
                            self.state = 1026
                            self.logicalOrExpression()
                            self.state = 1031
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 1038
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1039
                self.match(ParaCParser.RightParen)
                self.state = 1040
                self.match(ParaCParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def statement(self):
            return self.getTypedRuleContext(ParaCParser.StatementContext,0)


        def Case(self):
            return self.getToken(ParaCParser.Case, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ParaCParser.ConstantExpressionContext,0)


        def Default(self):
            return self.getToken(ParaCParser.Default, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_labeledStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledStatement" ):
                listener.enterLabeledStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledStatement" ):
                listener.exitLabeledStatement(self)




    def labeledStatement(self):

        localctx = ParaCParser.LabeledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_labeledStatement)
        try:
            self.state = 1054
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1043
                self.match(ParaCParser.Identifier)
                self.state = 1044
                self.match(ParaCParser.Colon)
                self.state = 1045
                self.statement()
                pass
            elif token in [ParaCParser.Case]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1046
                self.match(ParaCParser.Case)
                self.state = 1047
                self.constantExpression()
                self.state = 1048
                self.match(ParaCParser.Colon)
                self.state = 1049
                self.statement()
                pass
            elif token in [ParaCParser.Default]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1051
                self.match(ParaCParser.Default)
                self.state = 1052
                self.match(ParaCParser.Colon)
                self.state = 1053
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def blockItemList(self):
            return self.getTypedRuleContext(ParaCParser.BlockItemListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_compoundStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatement" ):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatement" ):
                listener.exitCompoundStatement(self)




    def compoundStatement(self):

        localctx = ParaCParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_compoundStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            self.match(ParaCParser.LeftBrace)
            self.state = 1058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__10) | (1 << ParaCParser.T__11) | (1 << ParaCParser.T__12) | (1 << ParaCParser.T__14) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Break) | (1 << ParaCParser.Case) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Continue) | (1 << ParaCParser.Default) | (1 << ParaCParser.Do) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.For) | (1 << ParaCParser.Goto) | (1 << ParaCParser.If) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.List) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Return) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Switch) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.While) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Complex - 64)) | (1 << (ParaCParser.Generic - 64)) | (1 << (ParaCParser.Noreturn - 64)) | (1 << (ParaCParser.StaticAssert - 64)) | (1 << (ParaCParser.ThreadLocal - 64)) | (1 << (ParaCParser.LeftParen - 64)) | (1 << (ParaCParser.LeftBrace - 64)) | (1 << (ParaCParser.Plus - 64)) | (1 << (ParaCParser.PlusPlus - 64)) | (1 << (ParaCParser.Minus - 64)) | (1 << (ParaCParser.MinusMinus - 64)) | (1 << (ParaCParser.Star - 64)) | (1 << (ParaCParser.And - 64)) | (1 << (ParaCParser.AndAnd - 64)) | (1 << (ParaCParser.Not - 64)) | (1 << (ParaCParser.Tilde - 64)) | (1 << (ParaCParser.Semi - 64)) | (1 << (ParaCParser.Identifier - 64)) | (1 << (ParaCParser.Constant - 64)) | (1 << (ParaCParser.DigitSequence - 64)) | (1 << (ParaCParser.StringLiteral - 64)))) != 0):
                self.state = 1057
                self.blockItemList()


            self.state = 1060
            self.match(ParaCParser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockItemListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.BlockItemContext)
            else:
                return self.getTypedRuleContext(ParaCParser.BlockItemContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_blockItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockItemList" ):
                listener.enterBlockItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockItemList" ):
                listener.exitBlockItemList(self)




    def blockItemList(self):

        localctx = ParaCParser.BlockItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_blockItemList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1063 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1062
                self.blockItem()
                self.state = 1065 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__10) | (1 << ParaCParser.T__11) | (1 << ParaCParser.T__12) | (1 << ParaCParser.T__14) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Break) | (1 << ParaCParser.Case) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Continue) | (1 << ParaCParser.Default) | (1 << ParaCParser.Do) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.For) | (1 << ParaCParser.Goto) | (1 << ParaCParser.If) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.List) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Return) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Switch) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.While) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Alignof) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Complex - 64)) | (1 << (ParaCParser.Generic - 64)) | (1 << (ParaCParser.Noreturn - 64)) | (1 << (ParaCParser.StaticAssert - 64)) | (1 << (ParaCParser.ThreadLocal - 64)) | (1 << (ParaCParser.LeftParen - 64)) | (1 << (ParaCParser.LeftBrace - 64)) | (1 << (ParaCParser.Plus - 64)) | (1 << (ParaCParser.PlusPlus - 64)) | (1 << (ParaCParser.Minus - 64)) | (1 << (ParaCParser.MinusMinus - 64)) | (1 << (ParaCParser.Star - 64)) | (1 << (ParaCParser.And - 64)) | (1 << (ParaCParser.AndAnd - 64)) | (1 << (ParaCParser.Not - 64)) | (1 << (ParaCParser.Tilde - 64)) | (1 << (ParaCParser.Semi - 64)) | (1 << (ParaCParser.Identifier - 64)) | (1 << (ParaCParser.Constant - 64)) | (1 << (ParaCParser.DigitSequence - 64)) | (1 << (ParaCParser.StringLiteral - 64)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(ParaCParser.StatementContext,0)


        def declaration(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_blockItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockItem" ):
                listener.enterBlockItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockItem" ):
                listener.exitBlockItem(self)




    def blockItem(self):

        localctx = ParaCParser.BlockItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_blockItem)
        try:
            self.state = 1069
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1067
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1068
                self.declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = ParaCParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_expressionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ParaCParser.Generic - 65)) | (1 << (ParaCParser.LeftParen - 65)) | (1 << (ParaCParser.Plus - 65)) | (1 << (ParaCParser.PlusPlus - 65)) | (1 << (ParaCParser.Minus - 65)) | (1 << (ParaCParser.MinusMinus - 65)) | (1 << (ParaCParser.Star - 65)) | (1 << (ParaCParser.And - 65)) | (1 << (ParaCParser.AndAnd - 65)) | (1 << (ParaCParser.Not - 65)) | (1 << (ParaCParser.Tilde - 65)) | (1 << (ParaCParser.Identifier - 65)) | (1 << (ParaCParser.Constant - 65)) | (1 << (ParaCParser.DigitSequence - 65)) | (1 << (ParaCParser.StringLiteral - 65)))) != 0):
                self.state = 1071
                self.expression()


            self.state = 1074
            self.match(ParaCParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryExceptStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def exceptBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ExceptBlockContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ExceptBlockContext,i)


        def finallyBlock(self):
            return self.getTypedRuleContext(ParaCParser.FinallyBlockContext,0)


        def elseBlock(self):
            return self.getTypedRuleContext(ParaCParser.ElseBlockContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_tryExceptStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryExceptStatement" ):
                listener.enterTryExceptStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryExceptStatement" ):
                listener.exitTryExceptStatement(self)




    def tryExceptStatement(self):

        localctx = ParaCParser.TryExceptStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_tryExceptStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1076
            self.match(ParaCParser.T__14)
            self.state = 1077
            self.compoundStatement()
            self.state = 1079 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1078
                self.exceptBlock()
                self.state = 1081 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ParaCParser.T__15):
                    break

            self.state = 1091
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.state = 1083
                self.finallyBlock()
                self.state = 1085
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                if la_ == 1:
                    self.state = 1084
                    self.elseBlock()



            elif la_ == 2:
                self.state = 1087
                self.elseBlock()
                self.state = 1089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParaCParser.T__16:
                    self.state = 1088
                    self.finallyBlock()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Identifier)
            else:
                return self.getToken(ParaCParser.Identifier, i)

        def identifierList(self):
            return self.getTypedRuleContext(ParaCParser.IdentifierListContext,0)


        def As(self):
            return self.getToken(ParaCParser.As, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_exceptBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptBlock" ):
                listener.enterExceptBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptBlock" ):
                listener.exitExceptBlock(self)




    def exceptBlock(self):

        localctx = ParaCParser.ExceptBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_exceptBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1093
            self.match(ParaCParser.T__15)
            self.state = 1094
            self.match(ParaCParser.LeftParen)
            self.state = 1097
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 1095
                self.match(ParaCParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 1096
                self.identifierList()
                pass


            self.state = 1099
            self.match(ParaCParser.RightParen)
            self.state = 1102
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.As:
                self.state = 1100
                self.match(ParaCParser.As)
                self.state = 1101
                self.match(ParaCParser.Identifier)


            self.state = 1104
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FinallyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_finallyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyBlock" ):
                listener.enterFinallyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyBlock" ):
                listener.exitFinallyBlock(self)




    def finallyBlock(self):

        localctx = ParaCParser.FinallyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_finallyBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1106
            self.match(ParaCParser.T__16)
            self.state = 1107
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Else(self):
            return self.getToken(ParaCParser.Else, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_elseBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseBlock" ):
                listener.enterElseBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseBlock" ):
                listener.exitElseBlock(self)




    def elseBlock(self):

        localctx = ParaCParser.ElseBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_elseBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1109
            self.match(ParaCParser.Else)
            self.state = 1110
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(ParaCParser.If, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.StatementContext)
            else:
                return self.getTypedRuleContext(ParaCParser.StatementContext,i)


        def Else(self):
            return self.getToken(ParaCParser.Else, 0)

        def Switch(self):
            return self.getToken(ParaCParser.Switch, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_selectionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectionStatement" ):
                listener.enterSelectionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectionStatement" ):
                listener.exitSelectionStatement(self)




    def selectionStatement(self):

        localctx = ParaCParser.SelectionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_selectionStatement)
        try:
            self.state = 1127
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.If]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1112
                self.match(ParaCParser.If)
                self.state = 1113
                self.match(ParaCParser.LeftParen)
                self.state = 1114
                self.expression()
                self.state = 1115
                self.match(ParaCParser.RightParen)
                self.state = 1116
                self.statement()
                self.state = 1119
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                if la_ == 1:
                    self.state = 1117
                    self.match(ParaCParser.Else)
                    self.state = 1118
                    self.statement()


                pass
            elif token in [ParaCParser.Switch]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1121
                self.match(ParaCParser.Switch)
                self.state = 1122
                self.match(ParaCParser.LeftParen)
                self.state = 1123
                self.expression()
                self.state = 1124
                self.match(ParaCParser.RightParen)
                self.state = 1125
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(ParaCParser.While, 0)

        def LeftParen(self):
            return self.getToken(ParaCParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(ParaCParser.RightParen, 0)

        def statement(self):
            return self.getTypedRuleContext(ParaCParser.StatementContext,0)


        def Do(self):
            return self.getToken(ParaCParser.Do, 0)

        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)

        def For(self):
            return self.getToken(ParaCParser.For, 0)

        def forCondition(self):
            return self.getTypedRuleContext(ParaCParser.ForConditionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_iterationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterationStatement" ):
                listener.enterIterationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterationStatement" ):
                listener.exitIterationStatement(self)




    def iterationStatement(self):

        localctx = ParaCParser.IterationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_iterationStatement)
        try:
            self.state = 1149
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParaCParser.While]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1129
                self.match(ParaCParser.While)
                self.state = 1130
                self.match(ParaCParser.LeftParen)
                self.state = 1131
                self.expression()
                self.state = 1132
                self.match(ParaCParser.RightParen)
                self.state = 1133
                self.statement()
                pass
            elif token in [ParaCParser.Do]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1135
                self.match(ParaCParser.Do)
                self.state = 1136
                self.statement()
                self.state = 1137
                self.match(ParaCParser.While)
                self.state = 1138
                self.match(ParaCParser.LeftParen)
                self.state = 1139
                self.expression()
                self.state = 1140
                self.match(ParaCParser.RightParen)
                self.state = 1141
                self.match(ParaCParser.Semi)
                pass
            elif token in [ParaCParser.For]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1143
                self.match(ParaCParser.For)
                self.state = 1144
                self.match(ParaCParser.LeftParen)
                self.state = 1145
                self.forCondition()
                self.state = 1146
                self.match(ParaCParser.RightParen)
                self.state = 1147
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Semi)
            else:
                return self.getToken(ParaCParser.Semi, i)

        def forDeclaration(self):
            return self.getTypedRuleContext(ParaCParser.ForDeclarationContext,0)


        def forExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ForExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ForExpressionContext,i)


        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_forCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForCondition" ):
                listener.enterForCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForCondition" ):
                listener.exitForCondition(self)




    def forCondition(self):

        localctx = ParaCParser.ForConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_forCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1155
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.state = 1151
                self.forDeclaration()
                pass

            elif la_ == 2:
                self.state = 1153
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ParaCParser.Generic - 65)) | (1 << (ParaCParser.LeftParen - 65)) | (1 << (ParaCParser.Plus - 65)) | (1 << (ParaCParser.PlusPlus - 65)) | (1 << (ParaCParser.Minus - 65)) | (1 << (ParaCParser.MinusMinus - 65)) | (1 << (ParaCParser.Star - 65)) | (1 << (ParaCParser.And - 65)) | (1 << (ParaCParser.AndAnd - 65)) | (1 << (ParaCParser.Not - 65)) | (1 << (ParaCParser.Tilde - 65)) | (1 << (ParaCParser.Identifier - 65)) | (1 << (ParaCParser.Constant - 65)) | (1 << (ParaCParser.DigitSequence - 65)) | (1 << (ParaCParser.StringLiteral - 65)))) != 0):
                    self.state = 1152
                    self.expression()


                pass


            self.state = 1157
            self.match(ParaCParser.Semi)
            self.state = 1159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ParaCParser.Generic - 65)) | (1 << (ParaCParser.LeftParen - 65)) | (1 << (ParaCParser.Plus - 65)) | (1 << (ParaCParser.PlusPlus - 65)) | (1 << (ParaCParser.Minus - 65)) | (1 << (ParaCParser.MinusMinus - 65)) | (1 << (ParaCParser.Star - 65)) | (1 << (ParaCParser.And - 65)) | (1 << (ParaCParser.AndAnd - 65)) | (1 << (ParaCParser.Not - 65)) | (1 << (ParaCParser.Tilde - 65)) | (1 << (ParaCParser.Identifier - 65)) | (1 << (ParaCParser.Constant - 65)) | (1 << (ParaCParser.DigitSequence - 65)) | (1 << (ParaCParser.StringLiteral - 65)))) != 0):
                self.state = 1158
                self.forExpression()


            self.state = 1161
            self.match(ParaCParser.Semi)
            self.state = 1163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ParaCParser.Generic - 65)) | (1 << (ParaCParser.LeftParen - 65)) | (1 << (ParaCParser.Plus - 65)) | (1 << (ParaCParser.PlusPlus - 65)) | (1 << (ParaCParser.Minus - 65)) | (1 << (ParaCParser.MinusMinus - 65)) | (1 << (ParaCParser.Star - 65)) | (1 << (ParaCParser.And - 65)) | (1 << (ParaCParser.AndAnd - 65)) | (1 << (ParaCParser.Not - 65)) | (1 << (ParaCParser.Tilde - 65)) | (1 << (ParaCParser.Identifier - 65)) | (1 << (ParaCParser.Constant - 65)) | (1 << (ParaCParser.DigitSequence - 65)) | (1 << (ParaCParser.StringLiteral - 65)))) != 0):
                self.state = 1162
                self.forExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiersContext,0)


        def initDeclaratorList(self):
            return self.getTypedRuleContext(ParaCParser.InitDeclaratorListContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_forDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForDeclaration" ):
                listener.enterForDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForDeclaration" ):
                listener.exitForDeclaration(self)




    def forDeclaration(self):

        localctx = ParaCParser.ForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_forDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1165
            self.declarationSpecifiers()
            self.state = 1167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (ParaCParser.LeftParen - 70)) | (1 << (ParaCParser.Star - 70)) | (1 << (ParaCParser.Caret - 70)) | (1 << (ParaCParser.Identifier - 70)))) != 0):
                self.state = 1166
                self.initDeclaratorList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(ParaCParser.AssignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_forExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForExpression" ):
                listener.enterForExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForExpression" ):
                listener.exitForExpression(self)




    def forExpression(self):

        localctx = ParaCParser.ForExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_forExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1169
            self.assignmentExpression()
            self.state = 1174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.Comma:
                self.state = 1170
                self.match(ParaCParser.Comma)
                self.state = 1171
                self.assignmentExpression()
                self.state = 1176
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JumpStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)

        def Goto(self):
            return self.getToken(ParaCParser.Goto, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Return(self):
            return self.getToken(ParaCParser.Return, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.UnaryExpressionContext,0)


        def Continue(self):
            return self.getToken(ParaCParser.Continue, 0)

        def Break(self):
            return self.getToken(ParaCParser.Break, 0)

        def expression(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_jumpStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpStatement" ):
                listener.enterJumpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpStatement" ):
                listener.exitJumpStatement(self)




    def jumpStatement(self):

        localctx = ParaCParser.JumpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_jumpStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1186
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.state = 1177
                self.match(ParaCParser.Goto)
                self.state = 1178
                self.match(ParaCParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 1179
                _la = self._input.LA(1)
                if not(_la==ParaCParser.Break or _la==ParaCParser.Continue):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                self.state = 1180
                self.match(ParaCParser.Return)
                self.state = 1182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__1) | (1 << ParaCParser.T__2) | (1 << ParaCParser.Sizeof) | (1 << ParaCParser.Spawn) | (1 << ParaCParser.Alignof))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ParaCParser.Generic - 65)) | (1 << (ParaCParser.LeftParen - 65)) | (1 << (ParaCParser.Plus - 65)) | (1 << (ParaCParser.PlusPlus - 65)) | (1 << (ParaCParser.Minus - 65)) | (1 << (ParaCParser.MinusMinus - 65)) | (1 << (ParaCParser.Star - 65)) | (1 << (ParaCParser.And - 65)) | (1 << (ParaCParser.AndAnd - 65)) | (1 << (ParaCParser.Not - 65)) | (1 << (ParaCParser.Tilde - 65)) | (1 << (ParaCParser.Identifier - 65)) | (1 << (ParaCParser.Constant - 65)) | (1 << (ParaCParser.DigitSequence - 65)) | (1 << (ParaCParser.StringLiteral - 65)))) != 0):
                    self.state = 1181
                    self.expression()


                pass

            elif la_ == 4:
                self.state = 1184
                self.match(ParaCParser.Goto)
                self.state = 1185
                self.unaryExpression()
                pass


            self.state = 1188
            self.match(ParaCParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompilationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(ParaCParser.EOF, 0)

        def translationUnit(self):
            return self.getTypedRuleContext(ParaCParser.TranslationUnitContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)




    def compilationUnit(self):

        localctx = ParaCParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.ExtensionTask) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.List) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Complex - 64)) | (1 << (ParaCParser.Noreturn - 64)) | (1 << (ParaCParser.StaticAssert - 64)) | (1 << (ParaCParser.ThreadLocal - 64)) | (1 << (ParaCParser.LeftParen - 64)) | (1 << (ParaCParser.Star - 64)) | (1 << (ParaCParser.Caret - 64)) | (1 << (ParaCParser.DecoratorSign - 64)) | (1 << (ParaCParser.Semi - 64)) | (1 << (ParaCParser.Identifier - 64)))) != 0):
                self.state = 1190
                self.translationUnit()


            self.state = 1193
            self.match(ParaCParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TranslationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externalItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ExternalItemContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ExternalItemContext,i)


        def Semi(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Semi)
            else:
                return self.getToken(ParaCParser.Semi, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_translationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslationUnit" ):
                listener.enterTranslationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslationUnit" ):
                listener.exitTranslationUnit(self)




    def translationUnit(self):

        localctx = ParaCParser.TranslationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_translationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1197 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1197
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ParaCParser.T__0, ParaCParser.T__3, ParaCParser.T__4, ParaCParser.T__5, ParaCParser.T__6, ParaCParser.T__7, ParaCParser.T__8, ParaCParser.T__9, ParaCParser.T__11, ParaCParser.Auto, ParaCParser.Char, ParaCParser.Const, ParaCParser.Double, ParaCParser.ExtensionTask, ParaCParser.Entry, ParaCParser.Enum, ParaCParser.Extern, ParaCParser.Float, ParaCParser.Inline, ParaCParser.Int, ParaCParser.Lambda, ParaCParser.List, ParaCParser.Long, ParaCParser.Register, ParaCParser.Restrict, ParaCParser.Short, ParaCParser.Signed, ParaCParser.Static, ParaCParser.Status, ParaCParser.Struct, ParaCParser.Typeof, ParaCParser.Typedef, ParaCParser.Union, ParaCParser.Unsigned, ParaCParser.Void, ParaCParser.Volatile, ParaCParser.Alignas, ParaCParser.Atomic, ParaCParser.Bool, ParaCParser.Complex, ParaCParser.Noreturn, ParaCParser.StaticAssert, ParaCParser.ThreadLocal, ParaCParser.LeftParen, ParaCParser.Star, ParaCParser.Caret, ParaCParser.DecoratorSign, ParaCParser.Identifier]:
                    self.state = 1195
                    self.externalItem()
                    pass
                elif token in [ParaCParser.Semi]:
                    self.state = 1196
                    self.match(ParaCParser.Semi)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1199 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.ExtensionTask) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.List) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Complex - 64)) | (1 << (ParaCParser.Noreturn - 64)) | (1 << (ParaCParser.StaticAssert - 64)) | (1 << (ParaCParser.ThreadLocal - 64)) | (1 << (ParaCParser.LeftParen - 64)) | (1 << (ParaCParser.Star - 64)) | (1 << (ParaCParser.Caret - 64)) | (1 << (ParaCParser.DecoratorSign - 64)) | (1 << (ParaCParser.Semi - 64)) | (1 << (ParaCParser.Identifier - 64)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ParaCParser.RULE_externalItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExternalFunctionDefinitionContext(ExternalItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.ExternalItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionDefinition(self):
            return self.getTypedRuleContext(ParaCParser.FunctionDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalFunctionDefinition" ):
                listener.enterExternalFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalFunctionDefinition" ):
                listener.exitExternalFunctionDefinition(self)


    class ExternalDeclarationContext(ExternalItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.ExternalItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def declaration(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalDeclaration" ):
                listener.enterExternalDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalDeclaration" ):
                listener.exitExternalDeclaration(self)


    class ExternalExtTaskDefinitionContext(ExternalItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.ExternalItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def extensionTaskDefinition(self):
            return self.getTypedRuleContext(ParaCParser.ExtensionTaskDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalExtTaskDefinition" ):
                listener.enterExternalExtTaskDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalExtTaskDefinition" ):
                listener.exitExternalExtTaskDefinition(self)



    def externalItem(self):

        localctx = ParaCParser.ExternalItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_externalItem)
        try:
            self.state = 1204
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                localctx = ParaCParser.ExternalFunctionDefinitionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1201
                self.functionDefinition()
                pass

            elif la_ == 2:
                localctx = ParaCParser.ExternalDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1202
                self.declaration()
                pass

            elif la_ == 3:
                localctx = ParaCParser.ExternalExtTaskDefinitionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1203
                self.extensionTaskDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ParaCParser.RULE_functionDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class StandardFunctionDefinitionContext(FunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.FunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionDeclarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.FunctionDeclarationSpecifiersContext,0)

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)

        def compoundStatement(self):
            return self.getTypedRuleContext(ParaCParser.CompoundStatementContext,0)

        def declarationList(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandardFunctionDefinition" ):
                listener.enterStandardFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandardFunctionDefinition" ):
                listener.exitStandardFunctionDefinition(self)


    class SimpleFunctionDefinitionContext(FunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ParaCParser.FunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionDeclarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.FunctionDeclarationSpecifiersContext,0)

        def declarator(self):
            return self.getTypedRuleContext(ParaCParser.DeclaratorContext,0)

        def expressionLambda(self):
            return self.getTypedRuleContext(ParaCParser.ExpressionLambdaContext,0)

        def Semi(self):
            return self.getToken(ParaCParser.Semi, 0)
        def declarationList(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleFunctionDefinition" ):
                listener.enterSimpleFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleFunctionDefinition" ):
                listener.exitSimpleFunctionDefinition(self)



    def functionDefinition(self):

        localctx = ParaCParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.state = 1221
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                localctx = ParaCParser.StandardFunctionDefinitionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1206
                self.functionDeclarationSpecifiers()
                self.state = 1207
                self.declarator()
                self.state = 1209
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.List) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Complex - 64)) | (1 << (ParaCParser.Noreturn - 64)) | (1 << (ParaCParser.StaticAssert - 64)) | (1 << (ParaCParser.ThreadLocal - 64)) | (1 << (ParaCParser.Identifier - 64)))) != 0):
                    self.state = 1208
                    self.declarationList()


                self.state = 1211
                self.compoundStatement()
                pass

            elif la_ == 2:
                localctx = ParaCParser.SimpleFunctionDefinitionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1213
                self.functionDeclarationSpecifiers()
                self.state = 1214
                self.declarator()
                self.state = 1216
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.List) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Complex - 64)) | (1 << (ParaCParser.Noreturn - 64)) | (1 << (ParaCParser.StaticAssert - 64)) | (1 << (ParaCParser.ThreadLocal - 64)) | (1 << (ParaCParser.Identifier - 64)))) != 0):
                    self.state = 1215
                    self.declarationList()


                self.state = 1218
                self.expressionLambda()
                self.state = 1219
                self.match(ParaCParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDeclarationSpecifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decoratorSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DecoratorSpecifierContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DecoratorSpecifierContext,i)


        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationSpecifiersContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_functionDeclarationSpecifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDeclarationSpecifiers" ):
                listener.enterFunctionDeclarationSpecifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDeclarationSpecifiers" ):
                listener.exitFunctionDeclarationSpecifiers(self)




    def functionDeclarationSpecifiers(self):

        localctx = ParaCParser.FunctionDeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_functionDeclarationSpecifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParaCParser.DecoratorSign:
                self.state = 1223
                self.decoratorSpecifier()
                self.state = 1228
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1230
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.state = 1229
                self.declarationSpecifiers()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecoratorSign(self):
            return self.getToken(ParaCParser.DecoratorSign, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_decoratorSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecoratorSpecifier" ):
                listener.enterDecoratorSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecoratorSpecifier" ):
                listener.exitDecoratorSpecifier(self)




    def decoratorSpecifier(self):

        localctx = ParaCParser.DecoratorSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_decoratorSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1232
            self.match(ParaCParser.DecoratorSign)
            self.state = 1233
            self.match(ParaCParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionTaskDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExtensionTask(self):
            return self.getToken(ParaCParser.ExtensionTask, 0)

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def directDeclarator(self):
            return self.getTypedRuleContext(ParaCParser.DirectDeclaratorContext,0)


        def extensionTaskParameterList(self):
            return self.getTypedRuleContext(ParaCParser.ExtensionTaskParameterListContext,0)


        def declarationList(self):
            return self.getTypedRuleContext(ParaCParser.DeclarationListContext,0)


        def extensionTaskLambda(self):
            return self.getTypedRuleContext(ParaCParser.ExtensionTaskLambdaContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_extensionTaskDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionTaskDefinition" ):
                listener.enterExtensionTaskDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionTaskDefinition" ):
                listener.exitExtensionTaskDefinition(self)




    def extensionTaskDefinition(self):

        localctx = ParaCParser.ExtensionTaskDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_extensionTaskDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1235
            self.match(ParaCParser.ExtensionTask)
            self.state = 1236
            self.match(ParaCParser.Identifier)
            self.state = 1237
            self.directDeclarator(0)
            self.state = 1239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.List) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Complex - 64)) | (1 << (ParaCParser.Noreturn - 64)) | (1 << (ParaCParser.StaticAssert - 64)) | (1 << (ParaCParser.ThreadLocal - 64)) | (1 << (ParaCParser.Identifier - 64)))) != 0):
                self.state = 1238
                self.declarationList()


            self.state = 1241
            self.extensionTaskParameterList()
            self.state = 1243
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.LambdaStartBlock:
                self.state = 1242
                self.extensionTaskLambda()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionTaskParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(ParaCParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(ParaCParser.RightBrace, 0)

        def extensionTaskParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.ExtensionTaskParameterContext)
            else:
                return self.getTypedRuleContext(ParaCParser.ExtensionTaskParameterContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ParaCParser.Comma)
            else:
                return self.getToken(ParaCParser.Comma, i)

        def getRuleIndex(self):
            return ParaCParser.RULE_extensionTaskParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionTaskParameterList" ):
                listener.enterExtensionTaskParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionTaskParameterList" ):
                listener.exitExtensionTaskParameterList(self)




    def extensionTaskParameterList(self):

        localctx = ParaCParser.ExtensionTaskParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_extensionTaskParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1245
            self.match(ParaCParser.LeftBrace)
            self.state = 1254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ParaCParser.Identifier:
                self.state = 1246
                self.extensionTaskParameter()
                self.state = 1251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParaCParser.Comma:
                    self.state = 1247
                    self.match(ParaCParser.Comma)
                    self.state = 1248
                    self.extensionTaskParameter()
                    self.state = 1253
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1256
            self.match(ParaCParser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionTaskParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ParaCParser.Identifier, 0)

        def Colon(self):
            return self.getToken(ParaCParser.Colon, 0)

        def primaryExpression(self):
            return self.getTypedRuleContext(ParaCParser.PrimaryExpressionContext,0)


        def getRuleIndex(self):
            return ParaCParser.RULE_extensionTaskParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionTaskParameter" ):
                listener.enterExtensionTaskParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionTaskParameter" ):
                listener.exitExtensionTaskParameter(self)




    def extensionTaskParameter(self):

        localctx = ParaCParser.ExtensionTaskParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_extensionTaskParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1258
            self.match(ParaCParser.Identifier)
            self.state = 1259
            self.match(ParaCParser.Colon)
            self.state = 1260
            self.primaryExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionTaskLambdaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LambdaStartBlock(self):
            return self.getToken(ParaCParser.LambdaStartBlock, 0)

        def ExtensionTaskLambda(self):
            return self.getToken(ParaCParser.ExtensionTaskLambda, 0)

        def getRuleIndex(self):
            return ParaCParser.RULE_extensionTaskLambda

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionTaskLambda" ):
                listener.enterExtensionTaskLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionTaskLambda" ):
                listener.exitExtensionTaskLambda(self)




    def extensionTaskLambda(self):

        localctx = ParaCParser.ExtensionTaskLambdaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_extensionTaskLambda)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1262
            self.match(ParaCParser.LambdaStartBlock)
            self.state = 1263
            self.match(ParaCParser.ExtensionTaskLambda)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParaCParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(ParaCParser.DeclarationContext,i)


        def getRuleIndex(self):
            return ParaCParser.RULE_declarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationList" ):
                listener.enterDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationList" ):
                listener.exitDeclarationList(self)




    def declarationList(self):

        localctx = ParaCParser.DeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_declarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1266 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1265
                self.declaration()
                self.state = 1268 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ParaCParser.T__0) | (1 << ParaCParser.T__3) | (1 << ParaCParser.T__4) | (1 << ParaCParser.T__5) | (1 << ParaCParser.T__6) | (1 << ParaCParser.T__7) | (1 << ParaCParser.T__8) | (1 << ParaCParser.T__9) | (1 << ParaCParser.T__11) | (1 << ParaCParser.Auto) | (1 << ParaCParser.Char) | (1 << ParaCParser.Const) | (1 << ParaCParser.Double) | (1 << ParaCParser.Entry) | (1 << ParaCParser.Enum) | (1 << ParaCParser.Extern) | (1 << ParaCParser.Float) | (1 << ParaCParser.Inline) | (1 << ParaCParser.Int) | (1 << ParaCParser.Lambda) | (1 << ParaCParser.List) | (1 << ParaCParser.Long) | (1 << ParaCParser.Register) | (1 << ParaCParser.Restrict) | (1 << ParaCParser.Short) | (1 << ParaCParser.Signed) | (1 << ParaCParser.Static) | (1 << ParaCParser.Status) | (1 << ParaCParser.Struct) | (1 << ParaCParser.Typeof) | (1 << ParaCParser.Typedef) | (1 << ParaCParser.Union) | (1 << ParaCParser.Unsigned) | (1 << ParaCParser.Void) | (1 << ParaCParser.Volatile) | (1 << ParaCParser.Alignas) | (1 << ParaCParser.Atomic) | (1 << ParaCParser.Bool))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ParaCParser.Complex - 64)) | (1 << (ParaCParser.Noreturn - 64)) | (1 << (ParaCParser.StaticAssert - 64)) | (1 << (ParaCParser.ThreadLocal - 64)) | (1 << (ParaCParser.Identifier - 64)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[12] = self.castOrConvertExpression_sempred
        self._predicates[35] = self.typeSpecifier_sempred
        self._predicates[52] = self.directDeclarator_sempred
        self._predicates[66] = self.directAbstractDeclarator_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def castOrConvertExpression_sempred(self, localctx:CastOrConvertExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

    def typeSpecifier_sempred(self, localctx:TypeSpecifierContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def directDeclarator_sempred(self, localctx:DirectDeclaratorContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 3)
         

    def directAbstractDeclarator_sempred(self, localctx:DirectAbstractDeclaratorContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         




