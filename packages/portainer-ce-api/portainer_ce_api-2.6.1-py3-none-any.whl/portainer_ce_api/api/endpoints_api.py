# coding: utf-8

"""
    PortainerCE API

    Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API endpoints require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API endpoint has an associated access policy, it is documented in the description of each endpoint.  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the endpoints with this access policy.  ### Authenticated access  Authentication is required to access the endpoints with this access policy.  ### Restricted access  Authentication is required to access the endpoints with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the endpoints with this access policy.  # Execute Docker requests  Portainer **DOES NOT** expose specific endpoints to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API endpoint (which is not documented below due to Swagger limitations). This endpoint has a restricted access policy so you still need to be authenticated to be able to query this endpoint. Any query on this endpoint will be proxied to the Docker API of the associated endpoint (requests and responses objects are the same as documented in the Docker API).  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).   # noqa: E501

    OpenAPI spec version: 2.6.0
    Contact: info@portainer.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from portainer_ce_api.api_client import ApiClient


class EndpointsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def endpoint_create(self, name, endpoint_creation_type, **kwargs):  # noqa: E501
        """Create a new endpoint  # noqa: E501

        Create a new endpoint that will be used to manage an environment. **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_create(name, endpoint_creation_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Name that will be used to identify this endpoint (example: my-endpoint) (required)
        :param int endpoint_creation_type: Environment type. Value must be one of: 1 (Local Docker environment), 2 (Agent environment), 3 (Azure environment), 4 (Edge agent environment) or 5 (Local Kubernetes Environment (required)
        :param str url: URL or IP address of a Docker host (example: docker.mydomain.tld:2375). Defaults to local if not specified (Linux: /var/run/docker.sock, Windows: //./pipe/docker_engine)
        :param str public_url: URL or IP address where exposed containers will be reachable. Defaults to URL if not specified (example: docker.mydomain.tld:2375)
        :param int group_id: Endpoint group identifier. If not specified will default to 1 (unassigned).
        :param bool tls: Require TLS to connect against this endpoint
        :param bool tls_skip_verify: Skip server verification when using TLS
        :param bool tls_skip_client_verify: Skip client verification when using TLS
        :param file tlsca_cert_file: TLS CA certificate file
        :param file tls_cert_file: TLS client certificate file
        :param file tls_key_file: TLS client key file
        :param str azure_application_id: Azure application ID. Required if endpoint type is set to 3
        :param str azure_tenant_id: Azure tenant ID. Required if endpoint type is set to 3
        :param str azure_authentication_key: Azure authentication key. Required if endpoint type is set to 3
        :param list[int] tag_i_ds: List of tag identifiers to which this endpoint is associated
        :param int edge_checkin_interval: The check in interval for edge agent (in seconds)
        :return: PortainerEndpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoint_create_with_http_info(name, endpoint_creation_type, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoint_create_with_http_info(name, endpoint_creation_type, **kwargs)  # noqa: E501
            return data

    def endpoint_create_with_http_info(self, name, endpoint_creation_type, **kwargs):  # noqa: E501
        """Create a new endpoint  # noqa: E501

        Create a new endpoint that will be used to manage an environment. **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_create_with_http_info(name, endpoint_creation_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Name that will be used to identify this endpoint (example: my-endpoint) (required)
        :param int endpoint_creation_type: Environment type. Value must be one of: 1 (Local Docker environment), 2 (Agent environment), 3 (Azure environment), 4 (Edge agent environment) or 5 (Local Kubernetes Environment (required)
        :param str url: URL or IP address of a Docker host (example: docker.mydomain.tld:2375). Defaults to local if not specified (Linux: /var/run/docker.sock, Windows: //./pipe/docker_engine)
        :param str public_url: URL or IP address where exposed containers will be reachable. Defaults to URL if not specified (example: docker.mydomain.tld:2375)
        :param int group_id: Endpoint group identifier. If not specified will default to 1 (unassigned).
        :param bool tls: Require TLS to connect against this endpoint
        :param bool tls_skip_verify: Skip server verification when using TLS
        :param bool tls_skip_client_verify: Skip client verification when using TLS
        :param file tlsca_cert_file: TLS CA certificate file
        :param file tls_cert_file: TLS client certificate file
        :param file tls_key_file: TLS client key file
        :param str azure_application_id: Azure application ID. Required if endpoint type is set to 3
        :param str azure_tenant_id: Azure tenant ID. Required if endpoint type is set to 3
        :param str azure_authentication_key: Azure authentication key. Required if endpoint type is set to 3
        :param list[int] tag_i_ds: List of tag identifiers to which this endpoint is associated
        :param int edge_checkin_interval: The check in interval for edge agent (in seconds)
        :return: PortainerEndpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'endpoint_creation_type', 'url', 'public_url', 'group_id', 'tls', 'tls_skip_verify', 'tls_skip_client_verify', 'tlsca_cert_file', 'tls_cert_file', 'tls_key_file', 'azure_application_id', 'azure_tenant_id', 'azure_authentication_key', 'tag_i_ds', 'edge_checkin_interval']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoint_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `endpoint_create`")  # noqa: E501
        # verify the required parameter 'endpoint_creation_type' is set
        if self.api_client.client_side_validation and ('endpoint_creation_type' not in params or
                                                       params['endpoint_creation_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `endpoint_creation_type` when calling `endpoint_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('Name', params['name']))  # noqa: E501
        if 'endpoint_creation_type' in params:
            form_params.append(('EndpointCreationType', params['endpoint_creation_type']))  # noqa: E501
        if 'url' in params:
            form_params.append(('URL', params['url']))  # noqa: E501
        if 'public_url' in params:
            form_params.append(('PublicURL', params['public_url']))  # noqa: E501
        if 'group_id' in params:
            form_params.append(('GroupID', params['group_id']))  # noqa: E501
        if 'tls' in params:
            form_params.append(('TLS', params['tls']))  # noqa: E501
        if 'tls_skip_verify' in params:
            form_params.append(('TLSSkipVerify', params['tls_skip_verify']))  # noqa: E501
        if 'tls_skip_client_verify' in params:
            form_params.append(('TLSSkipClientVerify', params['tls_skip_client_verify']))  # noqa: E501
        if 'tlsca_cert_file' in params:
            local_var_files['TLSCACertFile'] = params['tlsca_cert_file']  # noqa: E501
        if 'tls_cert_file' in params:
            local_var_files['TLSCertFile'] = params['tls_cert_file']  # noqa: E501
        if 'tls_key_file' in params:
            local_var_files['TLSKeyFile'] = params['tls_key_file']  # noqa: E501
        if 'azure_application_id' in params:
            form_params.append(('AzureApplicationID', params['azure_application_id']))  # noqa: E501
        if 'azure_tenant_id' in params:
            form_params.append(('AzureTenantID', params['azure_tenant_id']))  # noqa: E501
        if 'azure_authentication_key' in params:
            form_params.append(('AzureAuthenticationKey', params['azure_authentication_key']))  # noqa: E501
        if 'tag_i_ds' in params:
            form_params.append(('TagIDs', params['tag_i_ds']))  # noqa: E501
            collection_formats['TagIDs'] = 'csv'  # noqa: E501
        if 'edge_checkin_interval' in params:
            form_params.append(('EdgeCheckinInterval', params['edge_checkin_interval']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwt']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortainerEndpoint',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoint_delete(self, id, **kwargs):  # noqa: E501
        """Remove an endpoint  # noqa: E501

        Remove an endpoint. **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Endpoint identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoint_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoint_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def endpoint_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Remove an endpoint  # noqa: E501

        Remove an endpoint. **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Endpoint identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoint_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `endpoint_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwt']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoint_inspect(self, id, **kwargs):  # noqa: E501
        """Inspect an endpoint  # noqa: E501

        Retrieve details about an endpoint. **Access policy**: restricted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_inspect(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Endpoint identifier (required)
        :return: PortainerEndpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoint_inspect_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoint_inspect_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def endpoint_inspect_with_http_info(self, id, **kwargs):  # noqa: E501
        """Inspect an endpoint  # noqa: E501

        Retrieve details about an endpoint. **Access policy**: restricted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_inspect_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Endpoint identifier (required)
        :return: PortainerEndpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoint_inspect" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `endpoint_inspect`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwt']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortainerEndpoint',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoint_list(self, **kwargs):  # noqa: E501
        """List endpoints  # noqa: E501

        List all endpoints based on the current user authorizations. Will return all endpoints if using an administrator account otherwise it will only return authorized endpoints. **Access policy**: restricted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: Start searching from
        :param str search: Search query
        :param int group_id: List endpoints of this group
        :param int limit: Limit results to this value
        :param int type: List endpoints of this type
        :param list[int] tag_ids: search endpoints with these tags (depends on tagsPartialMatch)
        :param bool tags_partial_match: If true, will return endpoint which has one of tagIds, if false (or missing) will return only endpoints that has all the tags
        :param list[int] endpoint_ids: will return only these endpoints
        :return: list[PortainerEndpoint]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoint_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.endpoint_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def endpoint_list_with_http_info(self, **kwargs):  # noqa: E501
        """List endpoints  # noqa: E501

        List all endpoints based on the current user authorizations. Will return all endpoints if using an administrator account otherwise it will only return authorized endpoints. **Access policy**: restricted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: Start searching from
        :param str search: Search query
        :param int group_id: List endpoints of this group
        :param int limit: Limit results to this value
        :param int type: List endpoints of this type
        :param list[int] tag_ids: search endpoints with these tags (depends on tagsPartialMatch)
        :param bool tags_partial_match: If true, will return endpoint which has one of tagIds, if false (or missing) will return only endpoints that has all the tags
        :param list[int] endpoint_ids: will return only these endpoints
        :return: list[PortainerEndpoint]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'search', 'group_id', 'limit', 'type', 'tag_ids', 'tags_partial_match', 'endpoint_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoint_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'group_id' in params:
            query_params.append(('groupId', params['group_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'tag_ids' in params:
            query_params.append(('tagIds', params['tag_ids']))  # noqa: E501
            collection_formats['tagIds'] = 'csv'  # noqa: E501
        if 'tags_partial_match' in params:
            query_params.append(('tagsPartialMatch', params['tags_partial_match']))  # noqa: E501
        if 'endpoint_ids' in params:
            query_params.append(('endpointIds', params['endpoint_ids']))  # noqa: E501
            collection_formats['endpointIds'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwt']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PortainerEndpoint]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoint_settings_update(self, id, body, **kwargs):  # noqa: E501
        """Update settings for an endpoint  # noqa: E501

        Update settings for an endpoint. **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_settings_update(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Endpoint identifier (required)
        :param EndpointsEndpointSettingsUpdatePayload body: Endpoint details (required)
        :return: PortainerEndpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoint_settings_update_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoint_settings_update_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def endpoint_settings_update_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Update settings for an endpoint  # noqa: E501

        Update settings for an endpoint. **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_settings_update_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Endpoint identifier (required)
        :param EndpointsEndpointSettingsUpdatePayload body: Endpoint details (required)
        :return: PortainerEndpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoint_settings_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `endpoint_settings_update`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `endpoint_settings_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwt']  # noqa: E501

        return self.api_client.call_api(
            '/api/endpoints/:id/settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortainerEndpoint',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoint_snapshot(self, id, **kwargs):  # noqa: E501
        """Snapshots an endpoint  # noqa: E501

        Snapshots an endpoint **Access policy**: restricted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_snapshot(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Endpoint identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoint_snapshot_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoint_snapshot_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def endpoint_snapshot_with_http_info(self, id, **kwargs):  # noqa: E501
        """Snapshots an endpoint  # noqa: E501

        Snapshots an endpoint **Access policy**: restricted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_snapshot_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Endpoint identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoint_snapshot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `endpoint_snapshot`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwt']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/{id}/snapshot', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoint_snapshots(self, **kwargs):  # noqa: E501
        """Snapshot all endpoints  # noqa: E501

        Snapshot all endpoints **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_snapshots(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoint_snapshots_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.endpoint_snapshots_with_http_info(**kwargs)  # noqa: E501
            return data

    def endpoint_snapshots_with_http_info(self, **kwargs):  # noqa: E501
        """Snapshot all endpoints  # noqa: E501

        Snapshot all endpoints **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_snapshots_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoint_snapshots" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwt']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/snapshot', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoint_status_inspect(self, id, **kwargs):  # noqa: E501
        """Get endpoint status  # noqa: E501

        Endpoint for edge agent to check status of environment **Access policy**: restricted only to Edge endpoints  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_status_inspect(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Endpoint identifier (required)
        :return: EndpointsEndpointStatusInspectResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoint_status_inspect_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoint_status_inspect_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def endpoint_status_inspect_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get endpoint status  # noqa: E501

        Endpoint for edge agent to check status of environment **Access policy**: restricted only to Edge endpoints  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_status_inspect_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Endpoint identifier (required)
        :return: EndpointsEndpointStatusInspectResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoint_status_inspect" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `endpoint_status_inspect`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwt']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/{id}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndpointsEndpointStatusInspectResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoint_update(self, id, body, **kwargs):  # noqa: E501
        """Update an endpoint  # noqa: E501

        Update an endpoint. **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_update(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Endpoint identifier (required)
        :param EndpointsEndpointUpdatePayload body: Endpoint details (required)
        :return: PortainerEndpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoint_update_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoint_update_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def endpoint_update_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Update an endpoint  # noqa: E501

        Update an endpoint. **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoint_update_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Endpoint identifier (required)
        :param EndpointsEndpointUpdatePayload body: Endpoint details (required)
        :return: PortainerEndpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoint_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `endpoint_update`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `endpoint_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwt']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortainerEndpoint',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoints_id_edge_jobs_job_id_logs_post(self, id, job_id, **kwargs):  # noqa: E501
        """Inspect an EdgeJob Log  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoints_id_edge_jobs_job_id_logs_post(id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Endpoint Id (required)
        :param str job_id: Job Id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoints_id_edge_jobs_job_id_logs_post_with_http_info(id, job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoints_id_edge_jobs_job_id_logs_post_with_http_info(id, job_id, **kwargs)  # noqa: E501
            return data

    def endpoints_id_edge_jobs_job_id_logs_post_with_http_info(self, id, job_id, **kwargs):  # noqa: E501
        """Inspect an EdgeJob Log  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoints_id_edge_jobs_job_id_logs_post_with_http_info(id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Endpoint Id (required)
        :param str job_id: Job Id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoints_id_edge_jobs_job_id_logs_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `endpoints_id_edge_jobs_job_id_logs_post`")  # noqa: E501
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in params or
                                                       params['job_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_id` when calling `endpoints_id_edge_jobs_job_id_logs_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'job_id' in params:
            path_params['jobID'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/{id}/edge/jobs/{jobID}/logs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoints_id_edge_stacks_stack_id_get(self, id, stack_id, **kwargs):  # noqa: E501
        """Inspect an Edge Stack for an Endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoints_id_edge_stacks_stack_id_get(id, stack_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Endpoint Id (required)
        :param str stack_id: EdgeStack Id (required)
        :return: EndpointedgeConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoints_id_edge_stacks_stack_id_get_with_http_info(id, stack_id, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoints_id_edge_stacks_stack_id_get_with_http_info(id, stack_id, **kwargs)  # noqa: E501
            return data

    def endpoints_id_edge_stacks_stack_id_get_with_http_info(self, id, stack_id, **kwargs):  # noqa: E501
        """Inspect an Edge Stack for an Endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoints_id_edge_stacks_stack_id_get_with_http_info(id, stack_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Endpoint Id (required)
        :param str stack_id: EdgeStack Id (required)
        :return: EndpointedgeConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'stack_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoints_id_edge_stacks_stack_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `endpoints_id_edge_stacks_stack_id_get`")  # noqa: E501
        # verify the required parameter 'stack_id' is set
        if self.api_client.client_side_validation and ('stack_id' not in params or
                                                       params['stack_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `stack_id` when calling `endpoints_id_edge_stacks_stack_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'stack_id' in params:
            path_params['stackID'] = params['stack_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/{id}/edge/stacks/{stackId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndpointedgeConfigResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
