# coding: utf-8

"""
    PortainerCE API

    Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API endpoints require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API endpoint has an associated access policy, it is documented in the description of each endpoint.  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the endpoints with this access policy.  ### Authenticated access  Authentication is required to access the endpoints with this access policy.  ### Restricted access  Authentication is required to access the endpoints with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the endpoints with this access policy.  # Execute Docker requests  Portainer **DOES NOT** expose specific endpoints to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API endpoint (which is not documented below due to Swagger limitations). This endpoint has a restricted access policy so you still need to be authenticated to be able to query this endpoint. Any query on this endpoint will be proxied to the Docker API of the associated endpoint (requests and responses objects are the same as documented in the Docker API).  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).   # noqa: E501

    OpenAPI spec version: 2.6.0
    Contact: info@portainer.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from portainer_ce_api.configuration import Configuration


class SettingsSettingsUpdatePayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authentication_method': 'int',
        'black_listed_labels': 'list[PortainerPair]',
        'edge_agent_checkin_interval': 'int',
        'enable_edge_compute_features': 'bool',
        'enable_telemetry': 'bool',
        'ldapsettings': 'PortainerLDAPSettings',
        'logo_url': 'str',
        'oauth_settings': 'PortainerOAuthSettings',
        'snapshot_interval': 'str',
        'templates_url': 'str',
        'user_session_timeout': 'str'
    }

    attribute_map = {
        'authentication_method': 'authenticationMethod',
        'black_listed_labels': 'blackListedLabels',
        'edge_agent_checkin_interval': 'edgeAgentCheckinInterval',
        'enable_edge_compute_features': 'enableEdgeComputeFeatures',
        'enable_telemetry': 'enableTelemetry',
        'ldapsettings': 'ldapsettings',
        'logo_url': 'logoURL',
        'oauth_settings': 'oauthSettings',
        'snapshot_interval': 'snapshotInterval',
        'templates_url': 'templatesURL',
        'user_session_timeout': 'userSessionTimeout'
    }

    def __init__(self, authentication_method=None, black_listed_labels=None, edge_agent_checkin_interval=None, enable_edge_compute_features=None, enable_telemetry=None, ldapsettings=None, logo_url=None, oauth_settings=None, snapshot_interval=None, templates_url=None, user_session_timeout=None, _configuration=None):  # noqa: E501
        """SettingsSettingsUpdatePayload - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._authentication_method = None
        self._black_listed_labels = None
        self._edge_agent_checkin_interval = None
        self._enable_edge_compute_features = None
        self._enable_telemetry = None
        self._ldapsettings = None
        self._logo_url = None
        self._oauth_settings = None
        self._snapshot_interval = None
        self._templates_url = None
        self._user_session_timeout = None
        self.discriminator = None

        if authentication_method is not None:
            self.authentication_method = authentication_method
        if black_listed_labels is not None:
            self.black_listed_labels = black_listed_labels
        if edge_agent_checkin_interval is not None:
            self.edge_agent_checkin_interval = edge_agent_checkin_interval
        if enable_edge_compute_features is not None:
            self.enable_edge_compute_features = enable_edge_compute_features
        if enable_telemetry is not None:
            self.enable_telemetry = enable_telemetry
        if ldapsettings is not None:
            self.ldapsettings = ldapsettings
        if logo_url is not None:
            self.logo_url = logo_url
        if oauth_settings is not None:
            self.oauth_settings = oauth_settings
        if snapshot_interval is not None:
            self.snapshot_interval = snapshot_interval
        if templates_url is not None:
            self.templates_url = templates_url
        if user_session_timeout is not None:
            self.user_session_timeout = user_session_timeout

    @property
    def authentication_method(self):
        """Gets the authentication_method of this SettingsSettingsUpdatePayload.  # noqa: E501

        Active authentication method for the Portainer instance. Valid values are: 1 for internal, 2 for LDAP, or 3 for oauth  # noqa: E501

        :return: The authentication_method of this SettingsSettingsUpdatePayload.  # noqa: E501
        :rtype: int
        """
        return self._authentication_method

    @authentication_method.setter
    def authentication_method(self, authentication_method):
        """Sets the authentication_method of this SettingsSettingsUpdatePayload.

        Active authentication method for the Portainer instance. Valid values are: 1 for internal, 2 for LDAP, or 3 for oauth  # noqa: E501

        :param authentication_method: The authentication_method of this SettingsSettingsUpdatePayload.  # noqa: E501
        :type: int
        """

        self._authentication_method = authentication_method

    @property
    def black_listed_labels(self):
        """Gets the black_listed_labels of this SettingsSettingsUpdatePayload.  # noqa: E501

        A list of label name & value that will be used to hide containers when querying containers  # noqa: E501

        :return: The black_listed_labels of this SettingsSettingsUpdatePayload.  # noqa: E501
        :rtype: list[PortainerPair]
        """
        return self._black_listed_labels

    @black_listed_labels.setter
    def black_listed_labels(self, black_listed_labels):
        """Sets the black_listed_labels of this SettingsSettingsUpdatePayload.

        A list of label name & value that will be used to hide containers when querying containers  # noqa: E501

        :param black_listed_labels: The black_listed_labels of this SettingsSettingsUpdatePayload.  # noqa: E501
        :type: list[PortainerPair]
        """

        self._black_listed_labels = black_listed_labels

    @property
    def edge_agent_checkin_interval(self):
        """Gets the edge_agent_checkin_interval of this SettingsSettingsUpdatePayload.  # noqa: E501

        The default check in interval for edge agent (in seconds)  # noqa: E501

        :return: The edge_agent_checkin_interval of this SettingsSettingsUpdatePayload.  # noqa: E501
        :rtype: int
        """
        return self._edge_agent_checkin_interval

    @edge_agent_checkin_interval.setter
    def edge_agent_checkin_interval(self, edge_agent_checkin_interval):
        """Sets the edge_agent_checkin_interval of this SettingsSettingsUpdatePayload.

        The default check in interval for edge agent (in seconds)  # noqa: E501

        :param edge_agent_checkin_interval: The edge_agent_checkin_interval of this SettingsSettingsUpdatePayload.  # noqa: E501
        :type: int
        """

        self._edge_agent_checkin_interval = edge_agent_checkin_interval

    @property
    def enable_edge_compute_features(self):
        """Gets the enable_edge_compute_features of this SettingsSettingsUpdatePayload.  # noqa: E501

        Whether edge compute features are enabled  # noqa: E501

        :return: The enable_edge_compute_features of this SettingsSettingsUpdatePayload.  # noqa: E501
        :rtype: bool
        """
        return self._enable_edge_compute_features

    @enable_edge_compute_features.setter
    def enable_edge_compute_features(self, enable_edge_compute_features):
        """Sets the enable_edge_compute_features of this SettingsSettingsUpdatePayload.

        Whether edge compute features are enabled  # noqa: E501

        :param enable_edge_compute_features: The enable_edge_compute_features of this SettingsSettingsUpdatePayload.  # noqa: E501
        :type: bool
        """

        self._enable_edge_compute_features = enable_edge_compute_features

    @property
    def enable_telemetry(self):
        """Gets the enable_telemetry of this SettingsSettingsUpdatePayload.  # noqa: E501

        Whether telemetry is enabled  # noqa: E501

        :return: The enable_telemetry of this SettingsSettingsUpdatePayload.  # noqa: E501
        :rtype: bool
        """
        return self._enable_telemetry

    @enable_telemetry.setter
    def enable_telemetry(self, enable_telemetry):
        """Sets the enable_telemetry of this SettingsSettingsUpdatePayload.

        Whether telemetry is enabled  # noqa: E501

        :param enable_telemetry: The enable_telemetry of this SettingsSettingsUpdatePayload.  # noqa: E501
        :type: bool
        """

        self._enable_telemetry = enable_telemetry

    @property
    def ldapsettings(self):
        """Gets the ldapsettings of this SettingsSettingsUpdatePayload.  # noqa: E501


        :return: The ldapsettings of this SettingsSettingsUpdatePayload.  # noqa: E501
        :rtype: PortainerLDAPSettings
        """
        return self._ldapsettings

    @ldapsettings.setter
    def ldapsettings(self, ldapsettings):
        """Sets the ldapsettings of this SettingsSettingsUpdatePayload.


        :param ldapsettings: The ldapsettings of this SettingsSettingsUpdatePayload.  # noqa: E501
        :type: PortainerLDAPSettings
        """

        self._ldapsettings = ldapsettings

    @property
    def logo_url(self):
        """Gets the logo_url of this SettingsSettingsUpdatePayload.  # noqa: E501

        URL to a logo that will be displayed on the login page as well as on top of the sidebar. Will use default Portainer logo when value is empty string  # noqa: E501

        :return: The logo_url of this SettingsSettingsUpdatePayload.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this SettingsSettingsUpdatePayload.

        URL to a logo that will be displayed on the login page as well as on top of the sidebar. Will use default Portainer logo when value is empty string  # noqa: E501

        :param logo_url: The logo_url of this SettingsSettingsUpdatePayload.  # noqa: E501
        :type: str
        """

        self._logo_url = logo_url

    @property
    def oauth_settings(self):
        """Gets the oauth_settings of this SettingsSettingsUpdatePayload.  # noqa: E501


        :return: The oauth_settings of this SettingsSettingsUpdatePayload.  # noqa: E501
        :rtype: PortainerOAuthSettings
        """
        return self._oauth_settings

    @oauth_settings.setter
    def oauth_settings(self, oauth_settings):
        """Sets the oauth_settings of this SettingsSettingsUpdatePayload.


        :param oauth_settings: The oauth_settings of this SettingsSettingsUpdatePayload.  # noqa: E501
        :type: PortainerOAuthSettings
        """

        self._oauth_settings = oauth_settings

    @property
    def snapshot_interval(self):
        """Gets the snapshot_interval of this SettingsSettingsUpdatePayload.  # noqa: E501

        The interval in which endpoint snapshots are created  # noqa: E501

        :return: The snapshot_interval of this SettingsSettingsUpdatePayload.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_interval

    @snapshot_interval.setter
    def snapshot_interval(self, snapshot_interval):
        """Sets the snapshot_interval of this SettingsSettingsUpdatePayload.

        The interval in which endpoint snapshots are created  # noqa: E501

        :param snapshot_interval: The snapshot_interval of this SettingsSettingsUpdatePayload.  # noqa: E501
        :type: str
        """

        self._snapshot_interval = snapshot_interval

    @property
    def templates_url(self):
        """Gets the templates_url of this SettingsSettingsUpdatePayload.  # noqa: E501

        URL to the templates that will be displayed in the UI when navigating to App Templates  # noqa: E501

        :return: The templates_url of this SettingsSettingsUpdatePayload.  # noqa: E501
        :rtype: str
        """
        return self._templates_url

    @templates_url.setter
    def templates_url(self, templates_url):
        """Sets the templates_url of this SettingsSettingsUpdatePayload.

        URL to the templates that will be displayed in the UI when navigating to App Templates  # noqa: E501

        :param templates_url: The templates_url of this SettingsSettingsUpdatePayload.  # noqa: E501
        :type: str
        """

        self._templates_url = templates_url

    @property
    def user_session_timeout(self):
        """Gets the user_session_timeout of this SettingsSettingsUpdatePayload.  # noqa: E501

        The duration of a user session  # noqa: E501

        :return: The user_session_timeout of this SettingsSettingsUpdatePayload.  # noqa: E501
        :rtype: str
        """
        return self._user_session_timeout

    @user_session_timeout.setter
    def user_session_timeout(self, user_session_timeout):
        """Sets the user_session_timeout of this SettingsSettingsUpdatePayload.

        The duration of a user session  # noqa: E501

        :param user_session_timeout: The user_session_timeout of this SettingsSettingsUpdatePayload.  # noqa: E501
        :type: str
        """

        self._user_session_timeout = user_session_timeout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SettingsSettingsUpdatePayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SettingsSettingsUpdatePayload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SettingsSettingsUpdatePayload):
            return True

        return self.to_dict() != other.to_dict()
