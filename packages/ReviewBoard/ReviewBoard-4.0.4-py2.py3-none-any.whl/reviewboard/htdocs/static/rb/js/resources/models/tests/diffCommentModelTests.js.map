{"version":3,"sources":["diffCommentModelTests.es6.js"],"names":[],"mappings":"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","file":"diffCommentModelTests.js","sourcesContent":["suite('rb/resources/models/DiffComment', function() {\n    let model;\n\n    beforeEach(function() {\n        /* Set some sane defaults needed to pass validation. */\n        model = new RB.DiffComment({\n            fileDiffID: 16,\n            parentObject: new RB.BaseResource({\n                'public': true,\n            })\n        });\n    });\n\n    it('getNumLines', function() {\n        model.set({\n            beginLineNum: 5,\n            endLineNum: 10,\n        });\n\n        expect(model.getNumLines()).toBe(6);\n    });\n\n    describe('parse', function() {\n        it('API payloads', function() {\n            const data = model.parse({\n                stat: 'ok',\n                diff_comment: {\n                    id: 42,\n                    issue_opened: true,\n                    issue_status: 'resolved',\n                    text_type: 'markdown',\n                    text: 'foo',\n                    first_line: 10,\n                    num_lines: 5,\n                    filediff: {\n                        id: 1,\n                        source_file: 'my-file',\n                    },\n                    interfilediff: {\n                        id: 2,\n                        source_file: 'my-file',\n                    },\n                },\n            });\n\n            expect(data).not.toBe(undefined);\n            expect(data.id).toBe(42);\n            expect(data.issueOpened).toBe(true);\n            expect(data.issueStatus).toBe(RB.BaseComment.STATE_RESOLVED);\n            expect(data.richText).toBe(true);\n            expect(data.text).toBe('foo');\n            expect(data.beginLineNum).toBe(10);\n            expect(data.endLineNum).toBe(14);\n            expect(data.fileDiff).not.toBe(undefined);\n            expect(data.fileDiff.id).toBe(1);\n            expect(data.fileDiff.get('sourceFilename')).toBe('my-file');\n            expect(data.interFileDiff).not.toBe(undefined);\n            expect(data.interFileDiff.id).toBe(2);\n            expect(data.interFileDiff.get('sourceFilename')).toBe('my-file');\n        });\n    });\n\n    describe('toJSON', function() {\n        it('BaseComment.toJSON called', function() {\n            spyOn(RB.BaseComment.prototype, 'toJSON').and.callThrough();\n            model.toJSON();\n            expect(RB.BaseComment.prototype.toJSON).toHaveBeenCalled();\n        });\n\n        it('first_line field', function() {\n            model.set({\n                beginLineNum: 100,\n                endLineNum: 100\n            });\n\n            const data = model.toJSON();\n            expect(data.first_line).toBe(100);\n        });\n\n        it('num_lines field', function() {\n            model.set({\n                beginLineNum: 100,\n                endLineNum: 105\n            });\n\n            const data = model.toJSON();\n            expect(data.num_lines).toBe(6);\n        });\n\n        describe('force_text_type field', function() {\n            it('With value', function() {\n                model.set('forceTextType', 'html');\n                const data = model.toJSON();\n                expect(data.force_text_type).toBe('html');\n            });\n\n            it('Without value', function() {\n                const data = model.toJSON();\n                expect(data.force_text_type).toBe(undefined);\n            });\n        });\n\n        describe('include_text_types field', function() {\n            it('With value', function() {\n                model.set('includeTextTypes', 'html');\n                const data = model.toJSON();\n                expect(data.include_text_types).toBe('html');\n            });\n\n            it('Without value', function() {\n                const data = model.toJSON();\n\n                expect(data.include_text_types).toBe(undefined);\n            });\n        });\n\n        describe('filediff_id field', function() {\n            it('When loaded', function() {\n                model.set('loaded', true);\n                const data = model.toJSON();\n                expect(data.filediff_id).toBe(undefined);\n            });\n\n            it('When not loaded', function() {\n                const data = model.toJSON();\n                expect(data.filediff_id).toBe(16);\n            });\n        });\n\n        describe('interfilediff_id field', function() {\n            it('When loaded', function() {\n                model.set('loaded', true);\n                const data = model.toJSON();\n                expect(data.interfilediff_id).toBe(undefined);\n            });\n\n            it('When not loaded', function() {\n                model.set('interFileDiffID', 50);\n                const data = model.toJSON();\n                expect(data.interfilediff_id).toBe(50);\n            });\n\n            it('When not loaded and unset', function() {\n                const data = model.toJSON();\n                expect(data.interfilediff_id).toBe(undefined);\n            });\n        });\n    });\n\n    describe('validate', function() {\n        it('Inherited behavior', function() {\n            spyOn(RB.BaseComment.prototype, 'validate');\n            model.validate({});\n            expect(RB.BaseComment.prototype.validate).toHaveBeenCalled();\n        });\n\n        describe('beginLineNum/endLineNum', function() {\n            describe('Valid values', function() {\n                it('beginLineNum == 0, endLineNum == 0', function() {\n                    expect(model.validate({\n                        beginLineNum: 0,\n                        endLineNum: 0,\n                    })).toBe(undefined);\n                });\n\n                it('beginLineNum > 0, endLineNum == beginLineNum', function() {\n                    expect(model.validate({\n                        beginLineNum: 10,\n                        endLineNum: 10,\n                    })).toBe(undefined);\n                });\n\n                it('beginLineNum > 0, endLineNum > 0', function() {\n                    expect(model.validate({\n                        beginLineNum: 10,\n                        endLineNum: 11,\n                    })).toBe(undefined);\n                });\n            });\n\n            describe('Invalid values', function() {\n                it('beginLineNum < 0', function() {\n                    expect(model.validate({\n                        beginLineNum: -1,\n                    })).toBe(RB.DiffComment.strings.BEGINLINENUM_GTE_0);\n                });\n\n                it('endLineNum < 0', function() {\n                    expect(model.validate({\n                        endLineNum: -1,\n                    })).toBe(RB.DiffComment.strings.ENDLINENUM_GTE_0);\n                });\n\n                it('endLineNum < beginLineNum', function() {\n                    expect(model.validate({\n                        beginLineNum: 20,\n                        endLineNum: 10,\n                    })).toBe(\n                        RB.DiffComment.strings.BEGINLINENUM_LTE_ENDLINENUM);\n                });\n            });\n        });\n\n        describe('fileDiffID', function() {\n            it('With value', function() {\n                expect(model.validate({\n                    fileDiffID: 42,\n                })).toBe(undefined);\n            });\n\n            it('Unset', function() {\n                expect(model.validate({\n                    fileDiffID: null,\n                })).toBe(RB.DiffComment.strings.INVALID_FILEDIFF_ID);\n            });\n        });\n    });\n});\n"]}