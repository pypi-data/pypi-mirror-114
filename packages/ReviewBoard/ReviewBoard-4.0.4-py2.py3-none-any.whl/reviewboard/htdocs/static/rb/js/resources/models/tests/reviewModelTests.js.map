{"version":3,"sources":["reviewModelTests.es6.js"],"names":[],"mappings":"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","file":"reviewModelTests.js","sourcesContent":["suite('rb/resources/models/Review', function() {\n    let model;\n\n    beforeEach(function() {\n        model = new RB.Review({\n            parentObject: new RB.ReviewRequest(),\n        });\n    });\n\n    describe('createReply', function() {\n        it('Returns cached draft reply', function() {\n            expect(model.get('draftReply')).toBe(null);\n\n            const reviewReply = model.createReply();\n            expect(model.get('draftReply')).toBe(reviewReply);\n\n            const reviewReply2 = model.createReply();\n            expect(reviewReply).toBe(reviewReply2);\n        });\n\n        it('Cached draft reply resets on publish', function() {\n            const reviewReply = model.createReply();\n            expect(model.get('draftReply')).toBe(reviewReply);\n\n            reviewReply.trigger('published');\n            expect(model.get('draftReply')).toBe(null);\n        });\n    });\n\n    describe('parse', function() {\n        beforeEach(function() {\n            model.rspNamespace = 'my_review';\n        });\n\n        it('Common API payloads', function() {\n            const data = model.parse({\n                stat: 'ok',\n                my_review: {\n                    id: 42,\n                    body_top: 'my body top',\n                    body_bottom: 'my body bottom',\n                    'public': false,\n                    body_top_text_type: 'markdown',\n                    body_bottom_text_type: 'plain',\n                    ship_it: false,\n                },\n            });\n\n            expect(data).not.toBe(undefined);\n            expect(data.id).toBe(42);\n            expect(data.bodyTop).toBe('my body top');\n            expect(data.bodyBottom).toBe('my body bottom');\n            expect(data.public).toBe(false);\n            expect(data.bodyTopRichText).toBe(true);\n            expect(data.bodyBottomRichText).toBe(false);\n            expect(data.shipIt).toBe(false);\n        });\n\n        it('With raw_text_fields', function() {\n            const data = model.parse({\n                stat: 'ok',\n                my_review: {\n                    body_top: 'my body top',\n                    body_bottom: 'my body bottom',\n                    body_top_text_type: 'markdown',\n                    body_bottom_text_type: 'plain',\n                    raw_text_fields: {\n                        body_top: 'raw body top',\n                        body_top_text_type: 'raw',\n                        body_bottom: 'raw body bottom',\n                        body_bottom_text_type: 'raw',\n                    },\n                },\n            });\n\n            expect(data).not.toBe(undefined);\n            expect(data.bodyTop).toBe('my body top');\n            expect(data.bodyBottom).toBe('my body bottom');\n            expect(data.bodyTopRichText).toBe(false);\n            expect(data.bodyBottomRichText).toBe(false);\n\n            expect(data.rawTextFields).toBeTruthy();\n            expect(data.rawTextFields.bodyTop).toBe('raw body top');\n            expect(data.rawTextFields.bodyBottom).toBe('raw body bottom');\n        });\n\n        it('With markdown_text_fields', function() {\n            const data = model.parse({\n                stat: 'ok',\n                my_review: {\n                    body_top: 'my body top',\n                    body_bottom: 'my body bottom',\n                    body_top_text_type: 'markdown',\n                    body_bottom_text_type: 'plain',\n                    markdown_text_fields: {\n                        body_top: 'Markdown body top',\n                        body_top_text_type: 'markdown',\n                        body_bottom: 'Markdown body bottom',\n                        body_bottom_text_type: 'markdown',\n                    },\n                },\n            });\n\n            expect(data).not.toBe(undefined);\n            expect(data.bodyTop).toBe('my body top');\n            expect(data.bodyBottom).toBe('my body bottom');\n            expect(data.bodyTopRichText).toBe(true);\n            expect(data.bodyBottomRichText).toBe(false);\n\n            expect(data.markdownTextFields).toBeTruthy();\n            expect(data.markdownTextFields.bodyTop).toBe('Markdown body top');\n            expect(data.markdownTextFields.bodyBottom)\n                .toBe('Markdown body bottom');\n        });\n\n        it('With html_text_fields', function() {\n            const data = model.parse({\n                stat: 'ok',\n                my_review: {\n                    body_top: 'my body top',\n                    body_bottom: 'my body bottom',\n                    body_top_text_type: 'markdown',\n                    body_bottom_text_type: 'plain',\n                    html_text_fields: {\n                        body_top: 'HTML body top',\n                        body_top_text_type: 'html',\n                        body_bottom: 'HTML body bottom',\n                        body_bottom_text_type: 'html',\n                    },\n                },\n            });\n\n            expect(data).not.toBe(undefined);\n            expect(data.bodyTop).toBe('my body top');\n            expect(data.bodyBottom).toBe('my body bottom');\n            expect(data.bodyTopRichText).toBe(true);\n            expect(data.bodyBottomRichText).toBe(false);\n\n            expect(data.htmlTextFields).toBeTruthy();\n            expect(data.htmlTextFields.bodyTop).toBe('HTML body top');\n            expect(data.htmlTextFields.bodyBottom).toBe('HTML body bottom');\n        });\n    });\n\n    describe('toJSON', function() {\n        describe('bodyTop field', function() {\n            it('With value', function() {\n                model.set('bodyTop', 'foo');\n                const data = model.toJSON();\n                expect(data.body_top).toBe('foo');\n            });\n        });\n\n        describe('bodyBottom field', function() {\n            it('With value', function() {\n                model.set('bodyBottom', 'foo');\n                const data = model.toJSON();\n                expect(data.body_bottom).toBe('foo');\n            });\n        });\n\n        describe('force_text_type field', function() {\n            it('With value', function() {\n                model.set('forceTextType', 'html');\n                const data = model.toJSON();\n                expect(data.force_text_type).toBe('html');\n            });\n\n            it('Without value', function() {\n                const data = model.toJSON();\n\n                expect(data.force_text_type).toBe(undefined);\n            });\n        });\n\n        describe('include_text_types field', function() {\n            it('With value', function() {\n                model.set('includeTextTypes', 'html');\n                const data = model.toJSON();\n                expect(data.include_text_types).toBe('html');\n            });\n\n            it('Without value', function() {\n                const data = model.toJSON();\n\n                expect(data.include_text_types).toBe(undefined);\n            });\n        });\n\n        describe('public field', function() {\n            it('With value', function() {\n                model.set('public', true);\n                const data = model.toJSON();\n                expect(data.public).toBe(1);\n            });\n\n            it('Without value', function() {\n                const data = model.toJSON();\n                expect(data.public).toBe(undefined);\n            });\n        });\n\n        describe('bodyTopRichText field', function() {\n            it('With true', function() {\n                model.set('bodyTopRichText', true);\n                const data = model.toJSON();\n                expect(data.body_top_text_type).toBe('markdown');\n            });\n\n            it('With false', function() {\n                model.set('bodyTopRichText', false);\n                const data = model.toJSON();\n                expect(data.body_top_text_type).toBe('plain');\n            });\n        });\n\n        describe('bodyBottomRichText field', function() {\n            it('With true', function() {\n                model.set('bodyBottomRichText', true);\n                const data = model.toJSON();\n                expect(data.body_bottom_text_type).toBe('markdown');\n            });\n\n            it('With false', function() {\n                model.set('bodyBottomRichText', false);\n                const data = model.toJSON();\n                expect(data.body_bottom_text_type).toBe('plain');\n            });\n        });\n\n        describe('shipIt field', function() {\n            it('With value', function() {\n                model.set('shipIt', true);\n                const data = model.toJSON();\n                expect(data.ship_it).toBe(true);\n            });\n        });\n    });\n});\n"]}