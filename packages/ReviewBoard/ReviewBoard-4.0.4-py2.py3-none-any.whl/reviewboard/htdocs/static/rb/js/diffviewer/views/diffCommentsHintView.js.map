{"version":3,"sources":["diffCommentsHintView.es6.js"],"names":[],"mappings":";;AAAA;;;AAGA,GAAG,oBAAH,GAA0B,SAAS,IAAT,CAAc,MAAd,CAAqB;AAC3C,YAAQ;AACJ,2BAAmB,qBADf;AAEJ,4BAAoB;AAFhB,KADmC;;AAM3C,cAAU,EAAE,QAAF,4OANiC;;AAmB3C;;;AAGA,cAtB2C,wBAsB9B;AACT,aAAK,QAAL,CAAc,KAAK,KAAnB,EAA0B,QAA1B,EAAoC,KAAK,MAAzC;AACH,KAxB0C;;;AA0B3C;;;;;;;AAOA,UAjC2C,oBAiClC;AACL,YAAM,qCAAN;AACA,YAAM,+EAAN;;AAEA,YAAI,KAAK,KAAL,CAAW,GAAX,CAAe,kBAAf,CAAJ,EAAwC;AACpC,iBAAK,GAAL,CAAS,IAAT,CAAc,KAAK,QAAL,CAAc;AACxB,sGADwB;AAExB;AAFwB,aAAd,CAAd;;AAKA,gBAAM,MAAM,KAAK,CAAL,CAAO,IAAP,CAAZ;;AAEA,iBAAK,KAAL,CAAW,GAAX,CAAe,sBAAf,EAAuC,OAAvC,CAA+C,mBAAW;AACtD,oBAAM,MAAM,EAAE,OAAF,EACP,QADO,CACE,UADF,EAEP,IAFO,CAEF,UAFE,EAEU,QAAQ,QAFlB,EAGP,IAHO,CAGF,YAAY,YAAZ,EAA0B,CAAC,QAAQ,QAAT,CAA1B,CAHE,EAIP,QAJO,CAIE,GAJF,CAAZ;;AAMA,oBAAI,QAAQ,SAAZ,EAAuB;AACnB,wBAAI,QAAJ,CAAa,SAAb;AACH;AACJ,aAVD;;AAYA,iBAAK,KAAL,CAAW,GAAX,CAAe,wBAAf,EAAyC,OAAzC,CAAiD,qBAAa;AAC1D,oBAAM,MAAM,EAAE,OAAF,EACP,QADO,CACE,WADF,EAEP,IAFO,CAEF;AACF,sCAAkB,UAAU,WAD1B;AAEF,uCAAmB,UAAU;AAF3B,iBAFE,EAMP,IANO,CAMF,YACF,aADE,EAEF;AACI,iCAAa,UAAU,WAD3B;AAEI,iCAAa,UAAU;AAF3B,iBAFE,EAMF,IANE,CANE,EAaP,QAbO,CAaE,GAbF,CAAZ;;AAeA,oBAAI,UAAU,SAAd,EAAyB;AACrB,wBAAI,QAAJ,CAAa,SAAb;AACH;AACJ,aAnBD;AAoBH,SAxCD,MAwCO;AACH,iBAAK,GAAL,CAAS,KAAT;AACH;;AAED,eAAO,IAAP;AACH,KAlF0C;;;AAoF3C;;;;;;;AAOA,uBA3F2C,+BA2FvB,EA3FuB,EA2FnB;AACpB,YAAM,UAAU,EAAE,GAAG,aAAL,CAAhB;;AAEA,YAAI,CAAC,QAAQ,QAAR,CAAiB,SAAjB,CAAL,EAAkC;AAC9B,iBAAK,OAAL,CAAa,kBAAb,EAAiC,CAAC,CAAD,EAAI,QAAQ,IAAR,CAAa,UAAb,CAAJ,CAAjC;AACH;AACJ,KAjG0C;;;AAmG3C;;;;;;;AAOA,wBA1G2C,gCA0GtB,EA1GsB,EA0GlB;AACrB,YAAM,UAAU,EAAE,GAAG,aAAL,CAAhB;;AAEA,YAAI,CAAC,QAAQ,QAAR,CAAiB,SAAjB,CAAL,EAAkC;AAC9B,iBAAK,OAAL,CAAa,kBAAb,EACa,CAAC,QAAQ,IAAR,CAAa,gBAAb,CAAD,EACC,QAAQ,IAAR,CAAa,iBAAb,CADD,CADb;AAGH;AACJ;AAlH0C,CAArB,CAA1B","file":"diffCommentsHintView.js","sourcesContent":["/**\n * A view which gives the user hints about comments in other revisions.\n */\nRB.DiffCommentsHintView = Backbone.View.extend({\n    events: {\n        'click .revision': '_onRevisionSelected',\n        'click .interdiff': '_onInterdiffSelected',\n    },\n\n    template: _.template(dedent`\n        <div class=\"box-container\">\n         <div class=\"box important\">\n          <div class=\"box-inner comments-hint\">\n           <h1><%- unpublishedCommentsHeader %></h1>\n           <p><%- unpublishedCommentsText %></p>\n           <ul>\n           </ul>\n          </div>\n         </div>\n        </div>\n    `),\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        this.listenTo(this.model, 'change', this.render);\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.DiffCommentsHintView:\n     *     This object, for chaining.\n     */\n    render() {\n        const revisionText = gettext('Revision %s');\n        const interdiffText = gettext('Interdiff revision %(oldRevision)s - %(newRevision)s');\n\n        if (this.model.get('hasOtherComments')) {\n            this.$el.html(this.template({\n                unpublishedCommentsHeader: gettext('You have unpublished comments on other revisions'),\n                unpublishedCommentsText: gettext('Your review consists of comments on the following revisions:')\n            }));\n\n            const $ul = this.$('ul');\n\n            this.model.get('diffsetsWithComments').forEach(diffset => {\n                const $li = $('<li/>')\n                    .addClass('revision')\n                    .data('revision', diffset.revision)\n                    .text(interpolate(revisionText, [diffset.revision]))\n                    .appendTo($ul);\n\n                if (diffset.isCurrent) {\n                    $li.addClass('current');\n                }\n            });\n\n            this.model.get('interdiffsWithComments').forEach(interdiff => {\n                const $li = $('<li/>')\n                    .addClass('interdiff')\n                    .data({\n                        'first-revision': interdiff.oldRevision,\n                        'second-revision': interdiff.newRevision\n                    })\n                    .text(interpolate(\n                        interdiffText,\n                        {\n                            oldRevision: interdiff.oldRevision,\n                            newRevision: interdiff.newRevision\n                        },\n                        true))\n                    .appendTo($ul);\n\n                if (interdiff.isCurrent) {\n                    $li.addClass('current');\n                }\n            });\n        } else {\n            this.$el.empty();\n        }\n\n        return this;\n    },\n\n    /**\n     * Callback for when a single revision is selected.\n     *\n     * Args:\n     *     ev (Event):\n     *         The click event.\n     */\n    _onRevisionSelected(ev) {\n        const $target = $(ev.currentTarget);\n\n        if (!$target.hasClass('current')) {\n            this.trigger('revisionSelected', [0, $target.data('revision')]);\n        }\n    },\n\n    /**\n     * Callback for when an interdiff is selected.\n     *\n     * Args:\n     *     ev (Event):\n     *         The click event.\n     */\n    _onInterdiffSelected(ev) {\n        const $target = $(ev.currentTarget);\n\n        if (!$target.hasClass('current')) {\n            this.trigger('revisionSelected',\n                         [$target.data('first-revision'),\n                          $target.data('second-revision')]);\n        }\n    }\n});\n"]}