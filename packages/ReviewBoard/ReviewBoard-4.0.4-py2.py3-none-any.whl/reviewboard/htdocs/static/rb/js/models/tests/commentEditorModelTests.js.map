{"version":3,"sources":["commentEditorModelTests.es6.js"],"names":[],"mappings":"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","file":"commentEditorModelTests.js","sourcesContent":["suite('rb/models/CommentEditor', function() {\n    let editor;\n    let reviewRequest;\n    let comment;\n\n    function createComment() {\n        return new RB.BaseComment({\n            parentObject: new RB.BaseResource({\n                'public': true,\n            }),\n        });\n    }\n\n    beforeEach(function() {\n        reviewRequest = new RB.ReviewRequest();\n\n        editor = new RB.CommentEditor({\n            canEdit: true,\n            reviewRequest: reviewRequest,\n        });\n    });\n\n    describe('Attribute defaults', function() {\n        describe('canEdit', function() {\n            it('When logged in and hasDraft=false', function() {\n                RB.UserSession.instance.set('authenticated', true);\n\n                editor = new RB.CommentEditor({\n                    reviewRequest: reviewRequest,\n                });\n                expect(editor.get('canEdit')).toBe(true);\n            });\n\n            it('When logged in and hasDraft=true', function() {\n                RB.UserSession.instance.set('authenticated', true);\n                reviewRequest.set('hasDraft', true);\n\n                editor = new RB.CommentEditor({\n                    reviewRequest: reviewRequest,\n                });\n                expect(editor.get('canEdit')).toBe(false);\n            });\n\n            it('When logged out', function() {\n                RB.UserSession.instance.set('authenticated', false);\n\n                editor = new RB.CommentEditor({\n                    reviewRequest: reviewRequest,\n                });\n                expect(editor.get('canEdit')).toBe(false);\n            });\n\n            it('With explicitly set value', function() {\n                RB.UserSession.instance.set('authenticated', false);\n\n                editor = new RB.CommentEditor({\n                    canEdit: true,\n                    reviewRequest: reviewRequest,\n                });\n                expect(editor.get('canEdit')).toBe(true);\n            });\n        });\n\n        describe('openIssue', function() {\n            it('When user preference is true', function() {\n                RB.UserSession.instance.set('commentsOpenAnIssue', true);\n\n                editor = new RB.CommentEditor({\n                    reviewRequest: reviewRequest,\n                });\n                expect(editor.get('openIssue')).toBe(true);\n            });\n\n            it('When user preference is false', function() {\n                RB.UserSession.instance.set('commentsOpenAnIssue', false);\n\n                editor = new RB.CommentEditor({\n                    reviewRequest: reviewRequest,\n                });\n                expect(editor.get('openIssue')).toBe(false);\n            });\n\n            it('With explicitly set value', function() {\n                RB.UserSession.instance.set('commentsOpenAnIssue', false);\n\n                editor = new RB.CommentEditor({\n                    openIssue: true,\n                    reviewRequest: reviewRequest,\n                });\n                expect(editor.get('openIssue')).toBe(true);\n            });\n\n            it('When reloading the page with explicitly set value', function() {\n                RB.UserSession.instance.set('commentsOpenAnIssue', true);\n\n                comment = createComment();\n                comment.set({\n                    loaded: false,\n                    issueOpened: false,\n                });\n\n                editor = new RB.CommentEditor({\n                    comment: comment,\n                    reviewRequest: reviewRequest,\n                });\n                expect(editor.get('openIssue')).toBe(false);\n            });\n        });\n\n        describe('richText', function() {\n            it('When user preference is true', function() {\n                RB.UserSession.instance.set('defaultUseRichText', true);\n\n                editor = new RB.CommentEditor({\n                    reviewRequest: reviewRequest,\n                });\n                expect(editor.get('richText')).toBe(true);\n            });\n\n            it('When user preference is false', function() {\n                RB.UserSession.instance.set('defaultUseRichText', false);\n\n                editor = new RB.CommentEditor({\n                    reviewRequest: reviewRequest,\n                });\n                expect(editor.get('richText')).toBe(false);\n            });\n\n            it('With explicitly set value', function() {\n                RB.UserSession.instance.set('defaultUseRichText', false);\n\n                editor = new RB.CommentEditor({\n                    richText: true,\n                    reviewRequest: reviewRequest,\n                });\n                expect(editor.get('richText')).toBe(true);\n            });\n        });\n    });\n\n    describe('Loading comment', function() {\n        describe('With comment richText=true', function() {\n            let comment;\n\n            beforeEach(function() {\n                comment = createComment();\n\n                comment.set({\n                    id: 123,\n                    loaded: true,\n                    richText: true,\n                    text: '<p>this _is_ a <em>test</em></p>',\n                    rawTextFields: {\n                        text: 'this \\\\_is\\\\_ a _test_',\n                    },\n                    markdownTextFields: {\n                        text: 'this \\\\_is\\\\_ a _test_',\n                    },\n                });\n            });\n\n            it('When defaultUseRichText=true', function() {\n                RB.UserSession.instance.set('defaultUseRichText', true);\n                editor.set('comment', comment);\n                editor.beginEdit();\n\n                expect(editor.get('dirty')).toBe(false);\n                expect(editor.get('richText')).toBe(true);\n                expect(editor.get('text')).toBe('this \\\\_is\\\\_ a _test_');\n            });\n\n            it('When defaultUseRichText=false', function() {\n                RB.UserSession.instance.set('defaultUseRichText', false);\n                editor.set('comment', comment);\n                editor.beginEdit();\n\n                expect(editor.get('dirty')).toBe(false);\n                expect(editor.get('richText')).toBe(true);\n                expect(editor.get('text')).toBe('this \\\\_is\\\\_ a _test_');\n            });\n        });\n\n        describe('With comment richText=false', function() {\n            let comment;\n\n            beforeEach(function() {\n                comment = createComment();\n\n                comment.set({\n                    id: 123,\n                    loaded: true,\n                    richText: false,\n                    text: '<p>this _is_ a test</p>',\n                    rawTextFields: {\n                        text: 'this _is_ a _test_',\n                    },\n                    markdownTextFields: {\n                        text: 'this \\\\_is\\\\_ a \\\\_test\\\\_',\n                    },\n                });\n            });\n\n            it('When defaultUseRichText=true', function() {\n                RB.UserSession.instance.set('defaultUseRichText', true);\n                editor.set('comment', comment);\n                editor.beginEdit();\n\n                expect(editor.get('dirty')).toBe(false);\n                expect(editor.get('richText')).toBe(true);\n                expect(editor.get('text')).toBe('this \\\\_is\\\\_ a \\\\_test\\\\_');\n            });\n\n            it('When defaultUseRichText=false', function() {\n                RB.UserSession.instance.set('defaultUseRichText', false);\n                editor.set('comment', comment);\n                editor.beginEdit();\n\n                expect(editor.get('dirty')).toBe(false);\n                expect(editor.get('richText')).toBe(false);\n                expect(editor.get('text')).toBe('this _is_ a _test_');\n            });\n        });\n    });\n\n    describe('Capability states', function() {\n        describe('canDelete', function() {\n            it('When not editing', function() {\n                expect(editor.get('editing')).toBe(false);\n                expect(editor.get('canDelete')).toBe(false);\n            });\n\n            it('When editing new comment', function() {\n                editor.set('comment', createComment());\n\n                editor.beginEdit();\n                expect(editor.get('canDelete')).toBe(false);\n            });\n\n            it('When editing existing comment', function() {\n                const comment = createComment();\n                comment.set({\n                    id: 123,\n                    loaded: true,\n                });\n                editor.set('comment', comment);\n\n                editor.beginEdit();\n                expect(editor.get('canDelete')).toBe(true);\n            });\n\n            it('When editing existing comment with canEdit=false', function() {\n                const comment = createComment();\n                comment.set({\n                    id: 123,\n                    loaded: true,\n                });\n\n                editor.set({\n                    canEdit: false,\n                    comment: comment,\n                });\n\n                expect(() => editor.beginEdit()).toThrow();\n                expect(console.assert).toHaveBeenCalled();\n                expect(editor.get('canDelete')).toBe(false);\n            });\n        });\n\n        describe('canSave', function() {\n            it('When not editing', function() {\n                expect(editor.get('editing')).toBe(false);\n                expect(editor.get('canSave')).toBe(false);\n            });\n\n            it('When editing comment with text', function() {\n                const comment = createComment();\n                editor.set('comment', comment);\n                editor.beginEdit();\n                editor.set('text', 'Foo');\n                expect(editor.get('canSave')).toBe(true);\n            });\n\n            it('When editing comment with initial state', function() {\n                const comment = createComment();\n                editor.set('comment', comment);\n                editor.beginEdit();\n                expect(editor.get('canSave')).toBe(false);\n            });\n\n            it('When editing comment without text', function() {\n                const comment = createComment();\n                editor.set('comment', comment);\n                editor.beginEdit();\n                editor.set('text', '');\n                expect(editor.get('canSave')).toBe(false);\n            });\n        });\n    });\n\n    describe('States', function() {\n        describe('dirty', function() {\n            it('Initial state', function() {\n                expect(editor.get('dirty')).toBe(false);\n            });\n\n            it('After new comment', function() {\n                const comment = createComment();\n                editor.set('dirty', true);\n                editor.set('comment', comment);\n\n                expect(editor.get('dirty')).toBe(false);\n            });\n\n            it('After text change', function() {\n                editor.set('comment', createComment());\n                editor.beginEdit();\n                editor.set('text', 'abc');\n                expect(editor.get('dirty')).toBe(true);\n            });\n\n            it('After toggling Open Issue', function() {\n                editor.set('comment', createComment());\n                editor.beginEdit();\n                editor.set('openIssue', 'true');\n                expect(editor.get('dirty')).toBe(true);\n            });\n\n            it('After saving', function() {\n                const comment = createComment();\n                editor.set('comment', comment);\n\n                editor.beginEdit();\n                editor.set('text', 'abc');\n                expect(editor.get('dirty')).toBe(true);\n\n                spyOn(comment, 'save').and.callFake(\n                    (callbacks, context) => callbacks.success.call(context));\n\n                editor.save();\n                expect(editor.get('dirty')).toBe(false);\n            });\n\n            it('After deleting', function() {\n                const comment = createComment();\n                comment.set({\n                    id: 123,\n                    loaded: true,\n                });\n                editor.set('comment', comment);\n\n                editor.beginEdit();\n                editor.set('text', 'abc');\n                expect(editor.get('dirty')).toBe(true);\n\n                spyOn(comment, 'destroy').and.callFake(\n                    (callbacks, context) => {\n                        if (callbacks && callbacks.success) {\n                            callbacks.success.call(context);\n                        }\n                    }\n                );\n                editor.deleteComment();\n                expect(editor.get('dirty')).toBe(false);\n            });\n        });\n    });\n\n    describe('Operations', function() {\n        it('setExtraData', function() {\n            editor.setExtraData('key1', 'strvalue');\n            editor.setExtraData('key2', 42);\n\n            expect(editor.get('extraData')).toEqual({\n                key1: 'strvalue',\n                key2: 42,\n            });\n        });\n\n        it('getExtraData', function() {\n            editor.set('extraData', {\n                mykey: 'value',\n            });\n\n            expect(editor.getExtraData('mykey')).toBe('value');\n        });\n\n        describe('beginEdit', function() {\n            it('With canEdit=true', function() {\n                editor.set({\n                    comment: createComment(),\n                    canEdit: true,\n                });\n\n                editor.beginEdit();\n                expect(console.assert.calls.argsFor(0)[0]).toBeTruthy();\n            });\n\n            it('With canEdit=false', function() {\n                editor.set({\n                    comment: createComment(),\n                    canEdit: false,\n                });\n\n                expect(function() { editor.beginEdit(); }).toThrow();\n                expect(console.assert.calls.argsFor(0)[0]).toBeFalsy();\n            });\n\n            it('With no comment', function() {\n                expect(function() { editor.beginEdit(); }).toThrow();\n                expect(console.assert.calls.argsFor(0)[0]).toBeTruthy();\n                expect(console.assert.calls.argsFor(1)[0]).toBeFalsy();\n            });\n        });\n\n        describe('cancel', function() {\n            beforeEach(function() {\n                spyOn(editor, 'close');\n                spyOn(editor, 'trigger');\n            });\n\n            it('With comment', function() {\n                const comment = createComment();\n                spyOn(comment, 'destroyIfEmpty');\n                editor.set('comment', comment);\n\n                editor.cancel();\n                expect(comment.destroyIfEmpty).toHaveBeenCalled();\n                expect(editor.trigger).toHaveBeenCalledWith('canceled');\n                expect(editor.close).toHaveBeenCalled();\n            });\n\n            it('Without comment', function() {\n                editor.cancel();\n                expect(editor.trigger).not.toHaveBeenCalledWith('canceled');\n                expect(editor.close).toHaveBeenCalled();\n            });\n        });\n\n        describe('destroy', function() {\n            let comment;\n\n            beforeEach(function() {\n                comment = createComment();\n\n                spyOn(comment, 'destroy').and.callFake(\n                    (callbacks, context) => {\n                        if (callbacks && callbacks.success) {\n                            callbacks.success.call(context);\n                        }\n                    }\n                );\n\n                spyOn(editor, 'close');\n                spyOn(editor, 'trigger');\n            });\n\n            it('With canDelete=false', function() {\n                /* Set these in order, to override canDelete. */\n                editor.set('comment', comment);\n                editor.set('canDelete', false);\n\n                expect(() => editor.deleteComment()).toThrow();\n                expect(console.assert.calls.argsFor(0)[0]).toBeFalsy();\n                expect(comment.destroy).not.toHaveBeenCalled();\n                expect(editor.trigger).not.toHaveBeenCalledWith('deleted');\n                expect(editor.close).not.toHaveBeenCalled();\n            });\n\n            it('With canDelete=true', function() {\n                /* Set these in order, to override canDelete. */\n                editor.set('comment', comment);\n                editor.set('canDelete', true);\n\n                editor.deleteComment();\n                expect(console.assert.calls.argsFor(0)[0]).toBeTruthy();\n                expect(comment.destroy).toHaveBeenCalled();\n                expect(editor.trigger).toHaveBeenCalledWith('deleted');\n                expect(editor.close).toHaveBeenCalled();\n            });\n        });\n\n        describe('save', function() {\n            let comment;\n\n            beforeEach(function() {\n                comment = createComment();\n                spyOn(comment, 'save').and.callFake(options => {\n                    if (options && options.success) {\n                        options.success();\n                    }\n                });\n\n                spyOn(editor, 'trigger');\n            });\n\n            it('With canSave=false', function() {\n                /* Set these in order, to override canSave. */\n                editor.set('comment', comment);\n                editor.set('canSave', false);\n\n                expect(() => editor.save()).toThrow();\n                expect(console.assert.calls.argsFor(0)[0]).toBeFalsy();\n                expect(comment.save).not.toHaveBeenCalled();\n                expect(editor.trigger).not.toHaveBeenCalledWith('saved');\n            });\n\n            it('With canSave=true', function() {\n                /* Set these in order, to override canSave. */\n                const text = 'My text';\n                const issueOpened = true;\n\n                comment.set('issueOpened', false);\n                editor.set('comment', comment);\n                editor.set({\n                    text: text,\n                    issue_opened: issueOpened,\n                    canSave: true,\n                    richText: true,\n                });\n                editor.setExtraData('mykey', 'myvalue');\n\n                editor.save();\n                expect(console.assert.calls.argsFor(0)[0]).toBeTruthy();\n                expect(comment.save).toHaveBeenCalled();\n                expect(comment.get('text')).toBe(text);\n                expect(comment.get('issueOpened')).toBe(issueOpened);\n                expect(comment.get('richText')).toBe(true);\n                expect(comment.get('extraData')).toEqual({\n                    mykey: 'myvalue',\n                    require_verification: false,\n                });\n                expect(editor.get('dirty')).toBe(false);\n                expect(editor.trigger).toHaveBeenCalledWith('saved');\n            });\n        });\n    });\n});\n"]}