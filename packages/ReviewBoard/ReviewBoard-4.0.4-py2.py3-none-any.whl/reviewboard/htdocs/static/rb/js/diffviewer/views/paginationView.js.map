{"version":3,"sources":["paginationView.es6.js"],"names":[],"mappings":";;AAAA;;;AAGA,GAAG,cAAH,GAAoB,SAAS,IAAT,CAAc,MAAd,CAAqB;AACrC,cAAU,EAAE,QAAF,01BAD2B;;AAsBrC,YAAQ;AACJ,gCAAwB;AADpB,KAtB6B;;AA0BrC;;;AAGA,cA7BqC,wBA6BxB;AACT,aAAK,QAAL,CAAc,KAAK,KAAnB,EAA0B,QAA1B,EAAoC,KAAK,MAAzC;AACH,KA/BoC;;;AAiCrC;;;;;;;AAOA,UAxCqC,oBAwC5B;AACL,aAAK,GAAL,CACK,KADL,GAEK,IAFL,CAEU,KAAK,QAAL,CAAc,EAAE,QAAF,CAAW;AAC3B,uBAAW,kEAEP,CAAC,KAAK,KAAL,CAAW,GAAX,CAAe,OAAf,CAAD,CAFO,CADgB;AAI3B,sDAJ2B;AAK3B,8CAL2B;AAM3B,oDAN2B;AAO3B,6BAAiB,KAAK,sBAAL,EAPU;AAQ3B;AAR2B,SAAX,EASjB,KAAK,KAAL,CAAW,UATM,CAAd,CAFV;;AAaA,eAAO,IAAP;AACH,KAvDoC;;;AAyDrC;;;;;;;;;;;;AAYA,0BArEqC,oCAqEZ;AACrB;;;;;;AAMA,YAAI,cAAc,OAAO,QAAP,CAAgB,MAAhB,IAA0B,EAA5C;AACA,YAAI,QAAQ,EAAZ;;AAEA,YAAI,YAAY,UAAZ,CAAuB,GAAvB,CAAJ,EAAiC;AAC7B,0BAAc,YAAY,MAAZ,CAAmB,CAAnB,CAAd;AACH;;AAED,YAAI,WAAJ,EAAiB;AACb,oBAAQ,YAAY,KAAZ,CAAkB,GAAlB,CAAR;AACA,gBAAM,WAAW,EAAjB;;AAEA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAAM,MAA1B,EAAkC,GAAlC,EAAuC;AACnC,oBAAM,OAAO,MAAM,CAAN,CAAb;;AAEA,oBAAI,CAAC,KAAK,UAAL,CAAgB,OAAhB,CAAL,EAA+B;AAC3B,6BAAS,IAAT,CAAc,IAAd;AACH;AACJ;;AAED,gBAAI,SAAS,MAAT,GAAkB,CAAtB,EAAyB;AACrB,uBAAO,MAAM,SAAS,IAAT,CAAc,GAAd,CAAb;AACH;AACJ;;AAED,eAAO,EAAP;AACH,KArGoC;;;AAuGrC;;;;;;;AAOA,kBA9GqC,0BA8GtB,EA9GsB,EA8GlB;AACf,YAAM,OAAO,EAAE,GAAG,aAAL,EAAoB,IAApB,CAAyB,MAAzB,CAAb;;AAEA,YAAI,SAAS,SAAb,EAAwB;AACpB,iBAAK,OAAL,CAAa,cAAb,EAA6B,IAA7B;;AAEA,eAAG,eAAH;AACA,eAAG,cAAH;AACH;AACJ;AAvHoC,CAArB,CAApB","file":"paginationView.js","sourcesContent":["/**\n * A view for selecting pages.\n */\nRB.PaginationView = Backbone.View.extend({\n    template: _.template(dedent`\n        <% if (isPaginated) { %>\n         <%- splitText %>\n         <% if (hasPrevious) { %>\n          <span class=\"paginate-link\" data-page=\"<%- previousPage %>\"><a href=\"?page=<%- previousPage %><%= extraURLOptions %>\" title=\"<%- previousPageText %>\">&lt;</a></span>\n         <% } %>\n         <% _.each(pageNumbers, function(page) { %>\n          <% if (page === currentPage) { %>\n           <span class=\"paginate-current\" title=\"<%- currentPageText %>\"><%- page %></span>\n          <% } else { %>\n           <span class=\"paginate-link\" data-page=\"<%- page %>\"><a href=\"?page=<%- page %><%= extraURLOptions %>\"\n               title=\"<% print(interpolate(pageText, [page])); %>\"\n               ><%- page %></a></span>\n          <% } %>\n         <% }); %>\n         <% if (hasNext) { %>\n          <span class=\"paginate-link\" data-page=\"<%- nextPage %>\"><a href=\"?page=<%- nextPage %><%= extraURLOptions %>\" title=\"<%- nextPageText %>\">&gt;</a></span>\n         <% } %>\n        <% } %>\n    `),\n\n    events: {\n        'click .paginate-link': '_onPageClicked',\n    },\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        this.listenTo(this.model, 'change', this.render);\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.PaginationView:\n     *     This object, for chaining.\n     */\n    render() {\n        this.$el\n            .empty()\n            .html(this.template(_.defaults({\n                splitText: interpolate(\n                    gettext('This diff has been split across %s pages:'),\n                    [this.model.get('pages')]),\n                previousPageText: gettext('Previous Page'),\n                nextPageText: gettext('Next Page'),\n                currentPageText: gettext('Current Page'),\n                extraURLOptions: this._buildExtraQueryString(),\n                pageText: gettext('Page %s'),\n            }, this.model.attributes)));\n\n        return this;\n    },\n\n    /**\n     * Build the extra query string to tack onto any pagination links.\n     *\n     * This will take the current query string on the page, strip out the\n     * ``page=`` part, and return the resulting query string for use in\n     * any links.\n     *\n     * Returns:\n     *     string:\n     *     The new query string to tack onto an existing URL. This will come\n     *     with a leading ``&`` if there's content in the string.\n     */\n    _buildExtraQueryString() {\n        /*\n         * Ideally we'd use Djblets.parseQueryString() for most of this, but\n         * that doesn't maintain order (and it's perhaps not worth doing so).\n         * We need to keep the order so that we generate query strings that\n         * can be effectively cached by the browser in a reliable way.\n         */\n        let queryString = window.location.search || '';\n        let parts = [];\n\n        if (queryString.startsWith('?')) {\n            queryString = queryString.substr(1);\n        }\n\n        if (queryString) {\n            parts = queryString.split('&');\n            const newParts = [];\n\n            for (let i = 0; i < parts.length; i++) {\n                const part = parts[i];\n\n                if (!part.startsWith('page=')) {\n                    newParts.push(part);\n                }\n            }\n\n            if (newParts.length > 0) {\n                return '&' + newParts.join('&');\n            }\n        }\n\n        return '';\n    },\n\n    /**\n     * Callback for when a page number is clicked.\n     *\n     * Args:\n     *     ev (Event):\n     *         The click event.\n     */\n    _onPageClicked(ev) {\n        const page = $(ev.currentTarget).data('page');\n\n        if (page !== undefined) {\n            this.trigger('pageSelected', page);\n\n            ev.stopPropagation();\n            ev.preventDefault();\n        }\n    },\n});\n"]}