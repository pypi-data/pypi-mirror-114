{"version":3,"sources":["repositorySelectionView.es6.js"],"names":[],"mappings":";;AAAA;;;AAGA,GAAG,uBAAH,GAA6B,GAAG,cAAH,CAAkB,MAAlB,CAAyB;AAClD,aAAS,IADyC;AAElD,eAAW,yCAFuC;AAGlD,kBAAc,GAAG,cAHiC;;AAKlD,cAAU,EAAE,QAAF,+iBALwC;;AA0BlD,YAAQ;AACJ,2CAAmC;AAD/B,KA1B0C;;AA8BlD;;;AAGA,cAjCkD,wBAiCrC;AACT,WAAG,cAAH,CAAkB,SAAlB,CAA4B,UAA5B,CAAuC,KAAvC,CAA6C,IAA7C,EAAmD,SAAnD;;AAEA,aAAK,SAAL,GAAiB,IAAjB;AACA,aAAK,aAAL,GAAqB,KAArB;;AAEA,aAAK,QAAL,CAAc,KAAK,UAAnB,EAA+B,UAA/B,EAA2C,KAAK,qBAAhD;AACH,KAxCiD;;;AA0ClD;;;;;;;AAOA,UAjDkD,oBAiDzC;AACL,aAAK,GAAL,CAAS,IAAT,CAAc,KAAK,QAAL,CAAc;AACxB,sDADwB;AAExB;AAFwB,SAAd,CAAd;;AAKA,aAAK,UAAL,GAAkB,KAAK,CAAL,CAAO,4CAAP,CAAlB;;AAEA,aAAK,WAAL,GAAmB,KAAK,CAAL,CAAO,2BAAP,CAAnB;;AAEA,WAAG,cAAH,CAAkB,SAAlB,CAA4B,MAA5B,CAAmC,KAAnC,CAAyC,IAAzC,EAA+C,SAA/C;;AAEA,eAAO,IAAP;AACH,KA9DiD;;;AAgElD;;;AAGA,YAnEkD,sBAmEvC;AAAA;;AACP,aAAK,KAAL,CAAW,OAAX,CAAmB,gBAAQ;AACvB,gBAAI,KAAK,KAAL,KAAe,MAAK,SAAxB,EAAmC;AAC/B,qBAAK,GAAL,CAAS,WAAT,CAAqB,QAArB;AACH;AACJ,SAJD;;AAMA,aAAK,SAAL,GAAiB,IAAjB;;AAEA,aAAK,OAAL,CAAa,UAAb,EAAyB,IAAzB;AACH,KA7EiD;;;AA+ElD;;;;;;;;;;AAUA,yBAzFkD,iCAyF5B,IAzF4B,EAyFtB;AACxB,aAAK,SAAL,GAAiB,IAAjB;;AAEA,aAAK,KAAL,CAAW,OAAX,CAAmB,gBAAQ;AACvB,gBAAI,KAAK,KAAL,KAAe,IAAnB,EAAyB;AACrB,qBAAK,GAAL,CAAS,QAAT,CAAkB,YAAlB;AACH,aAFD,MAEO;AACH,qBAAK,GAAL,CAAS,WAAT,CAAqB,YAArB;AACH;AACJ,SAND;;AAQA,aAAK,OAAL,CAAa,UAAb,EAAyB,IAAzB;AACH,KArGiD;;;AAuGlD;;;;;AAKA,oBA5GkD,8BA4G/B;AACf,YAAM,aAAa,KAAK,WAAL,CAAiB,GAAjB,GAAuB,WAAvB,EAAnB;;AAEA,aAAK,KAAL,CAAW,OAAX,CAAmB,gBAAQ;AACvB,iBAAK,GAAL,CAAS,UAAT,CAAoB,KAAK,SAAL,CAAe,OAAf,CAAuB,UAAvB,MAAuC,CAAC,CAA5D;AACH,SAFD;AAGH;AAlHiD,CAAzB,CAA7B","file":"repositorySelectionView.js","sourcesContent":["/**\n * A view for selecting a repository from a collection.\n */\nRB.RepositorySelectionView = RB.CollectionView.extend({\n    tagName: 'ul',\n    className: 'rb-c-sidebar__items repository-selector',\n    itemViewType: RB.RepositoryView,\n\n    template: _.template(dedent`\n        <li class=\"rb-c-sidebar__section -no-icons\">\n         <header class=\"rb-c-sidebar__section-header\">\n          <%- repositoriesLabel %>\n         </header>\n         <ul class=\"rb-c-sidebar__items\">\n          <li class=\"rb-c-sidebar__item\">\n           <div class=\"rb-c-sidebar__item-label\">\n            <div class=\"rb-c-search-field\">\n             <span class=\"fa fa-search\"></span>\n             <input class=\"rb-c-search-field__input\"\n                    placeholder=\"<%- filterLabel %>\" />\n            </div>\n           </div>\n          </li>\n         </ul>\n         <ul class=\"rb-c-sidebar__items\n                    rb-c-new-review-request__repository-items\">\n        </li>\n    `),\n\n    events: {\n        'input .rb-c-search-field__input': '_onSearchChanged',\n    },\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        RB.CollectionView.prototype.initialize.apply(this, arguments);\n\n        this._selected = null;\n        this._searchActive = false;\n\n        this.listenTo(this.collection, 'selected', this._onRepositorySelected);\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.RepositorySelectionView:\n     *     This object, for chaining.\n     */\n    render() {\n        this.$el.html(this.template({\n            repositoriesLabel: gettext('Repositories'),\n            filterLabel: gettext('Filter'),\n        }));\n\n        this.$container = this.$('.rb-c-new-review-request__repository-items');\n\n        this._$searchBox = this.$('.rb-c-search-field__input');\n\n        RB.CollectionView.prototype.render.apply(this, arguments);\n\n        return this;\n    },\n\n    /**\n     * Unselect a repository.\n     */\n    unselect() {\n        this.views.forEach(view => {\n            if (view.model === this._selected) {\n                view.$el.removeClass('active');\n            }\n        });\n\n        this._selected = null;\n\n        this.trigger('selected', null);\n    },\n\n    /**\n     * Callback for when an individual repository is selected.\n     *\n     * Ensures that the selected repository has the 'selected' class applied\n     * (and no others do), and triggers the 'selected' event on the view.\n     *\n     * Args:\n     *     item (RB.Repository):\n     *         The selected repository;\n     */\n    _onRepositorySelected(item) {\n        this._selected = item;\n\n        this.views.forEach(view => {\n            if (view.model === item) {\n                view.$el.addClass('-is-active');\n            } else {\n                view.$el.removeClass('-is-active');\n            }\n        });\n\n        this.trigger('selected', item);\n    },\n\n    /**\n     * Callback for when the text in the search input changes.\n     *\n     * Filters the visible items.\n     */\n    _onSearchChanged() {\n        const searchTerm = this._$searchBox.val().toLowerCase();\n\n        this.views.forEach(view => {\n            view.$el.setVisible(view.lowerName.indexOf(searchTerm) !== -1);\n        });\n    },\n});\n"]}