{"version":3,"sources":["changeListPageView.es6.js"],"names":[],"mappings":"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","file":"changeListPageView.js","sourcesContent":["(function() {\n\n\n/**\n * A drawer containing actions that can be performed on selected objects.\n *\n * This displays any actions provided by the Django\n * :py:class:`~django.contrib.admin.ModelAdmin` class that can apply to\n * selected rows in the change list.\n */\nconst ActionsDrawerView = RB.DrawerView.extend({\n    template: _.template(dedent`\n        <p class=\"rb-c-drawer__summary\"></p>\n        <div class=\"rb-c-drawer__actions\">\n         <ul class=\"rb-c-drawer__action-group\">\n          <% _.each(actions, function(actionInfo) { %>\n           <li class=\"rb-c-drawer__action js-action-<%- actionInfo.id %>\">\n            <strong><%- actionInfo.label %></strong>\n           </li>\n          <% }) %>\n         </ul>\n        </div>\n    `),\n\n    /**\n     * Initialize the drawer.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the drawer.\n     *\n     * Option Args:\n     *     actions (Array of object):\n     *         The actions to show in the drawer. Each is an object with the\n     *         following keys:\n     *\n     *         ``id`` (:js:class:`string`):\n     *             The action's identifier.\n     *\n     *         ``label`` (:js:class:`string`):\n     *             The human-readable label.\n     */\n    initialize(options) {\n        this.actions = options.actions;\n    },\n\n    /**\n     * Render the drawer.\n     *\n     * Returns:\n     *     ActionsDrawerView:\n     *     This instance, for chaining.\n     */\n    render() {\n        RB.DrawerView.prototype.render.call(this);\n\n        this.$content.html(this.template({\n            actions: this.actions,\n        }));\n\n        this.$summary = this.$('.rb-c-drawer__summary');\n\n        return this;\n    },\n});\n\n\n/**\n * The view for the Administration UI's Change List page.\n *\n * This manages the dynamic state of the Change List page, which is used for\n * showing all entries for a model.\n *\n * This includes a drawer for the actions that can be performed on selected\n * entries (defined in :py:class:`~django.contrib.admin.ModelAdmin`), and\n * managing the selection state in general.\n */\nRB.Admin.ChangeListPageView = RB.Admin.PageView.extend({\n    events: {\n        'change #action-toggle': '_onToggleAllCheckboxesChanged',\n        'change .action-select': '_onRowSelected',\n    },\n\n    /**\n     * Initialize the page view.\n     */\n    initialize() {\n        RB.Admin.PageView.prototype.initialize.apply(this, arguments);\n\n        this.drawerShown = false;\n    },\n\n    /**\n     * Render the page contents.\n     *\n     * This should be implemented by subclasses that need to render any\n     * UI elements.\n     */\n    renderPage() {\n        RB.Admin.PageView.prototype.renderPage.call(this);\n\n        const model = this.model;\n\n        this._$changelist = this.$pageContent.children(\n            '.rb-c-admin-change-list');\n        this._$form = this._$changelist.children(\n            '.rb-c-admin-change-list__form');\n        this._$datagrid = this._$form.children(\n            '.rb-c-admin-change-list__results');\n        this._datagrid = this._$datagrid.data('datagrid');\n\n        this.setDrawer(new ActionsDrawerView({\n            actions: model.get('actions'),\n        }));\n\n        const modelNameLower = model.get('modelName').toLowerCase();\n        const modelNameLowerPlural =\n            model.get('modelNamePlural').toLowerCase();\n\n        this.listenTo(model, 'change:selectionCount', (model, count) => {\n            this.drawer.$summary.text(\n                N_(`${count} ${modelNameLower} selected`,\n                   `${count} ${modelNameLowerPlural} selected`,\n                   count));\n\n            const showDrawer = (count > 0);\n\n            if (showDrawer !== this._drawerShown) {\n                if (showDrawer) {\n                    this.drawer.show();\n                } else {\n                    this.drawer.hide();\n                }\n\n                this._drawerShown = showDrawer;\n            }\n        });\n    },\n\n    /**\n     * Handle a page resize.\n     *\n     * This will lay out the elements to take the full height of the\n     * page.\n     */\n    onResize() {\n        this.resizeElementForFullHeight(this._$changelist);\n        this.resizeElementForFullHeight(this._$form);\n        this._datagrid.resizeToFit();\n    },\n\n    /**\n     * Handle a toggle on the checkbox in the datagrid header.\n     *\n     * This will toggle all rows' checkboxes to match the state of the\n     * one in the header.\n     *\n     * Args:\n     *     e (Event):\n     *         The change event.\n     */\n    _onToggleAllCheckboxesChanged(e) {\n        const $toggleCheckbox = $(e.target);\n\n        this._$datagrid.find('.action-select')\n            .prop('checked', $toggleCheckbox.prop('checked'))\n            .change();\n    },\n\n    /**\n     * Handle a toggle on a checkbox in a row.\n     *\n     * This will mark the row as selected or unselected, depending on the\n     * state of the checkbox.\n     *\n     * Args:\n     *     e (Event):\n     *         The change event.\n     */\n    _onRowSelected(e) {\n        const $checkbox = $(e.target);\n        const objectID = $checkbox.val();\n\n        if ($checkbox.prop('checked')) {\n            this.model.select(objectID);\n        } else {\n            this.model.unselect(objectID);\n        }\n    },\n});\n\n\n})();\n"]}