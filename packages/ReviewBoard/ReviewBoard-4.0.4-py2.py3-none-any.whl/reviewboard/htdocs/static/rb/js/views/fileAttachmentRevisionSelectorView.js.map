{"version":3,"sources":["fileAttachmentRevisionSelectorView.es6.js"],"names":[],"mappings":";;AAAA;;;AAGA,GAAG,kCAAH,GAAwC,GAAG,oBAAH,CAAwB,MAAxB,CAA+B;AACnE;;;AAGA,cAJmE,wBAItD;AACT,WAAG,oBAAH,CAAwB,SAAxB,CAAkC,UAAlC,CAA6C,IAA7C,CAAkD,IAAlD,EAAwD;AACpD,8BAAkB,IADkC;AAEpD,wBAAY;AAFwC,SAAxD;AAIH,KATkE;;;AAWnE;;;;;;;AAOA,UAlBmE,oBAkB1D;AACL,YAAM,eAAe,KAAK,KAAL,CAAW,GAAX,CAAe,cAAf,CAArB;AACA,YAAM,SAAS,oBAAf;;AAEA,aAAK,IAAI,IAAI,CAAb,EAAgB,KAAK,YAArB,EAAmC,GAAnC,EAAwC;AACpC,mBAAO,IAAP,CAAY,EAAE,QAAF,EAAZ;AACH;;AAED,WAAG,oBAAH,CAAwB,SAAxB,CAAkC,MAAlC,CAAyC,IAAzC,CACI,IADJ,EACU,MADV,EACkB,IADlB,CACuB,0CADvB;AAEH,KA5BkE;;;AA8BnE;;;AAGA,WAjCmE,qBAiCzD;AACN,YAAM,WAAW,KAAK,KAAL,CAAW,GAAX,CAAe,cAAf,CAAjB;AACA,YAAM,eAAe,KAAK,KAAL,CAAW,GAAX,CAAe,cAAf,CAArB;;AAEA,YAAI,YAAJ,EAAkB;AACd,iBAAK,OAAL,GAAe,CAAC,QAAD,EAAW,YAAX,CAAf;AACH,SAFD,MAEO;AACH,iBAAK,OAAL,GAAe,CAAC,CAAD,EAAI,QAAJ,CAAf;AACH;;AAED,YAAI,KAAK,SAAT,EAAoB;AAChB,iBAAK,cAAL;AACH;AACJ,KA9CkE;;;AAgDnE;;;;;;;;;AASA,iBAzDmE,yBAyDrD,EAzDqD,EAyDjD;AACd,YAAM,UAAU,EAAE,GAAG,aAAL,CAAhB;AACA,aAAK,OAAL,CAAa,kBAAb,EAAiC,CAAC,CAAD,EAAI,QAAQ,IAAR,CAAa,UAAb,CAAJ,CAAjC;AACH;AA5DkE,CAA/B,CAAxC","file":"fileAttachmentRevisionSelectorView.js","sourcesContent":["/**\n * A view that allows users to select a revision of a file attachment to view.\n */\nRB.FileAttachmentRevisionSelectorView = RB.RevisionSelectorView.extend({\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        RB.RevisionSelectorView.prototype.initialize.call(this, {\n            firstLabelActive: true,\n            numHandles: 2,\n        });\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.FileAttachmentRevisionSelectorView:\n     *     This object, for chaining.\n     */\n    render() {\n        const numRevisions = this.model.get('numRevisions');\n        const labels = [gettext('No Diff')];\n\n        for (let i = 1; i <= numRevisions; i++) {\n            labels.push(i.toString());\n        }\n\n        RB.RevisionSelectorView.prototype.render.call(\n            this, labels, true /* whether the first label is clickable */);\n    },\n\n    /**\n     * Update the displayed revision based on the model.\n     */\n    _update() {\n        const revision = this.model.get('fileRevision');\n        const diffRevision = this.model.get('diffRevision');\n\n        if (diffRevision) {\n            this._values = [revision, diffRevision];\n        } else {\n            this._values = [0, revision];\n        }\n\n        if (this._rendered) {\n            this._updateHandles();\n        }\n    },\n\n    /**\n     * Callback for when one of the labels is clicked.\n     *\n     * This will jump to the target revision.\n     *\n     * Args:\n     *     ev (Event):\n     *         The click event.\n     */\n    _onLabelClick(ev) {\n        const $target = $(ev.currentTarget);\n        this.trigger('revisionSelected', [0, $target.data('revision')]);\n    },\n});\n"]}