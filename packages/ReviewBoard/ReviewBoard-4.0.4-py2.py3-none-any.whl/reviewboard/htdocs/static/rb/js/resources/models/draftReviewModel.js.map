{"version":3,"sources":["draftReviewModel.es6.js"],"names":[],"mappings":";;AAAA;;;;;;;;AAQA,GAAG,WAAH,GAAiB,GAAG,MAAH,CAAU,MAAV,CAAiB,EAAE,MAAF,CAAS;AACvC,cAAU,EAAE,QAAF,CAAW;AACjB,2BAAmB,KADF;AAEjB,4BAAoB;AAFH,KAAX,EAGP,GAAG,MAAH,CAAU,SAAV,CAAoB,QAApB,EAHO,CAD6B;;AAMvC,mBAAe,EAAE,QAAF,CAAW;AACtB,2BAAmB,qBADG;AAEtB,4BAAoB;AAFE,KAAX,EAGZ,GAAG,MAAH,CAAU,SAAV,CAAoB,aAHR,CANwB;;AAWvC,qBAAiB,CACb,mBADa,EAEb,oBAFa,EAGf,MAHe,CAGR,GAAG,MAAH,CAAU,SAAV,CAAoB,eAHZ,CAXsB;;AAgBvC,iBAAa,EAAE,QAAF,CAAW;AACpB,2BAAmB,GAAG,eAAH,CAAmB,WADlB;AAEpB,4BAAoB,GAAG,eAAH,CAAmB;AAFnB,KAAX,EAGV,GAAG,MAAH,CAAU,SAAV,CAAoB,WAHV,CAhB0B;;AAsBvC;;;;;;;;;;;;;;;AAeA,WArCuC,qBAqCA;AAAA;;AAAA,YAA/B,OAA+B,uEAAvB,EAAuB;AAAA,YAAnB,OAAmB,uEAAX,SAAW;;AACnC,aAAK,OAAL,CAAa,YAAb;;AAEA,aAAK,KAAL,CAAW;AACP,mBAAO,iBAAM;AACT,sBAAK,GAAL,CAAS,QAAT,EAAmB,IAAnB;AACA,sBAAK,IAAL,CAAU;AACN,2BAAO,QAAQ,KADT;AAEN,6BAAS,mBAAM;AACX,8BAAK,OAAL,CAAa,WAAb;;AAEA,4BAAI,EAAE,UAAF,CAAa,QAAQ,OAArB,CAAJ,EAAmC;AAC/B,oCAAQ,OAAR,CAAgB,IAAhB,CAAqB,OAArB;AACH;AACJ,qBARK;AASN,2BAAO,eAAC,KAAD,EAAQ,GAAR,EAAgB;AACnB,8BAAM,OAAN,CAAc,cAAd,EAA8B,IAAI,SAAlC;;AAEA,4BAAI,EAAE,UAAF,CAAa,QAAQ,KAArB,CAAJ,EAAiC;AAC7B,oCAAQ,KAAR,CAAc,IAAd,CAAmB,OAAnB,EAA4B,KAA5B,EAAmC,GAAnC;AACH;AACJ;AAfK,iBAAV,EAgBG,KAhBH;AAiBH,aApBM;AAqBP,mBAAO;AArBA,SAAX,EAsBG,IAtBH;AAuBH;AA/DsC,CAAT,EAgE/B,GAAG,uBAhE4B,CAAjB,CAAjB","file":"draftReviewModel.js","sourcesContent":["/**\n * A draft review.\n *\n * Draft reviews are more complicated than most objects. A draft may already\n * exist on the server, in which case we need to be able to get its ID. A\n * special resource exists at /reviews/draft/ which will redirect to the\n * existing draft if one exists, and return 404 if not.\n */\nRB.DraftReview = RB.Review.extend(_.extend({\n    defaults: _.defaults({\n        publishAndArchive: false,\n        publishToOwnerOnly: false,\n    }, RB.Review.prototype.defaults()),\n\n    attrToJsonMap: _.defaults({\n        publishAndArchive: 'publish_and_archive',\n        publishToOwnerOnly: 'publish_to_owner_only',\n    }, RB.Review.prototype.attrToJsonMap),\n\n    serializedAttrs: [\n        'publishAndArchive',\n        'publishToOwnerOnly',\n    ].concat(RB.Review.prototype.serializedAttrs),\n\n    serializers: _.defaults({\n        publishAndArchive: RB.JSONSerializers.onlyIfValue,\n        publishToOwnerOnly: RB.JSONSerializers.onlyIfValue,\n    }, RB.Review.prototype.serializers),\n\n\n    /**\n     * Publish the review.\n     *\n     * Before publish, the \"publishing\" event will be triggered.\n     *\n     * After the publish has succeeded, the \"published\" event will be\n     * triggered.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the operation, including callbacks.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     */\n    publish(options={}, context=undefined) {\n        this.trigger('publishing');\n\n        this.ready({\n            ready: () => {\n                this.set('public', true);\n                this.save({\n                    attrs: options.attrs,\n                    success: () => {\n                        this.trigger('published');\n\n                        if (_.isFunction(options.success)) {\n                            options.success.call(context);\n                        }\n                    },\n                    error: (model, xhr) => {\n                        model.trigger('publishError', xhr.errorText);\n\n                        if (_.isFunction(options.error)) {\n                            options.error.call(context, model, xhr);\n                        }\n                    }\n                }, this);\n            },\n            error: error\n        }, this);\n    }\n}, RB.DraftResourceModelMixin));\n"]}