{"version":3,"sources":["draftReviewBannerView.es6.js"],"names":[],"mappings":"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","file":"draftReviewBannerView.js","sourcesContent":["/**\n * A banner that represents a pending draft review.\n *\n * The banner displays at the top of the page and provides buttons for\n * editing the review, publishing, and discarding.\n *\n * The banner is a singleton. There's only ever one at a time.\n */\nRB.DraftReviewBannerView = Backbone.View.extend({\n    events: {\n        'click #review-banner-edit': '_onEditReviewClicked',\n        'click #review-banner-discard': '_onDiscardClicked',\n    },\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     reviewRequestEditor (RB.ReviewRequestEditor):\n     *         The review request editor.\n     */\n    initialize(options) {\n        this.options = options;\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.DraftReviewBannerView:\n     *     This object, for chaining.\n     */\n    render() {\n        this._$buttons = this.$('input');\n        this._$banner = this.$('.banner');\n\n        const model = this.model;\n        this.listenTo(model, 'saving destroying',\n                      () => this._$buttons.prop('disabled', true));\n        this.listenTo(model, 'saved destroyed',\n                      () => this._$buttons.prop('disabled', false));\n        this.listenTo(model, 'publishError', errorText => alert(errorText));\n\n        /*\n         * Just a note about how we're instantiating the button below, which\n         * is important for future work on this banner.\n         *\n         * When a reviewable page is served up, it always contains the HTML\n         * for this banner (possibly hidden), so that the page doesn't jump\n         * during rendering. This will contain (amongst other things) a\n         * bare-minimum implementation of the Publish button (just enough to,\n         * again, not cause a jump).\n         *\n         * When we instantiate the RB.SplitButtonView, its parent\n         * RB.MenuButtonView will will replace the Publish button's HTML with\n         * a more fully-defined version.\n         *\n         * The trouble comes from passing in an explicit element while running\n         * unit tests, which do not contain the HTML for this banner anywhere.\n         * If we attempt to fetch the button using jQuery, and pass the\n         * jQuery-wrapped element to the view below, then we'll end up with\n         * an empty jQuery element. All HTML building and lookups will fail,\n         * resulting in asserts in RB.MenuButtonView.\n         *\n         * So we have to make sure we're passing either a valid DOM element\n         * or a falsy valuy (in which case the button will just make its own\n         * DOM element).\n         */\n        this._publishButton = new RB.SplitButtonView({\n            el: document.getElementById('review-banner-publish-container'),\n            text: gettext('Publish Review'),\n            ariaMenuLabel: gettext('More publishing options'),\n            click: this._onPublishClicked.bind(this),\n            id: 'review-banner-publish',\n            alternatives: [\n                {\n                    text: gettext('... and only e-mail the owner'),\n                    click: () => this._onPublishClicked({\n                        publishToOwnerOnly: true,\n                    }),\n                    id: 'review-banner-publish-submitter-only',\n                },\n                {\n                    text: gettext('... and archive the review request'),\n                    click: () => this._onPublishClicked({\n                        publishAndArchive: true,\n                    }),\n                    id: 'review-banner-publish-and-archive',\n                },\n            ],\n\n        });\n\n        this._publishButton.render();\n\n        if (!this.$el.prop('hidden')) {\n            this.show();\n        }\n\n        this.$el.addClass('ui-ready');\n\n        return this;\n    },\n\n    /*\n     * Show the banner.\n     *\n     * The banner will appear to slide down from the top of the page.\n     */\n    show() {\n        const height = this._$banner.outerHeight();\n\n        RB.scrollManager.markForUpdate(this.$el);\n\n        this.$el\n            .prop('hidden', false)\n            .removeClass('hidden')\n            .css({\n                maxHeight: height,\n                height: height,\n            });\n        RB.scrollManager.scrollYOffset += height;\n        RB.scrollManager.markUpdated(this.$el);\n    },\n\n    /*\n     * Hide the banner.\n     *\n     * The banner will slide up to the top of the page.\n     */\n    hide() {\n        RB.scrollManager.markForUpdate(this.$el);\n\n        const height = this._$banner.outerHeight();\n\n        this.$el\n            .prop('hidden', true)\n            .addClass('hidden')\n            .css('max-height', '');\n\n        /*\n         * If we set the height immediately, the browser will appear to not\n         * animate, since it can't transition heights (only max-heights). So\n         * we delay for a short period after we know the transition will have\n         * completed.\n         */\n        _.delay(\n            () => {\n                this.$el.css('height', '');\n                RB.scrollManager.markUpdated(this.$el);\n                RB.scrollManager.scrollYOffset -= height;\n            },\n            500);\n    },\n\n    /**\n     * Hide the banner and reloads the page.\n     *\n     * XXX Remove this function when we make the pages more dynamic.\n     */\n    hideAndReload() {\n        this.hide();\n\n        /*\n         * hideAndReload might have been called from within a $.funcQueue.\n         * With Firefox, later async functions that are queued in the\n         * $.funcQueue will not run when we change window.location, which\n         * means that we might miss out on some teardown that was\n         * scheduled. We defer changing the location until the next tick\n         * of the event loop to let any teardown occur.\n         */\n        _.defer(() => {\n            window.location = this.model.get('parentObject').get('reviewURL');\n        });\n    },\n\n    /**\n     * Return the height of the banner.\n     *\n     * Returns:\n     *     number:\n     *     The height of the banner.\n     */\n    getHeight() {\n        return this._$banner.outerHeight();\n    },\n\n    /**\n     * Remove the banner from the page.\n     */\n    remove() {\n        if (this._publishButton) {\n            this._publishButton.remove();\n        }\n\n        _super(this).remove.call(this);\n    },\n\n    /**\n     * Handler for the Edit Review button.\n     *\n     * Displays the review editor dialog.\n     *\n     * Returns:\n     *     boolean:\n     *     false, always.\n     */\n    _onEditReviewClicked() {\n        RB.ReviewDialogView.create({\n            review: this.model,\n            reviewRequestEditor: this.options.reviewRequestEditor,\n        });\n\n        return false;\n    },\n\n    /**\n     * Handler for the Publish button.\n     *\n     * Publishes the review.\n     *\n     * Args:\n     *     options (object):\n     *         Options that determine special cases for submission.\n     *\n     * Option Args:\n     *     publishToOwnerOnly (boolean):\n     *         Whether or not we should only notify the submitter of the review.\n     *\n     *     publishAndArchive (boolean):\n     *         Whether or not we should archive the review after it is published.\n     *\n     * Returns:\n     *     boolean:\n     *     false, always.\n     */\n    _onPublishClicked(options={}) {\n        if (options.publishToOwnerOnly) {\n            this.model.set('publishToOwnerOnly', true);\n        }\n\n        if (options.publishAndArchive) {\n            this.model.set('publishAndArchive', true);\n        }\n\n        this.model.publish({\n            attrs: ['public', 'publishToOwnerOnly', 'publishAndArchive'],\n        });\n\n        return false;\n    },\n\n    /**\n     * Handler for the Discard button.\n     *\n     * Prompts the user to confirm that they want the review discarded.\n     * If they confirm, the review will be discarded.\n     *\n     * Returns:\n     *     boolean:\n     *     false, always.\n     */\n    _onDiscardClicked() {\n        $('<p/>')\n            .text(gettext('If you discard this review, all related comments will be permanently deleted.'))\n            .modalBox({\n                title: gettext('Are you sure you want to discard this review?'),\n                buttons: [\n                    $('<input type=\"button\">')\n                        .val(gettext('Cancel')),\n                    $('<input type=\"button\">')\n                        .val(gettext('Discard'))\n                        .click(() => this.model.destroy()),\n                ],\n            });\n\n        return false;\n    },\n}, {\n    instance: null,\n\n    /**\n     * Create the draft review banner singleton.\n     *\n     * Returns:\n     *     RB.DraftReviewBannerView:\n     *     The banner view.\n     */\n    create(options) {\n        if (!this.instance) {\n            this.instance = new RB.DraftReviewBannerView(options);\n            this.instance.render();\n        }\n\n        return this.instance;\n    },\n});\n"]}