{"version":3,"sources":["datagridPageView.es6.js"],"names":[],"mappings":"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","file":"datagridPageView.js","sourcesContent":["/**\n * Manages the UI for the page containing a main datagrid.\n *\n * This renders the datagrid, handles events, and allows for multi-row\n * actions.\n */\nRB.DatagridPageView = RB.PageView.extend({\n    RELOAD_INTERVAL_MS: 5 * 60 * 1000,\n\n    /* The View class to use for an actions menu, if any. */\n    actionsViewType: null,\n\n    events: {\n        'change tbody input[data-checkbox-name=select]': '_onRowSelected',\n        'reloaded .datagrid-wrapper': '_setupDatagrid',\n    },\n\n    /**\n     * Initialize the datagrid page.\n     *\n     * Args:\n     *     options (object, optional):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     periodicReload (boolean):\n     *         Whether to periodically reload the contents of the datagrid.\n     */\n    initialize(options={}) {\n        RB.PageView.prototype.initialize.call(this, options);\n\n        this.periodicReload = !!options.periodicReload;\n\n        this._reloadTimer = null;\n        this._datagrid = null;\n        this._$wrapper = null;\n        this._$datagridBody = null;\n        this._$datagridBodyContainer = null;\n        this._menuShown = false;\n    },\n\n    /**\n     * Render the datagrid page view, and begins listening for events.\n     */\n    renderPage() {\n        RB.InfoboxManagerView.getInstance().setPositioning(\n            RB.ReviewRequestInfoboxView,\n            {\n                /*\n                 * The order on the side matters. If the Summary column is\n                 * on the left-hand side of the datagrid, and \"l\" is first,\n                 * it can end up taking priority, even if \"L\" was a better\n                 * fit (since, if the infobox would need to be pushed a bit\n                 * to fit on screen, it will prefer \"l\"). If the column is on\n                 * the right-hand side of the dashboard, it will prefer \"l\",\n                 * given the room available (taking into account the sidebar).\n                 *\n                 * So \"L\" is a better priority for the common use, and \"l\"\n                 * works well as a fallback.\n                 */\n                side: 'Ll',\n                LDistance: 300,\n                lDistance: 20,\n                yOffset: -20,\n            });\n\n        if (this.actionsViewType) {\n            this._setupActionsDrawer();\n        }\n\n        this.listenTo(this.model, 'refresh', () => this._reload(false));\n\n        this._setupDatagrid();\n\n        if (this.periodicReload) {\n            this._startReloadTimer();\n        }\n\n        return this;\n    },\n\n    /**\n     * Handle page resizes.\n     *\n     * This will update the datagrid to fit on the page after a resize.\n     */\n    onResize() {\n        if (this._datagrid !== null) {\n            this._datagrid.resizeToFit();\n        }\n    },\n\n    /**\n     * Set up the actions pane view.\n     */\n    _setupActionsDrawer() {\n        const drawer = new RB.DrawerView();\n        this.setDrawer(drawer);\n\n        this._actionsView = new this.actionsViewType({\n            model: this.model,\n            datagridView: this,\n        });\n        this._actionsView.render().$el.appendTo(drawer.$content);\n\n        this.listenTo(this.model, 'change:count', (model, count) => {\n            const showMenu = (count > 0);\n\n            if (showMenu === this._menuShown) {\n                return;\n            }\n\n            if (showMenu) {\n                this._showActions();\n\n                /*\n                 * Don't reload the datagrid while the user is\n                 * preparing any actions.\n                 */\n                this._stopReloadTimer();\n            } else {\n                this._hideActions();\n\n                if (this.periodicReload) {\n                    this._startReloadTimer();\n                }\n            }\n\n            this._menuShown = showMenu;\n        });\n    },\n\n    /**\n     * Set up parts of the datagrid.\n     *\n     * This will reference elements inside the datagrid and set up UI.\n     * This is called when first rendering the datagrid, and any time\n     * the datagrid is reloaded from the server.\n     */\n    _setupDatagrid() {\n        this._$wrapper = this.$('#content_container');\n        this._$datagrid = this._$wrapper.find('.datagrid-wrapper');\n        this._datagrid = this._$datagrid.data('datagrid');\n        this._$main = this._$wrapper.find('.datagrid-main');\n\n        this.$('time.timesince').timesince();\n        this.$('.user').user_infobox();\n        this.$('.bugs').find('a').bug_infobox();\n        this.$('.review-request-link').review_request_infobox();\n\n        this.model.clearSelection();\n\n        _.each(this.$('input[data-checkbox-name=select]:checked'),\n               checkbox => this.model.select($(checkbox).data('object-id')));\n\n        if (RB.UserSession.instance.get('authenticated')) {\n            this._starManager = new RB.StarManagerView({\n                model: new RB.StarManager(),\n                el: this._$main,\n                datagridMode: true,\n            });\n        }\n\n        this._$datagrid\n            .on('reloaded', this._setupDatagrid.bind(this))\n            .on('datagridDisplayModeChanged',\n                this._reselectBatchCheckboxes.bind(this));\n        this._datagrid.resizeToFit();\n    },\n\n    /**\n     * Re-select any checkboxes that are part of the current selection.\n     *\n     * When the datagrid transitions between mobile and desktop modes,\n     * we use two different versions of the table, meaning two sets of\n     * checkboxes. This function updates the checkbox selection based on the\n     * currently selected items.\n     */\n    _reselectBatchCheckboxes() {\n        const checkboxMap = {};\n\n        this.$('input[data-checkbox-name=select]').each((idx, checkboxEl) => {\n            if (checkboxEl.checked) {\n                checkboxEl.checked = false;\n            }\n\n            checkboxMap[checkboxEl.dataset.objectId] = checkboxEl;\n        });\n\n        this.model.selection.each(selection => {\n            checkboxMap[selection.id].checked = true;\n        });\n    },\n\n    /**\n     * Show the actions drawer.\n     */\n    _showActions() {\n        this.drawer.show();\n    },\n\n    /**\n     * Hide the actions drawer.\n     */\n    _hideActions() {\n        this.drawer.hide();\n    },\n\n    /**\n     * Start the reload timer, if it's not already running.\n     */\n    _startReloadTimer() {\n        if (!this._reloadTimer) {\n            this._reloadTimer = setInterval(this._reload.bind(this),\n                                            this.RELOAD_INTERVAL_MS);\n        }\n    },\n\n    /**\n     * Stop the reload timer, if it's running.\n     */\n    _stopReloadTimer() {\n        if (this._reloadTimer) {\n            window.clearInterval(this._reloadTimer);\n            this._reloadTimer = null;\n        }\n    },\n\n    /**\n     * Reload the datagrid contents.\n     *\n     * This may be called periodically to reload the contents of the\n     * datagrid, if specified by the subclass.\n     *\n     * Args:\n     *     periodicReload (boolean):\n     *         Whether the datagrid should reload periodically.\n     */\n    _reload(periodicReload) {\n        const $editCols = this.$('.edit-columns');\n\n        if (periodicReload === false) {\n            this._stopReloadTimer();\n        }\n\n        this.model.clearSelection();\n\n        $editCols\n            .width($editCols.width() - $editCols.getExtents('b', 'lr'))\n            .html('<span class=\"fa fa-spinner fa-pulse\"></span>');\n\n        this._$wrapper.load(window.location + ' #content_container', () => {\n            this.$('.datagrid-wrapper').datagrid();\n\n            this._setupDatagrid();\n\n            if (periodicReload !== false) {\n                this._startReloadTimer();\n            }\n        });\n    },\n\n    /**\n     * Handler for when a row is selected.\n     *\n     * Records the row for any actions the user may wish to invoke.\n     *\n     * Args:\n     *     e (Event):\n     *         The event that triggered the callback.\n     */\n    _onRowSelected(e) {\n        const $checkbox = $(e.target);\n        const objectID = $checkbox.data('object-id');\n\n        if ($checkbox.prop('checked')) {\n            this.model.select(objectID);\n        } else {\n            this.model.unselect(objectID);\n        }\n    },\n});\n"]}