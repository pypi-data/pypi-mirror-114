{"version":3,"sources":["dashboardView.es6.js"],"names":[],"mappings":"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","file":"dashboardView.js","sourcesContent":["(function() {\n\n\n/**\n * Displays and invokes actions for one or more review requests.\n *\n * This presents available actions to the user that can be performed\n * across one or more selected review requests in the dashboard.\n * The actions will appear in a layer above the sidebar.\n */\nconst DashboardActionsView = Backbone.View.extend({\n    template: _.template(dedent`\n        <p class=\"rb-c-drawer__summary\"></p>\n        <% if (!read_only) { %>\n         <div class=\"rb-c-drawer__actions\">\n          <ul class=\"rb-c-drawer__action-group\">\n           <li class=\"rb-c-drawer__action js-action-discard\">\n            <%= close_discarded_text %>\n           </li>\n           <li class=\"rb-c-drawer__action js-action-submit\">\n            <%= close_submitted_text %>\n           </li>\n          </ul>\n          <ul class=\"rb-c-drawer__action-group\">\n           <li class=\"rb-c-drawer__action js-action-archive\">\n            <%= archive_text %>\n           </li>\n           <% if (show_archived) { %>\n            <li class=\"rb-c-drawer__action\n                       js-action-unarchive\">\n             <%= unarchive_text %>\n            </li>\n           <% } %>\n          </ul>\n          <ul class=\"rb-c-drawer__action-group\">\n           <li class=\"rb-c-drawer__action js-action-mute\">\n            <%= mute_text %></a></li>\n           </li>\n           <% if (show_archived) { %>\n            <li class=\"rb-c-drawer__action js-action-unmute\">\n             <%= unmute_text %>\n            </li>\n           <% } %>\n          </ul>\n         </div>\n        <% } %>\n    `),\n\n    events: {\n        'click .js-action-discard': '_onCloseDiscardedClicked',\n        'click .js-action-submit': '_onCloseSubmittedClicked',\n        'click .js-action-archive': '_onArchiveClicked',\n        'click .js-action-unarchive': '_onUnarchiveClicked',\n        'click .js-action-mute': '_onMuteClicked',\n        'click .js-action-unmute': '_onUnmuteClicked',\n    },\n\n    /**\n     * Render the actions pane.\n     *\n     * Returns:\n     *     DashboardActionsView:\n     *     This object, for chaining.\n     */\n    render() {\n        const show_archived = (this.model.get('data') || {}).show_archived;\n\n        this.$el\n            .html(this.template({\n                close_discarded_text: gettext('<b>Close</b> Discarded'),\n                close_submitted_text: gettext('<b>Close</b> Submitted'),\n                archive_text: gettext('<b>Archive</b>'),\n                mute_text: gettext('<b>Mute</b>'),\n                read_only: RB.UserSession.instance.get('readOnly'),\n                unarchive_text: gettext('<b>Unarchive</b>'),\n                unmute_text: gettext('<b>Unmute</b>'),\n                show_archived: show_archived,\n            }));\n\n        const $summary = this.$('.rb-c-drawer__summary');\n\n        this.listenTo(this.model, 'change:count', (model, count) => {\n            $summary.text(interpolate(\n                ngettext('%s review request selected',\n                         '%s review requests selected',\n                         count),\n                [count]));\n        });\n\n        return this;\n    },\n\n    /**\n     * Handler for when the Close Discarded action is clicked.\n     *\n     * This will confirm that the user wants to close the selected\n     * review requests. Once they confirm, the review requests will\n     * be closed.\n     *\n     * Args:\n     *     ev (Event):\n     *         The event that triggered the callback.\n     */\n    _onCloseDiscardedClicked(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        this._closeReviewRequests(RB.ReviewRequest.CLOSE_DISCARDED);\n    },\n\n    /**\n     * Handler for when the Close Submitted action is clicked.\n     *\n     * This will confirm that the user wants to close the selected\n     * review requests. Once they confirm, the review requests will\n     * be closed.\n     *\n     * Args:\n     *     ev (Event):\n     *         The event that triggered the callback.\n     */\n    _onCloseSubmittedClicked(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        this._closeReviewRequests(RB.ReviewRequest.CLOSE_SUBMITTED);\n    },\n\n    /**\n     * Common code for confirming and closing review requests.\n     *\n     * This will confirm that the user wants to close the selected\n     * review requests. Once they confirm, the review requests will\n     * be closed.\n     *\n     * Args:\n     *     closeType (string):\n     *         The close type to use.\n     */\n    _closeReviewRequests(closeType) {\n        this._confirmClose(() => {\n            this.model.closeReviewRequests({\n                closeType: closeType,\n                onDone: this._showCloseResults.bind(this),\n            });\n        });\n    },\n\n    /**\n     * Shows the results of the close operation in a dialog.\n     *\n     * This will say how many review requests have been closed successfully,\n     * and will also list the number that have failed (due to access\n     * permissions or other errors).\n     *\n     * Args:\n     *     successes (Array):\n     *         Array of successfully closed review requests.\n     *\n     *     failures (Array):\n     *         Array of unsuccessfully closed review requests.\n     */\n    _showCloseResults(successes, failures) {\n        const numSuccesses = successes.length;\n        const numFailures = failures.length;\n        const $dlg = $('<div/>')\n            .append($('<p/>')\n                .text(interpolate(\n                    ngettext('%s review request has been closed.',\n                             '%s review requests have been closed.',\n                             numSuccesses),\n                    [numSuccesses])));\n\n        if (numFailures > 0) {\n            $dlg\n                .append($('<p/>').text(\n                    interpolate(\n                        ngettext('%s review request could not be closed.',\n                                 '%s review requests could not be closed.',\n                                 numFailures),\n                        [numFailures])))\n                .append($('<p/>').text(\n                    gettext('You may not have permission to close them.')));\n        }\n\n        $dlg.modalBox({\n            title: gettext('Close review requests'),\n            buttons: [\n                $('<input type=\"button\"/>').val(gettext('Thanks!')),\n            ],\n        });\n    },\n\n    /**\n     * Prompt the user for confirmation before closing review requests.\n     *\n     * If the user confirms, the review requests will be closed.\n     *\n     * Args:\n     *     onConfirmed (function):\n     *         Function to call after the user confirms.\n     */\n    _confirmClose: function(onConfirmed) {\n        $('<div/>')\n            .append($('<p/>')\n                .text(gettext('If these review requests have unpublished drafts, they will be discarded.')))\n            .append($('<p/>')\n                .text(gettext('Are you sure you want to close these review requests?')))\n            .modalBox({\n                title: gettext('Close review requests'),\n                buttons: [\n                    $('<input type=\"button\"/>')\n                        .val(gettext('Cancel')),\n\n                    $('<input type=\"button\"/>')\n                        .val(gettext('Close Review Requests'))\n                        .click(onConfirmed.bind(this)),\n                ],\n            });\n    },\n\n    /**\n     * Handler for when the Archive action is clicked.\n     *\n     * Args:\n     *     ev (Event):\n     *         The event that triggered the callback.\n     */\n    _onArchiveClicked(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        const collection = RB.UserSession.instance.archivedReviewRequests;\n        this._updateVisibility(collection.addImmediately.bind(collection));\n    },\n\n    /**\n     * Handler for when the Unarchive action is clicked.\n     *\n     * Args:\n     *     ev (Event):\n     *         The event that triggered the callback.\n     */\n    _onUnarchiveClicked(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        const collection = RB.UserSession.instance.archivedReviewRequests;\n        this._updateVisibility(collection.removeImmediately.bind(collection));\n    },\n\n    /**\n     * Handler for when the Mute action is clicked.\n     *\n     * This will confirm that the user wants to mute the selected review\n     * requests. Once they confirm, the review requests will be archived.\n     *\n     * Args:\n     *     ev (Event):\n     *         The event that triggered the callback.\n     */\n    _onMuteClicked(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        const collection = RB.UserSession.instance.mutedReviewRequests;\n        const visibilityFunc = collection.addImmediately.bind(collection);\n\n        $('<div/>')\n            .append($('<p/>')\n                .text(gettext('Are you sure you want to mute these review requests?')))\n            .modalBox({\n                title: gettext('Mute review requests'),\n                buttons: [\n                    $('<input type=\"button\"/>')\n                        .val(gettext('Cancel')),\n\n                    $('<input type=\"button\"/>')\n                        .val(gettext('Mute Review Requests'))\n                        .click(this._updateVisibility.bind(\n                            this, visibilityFunc)),\n                ],\n            });\n    },\n\n    /**\n     * Handler for when the Unmute action is clicked.\n     *\n     * Args:\n     *     ev (Event):\n     *         The event that triggered the callback.\n     */\n    _onUnmuteClicked(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        const collection = RB.UserSession.instance.mutedReviewRequests;\n\n        this._updateVisibility(collection.removeImmediately.bind(collection));\n    },\n\n    /**\n     * Common code for archiving/muting review requests.\n     *\n     * Args:\n     *     visibilityFunc (function):\n     *         Function to call to update the visibility of an individual\n     *         review request.\n     */\n    _updateVisibility(visibilityFunc) {\n        this.model.updateVisibility(visibilityFunc);\n    },\n});\n\n\n/**\n * Manages the UI for the dashboard.\n *\n * This renders the dashboard, handles events, and allows for multi-row\n * actions (like closing review requests).\n */\nRB.DashboardView = RB.DatagridPageView.extend({\n    actionsViewType: DashboardActionsView,\n});\n\n\n})();\n"]}