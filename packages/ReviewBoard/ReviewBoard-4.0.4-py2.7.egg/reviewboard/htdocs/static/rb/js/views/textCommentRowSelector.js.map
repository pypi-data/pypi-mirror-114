{"version":3,"sources":["textCommentRowSelector.es6.js"],"names":[],"mappings":";;AAAA;;;;;;;AAOA,GAAG,sBAAH,GAA4B,SAAS,IAAT,CAAc,MAAd,CAAqB;AAC7C,0KAD6C;;AAQ7C,YAAQ;AACJ,gBAAQ,SADJ;AAEJ,qBAAa,cAFT;AAGJ,mBAAW,YAHP;AAIJ,qBAAa,cAJT;AAKJ,oBAAY,aALR;AAMJ,sBAAc,eANV;AAOJ,oBAAY,aAPR;AAQJ,qBAAa,cART;AASJ,uBAAe;AATX,KARqC;;AAoB7C;;;;;;;;;;;;AAYA,cAhC6C,sBAgClC,OAhCkC,EAgCzB;AAChB,aAAK,OAAL,GAAe,OAAf;AACA,aAAK,OAAL,GAAe,IAAf;AACA,aAAK,KAAL,GAAa,IAAb;AACA,aAAK,aAAL,GAAqB,CAArB;AACA,aAAK,WAAL,GAAmB,CAAnB;AACA,aAAK,cAAL,GAAsB,CAAtB;AACA,aAAK,eAAL,GAAuB,IAAvB;;AAEA;;;;;AAKA,aAAK,qBAAL,GACI,OAAO,YAAP,KAAwB,SAAxB,IACA,OAAO,KAAP,KAAiB,SADjB,IAEA,OAAO,KAAP,CAAa,SAAb,CAAuB,aAAvB,KAAyC,SAH7C;;AAKA,aAAK,YAAL,GAAoB,IAApB;;AAEA,aAAK,kBAAL,GAA0B,IAA1B;AACA,aAAK,sBAAL,GAA8B,IAA9B;AACH,KAvD4C;;;AAyD7C;;;AAGA,UA5D6C,oBA4DpC;AACL,iBAAS,IAAT,CAAc,SAAd,CAAwB,MAAxB,CAA+B,IAA/B,CAAoC,IAApC;;AAEA,aAAK,kBAAL,CAAwB,MAAxB;AACH,KAhE4C;;;AAkE7C;;;;;;;AAOA,UAzE6C,oBAyEpC;AACL,aAAK,kBAAL,GAA0B,EAAE,KAAK,wBAAP,EACrB,EADqB,CAClB;AACA,uBAAW,EAAE,IAAF,CAAO,KAAK,YAAZ,EAA0B,IAA1B,CADX;AAEA,qBAAS,EAAE,IAAF,CAAO,KAAK,UAAZ,EAAwB,IAAxB,CAFT;AAGA,uBAAW,EAAE,IAAF,CAAO,KAAK,YAAZ,EAA0B,IAA1B,CAHX;AAIA,sBAAU,EAAE,IAAF,CAAO,KAAK,WAAZ,EAAyB,IAAzB;AAJV,SADkB,EAOrB,IAPqB,GAQrB,QARqB,CAQZ,MARY,CAA1B;;AAUA,eAAO,IAAP;AACH,KArF4C;;;AAuF9C;;;;;;;;;;;;;;;;AAgBC,iBAvG6C,yBAuG/B,YAvG+B,EAuGjB,UAvGiB,EAuGL,SAvGK,EAuGM,OAvGN,EAuGe;AACxD,aAAK,aAAL,GAAqB,YAArB;AACA,aAAK,WAAL,GAAmB,UAAnB;AACA,aAAK,OAAL,GAAe,KAAK,qBAAL,CAA2B,EAAE,SAAF,CAA3B,EAAyC,MAAzC,EAAf;AACA,aAAK,KAAL,GAAa,KAAK,qBAAL,CAA2B,EAAE,OAAF,CAA3B,EAAuC,MAAvC,EAAb;;AAEA,YAAI,KAAK,cAAL,CAAoB,OAApB,CAAJ,EAAkC;AAC9B,iBAAK,IAAL,CAAU,KAAK,qBAAL,CAA2B,EAAE,OAAF,CAA3B,EAAuC,MAAvC,EAAV;AACH;;AAED,aAAK,MAAL;AACH,KAlH4C;;;AAoH7C;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,mBA/I6C,2BA+I7B,YA/I6B,EA+If,UA/Ie,EA+IH,WA/IG,EA+IU;AACnD,YAAM,aAAa,KAAK,cAAL,CAAoB,YAApB,EAAkC,WAAlC,CAAnB;;AAEA,YAAI,UAAJ,EAAgB;AACZ,gBAAM,WAAW,WAAW,QAA5B;AACA,gBAAM,WACF,eAAe,YAAf,GACE,UADF,GAEE,KAAK,cAAL,CACE,UADF,EAEE,QAFF,EAGE,WAAW,UAAX,GAAwB,YAH1B,CAHN;;AASA,mBAAO,CAAC,UAAD,EAAa,QAAb,CAAP;AACH,SAZD,MAYO;AACH,mBAAO,IAAP;AACH;AACJ,KAjK4C;;;AAmK7C;;;;;;;;;;;;;;;;;AAiBA,kBApL6C,0BAoL9B,OApL8B,EAoLrB,QApLqB,EAoLX,MApLW,EAoLH;AACtC,YAAM,QAAQ,KAAK,EAAnB;AACA,YAAM,YAAY,CAAlB,CAFsC,CAEjB;AACrB,YAAI,MAAM,IAAV;;AAEA,YAAI,MAAM,IAAN,CAAW,MAAX,GAAoB,SAApB,GAAgC,OAApC,EAA6C;AACzC,kBAAM,MAAM,IAAN,CAAW,YAAY,OAAvB,CAAN;;AAEA;AACA,gBAAI,OAAO,KAAK,UAAL,CAAgB,GAAhB,MAAyB,OAApC,EAA6C;AACzC,uBAAO,GAAP;AACH;AACJ;;AAED,YAAI,QAAJ,EAAc;AACV;AACA,wBAAY,SAAZ;AACH;;AAED,YAAI,MAAM,YAAY,CAAtB;AACA,YAAI,OAAO,KAAK,GAAL,CAAS,UAAU,MAAM,IAAN,CAAW,MAA9B,EAAsC,MAAM,IAAN,CAAW,MAAjD,CAAX;;AAEA,YAAI,WAAW,SAAX,IAAwB,SAAS,MAAM,IAAN,CAAW,MAAhD,EAAwD;AACpD;AACA,gBAAI,KAAK,UAAL,CAAgB,MAAM,IAAN,CAAW,MAAX,CAAhB,MAAwC,OAA5C,EAAqD;AACjD,uBAAO,MAAM,IAAN,CAAW,MAAX,CAAP;AACH;AACJ,SALD,MAKO,IAAI,QAAQ,IAAZ,EAAkB;AACrB;;;;AAIA,mBAAO,KAAK,GAAL,CAAS,IAAT,EAAe,YAAY,OAA3B,CAAP;AACH;;AAED;AACA,aAAK,IAAI,IAAI,KAAK,KAAL,CAAW,CAAC,MAAM,IAAP,IAAe,CAA1B,CAAb,EAA2C,MAAM,OAAO,CAAxD,GAA4D;AACxD,kBAAM,MAAM,IAAN,CAAW,YAAY,CAAvB,CAAN;;AAEA,gBAAI,CAAC,GAAL,EAAU;AACN;AACA;;AAEA;;;;AAIA,oBAAI,KAAK,KAAL,CAAW,CAAC,MAAM,IAAP,IAAe,CAA1B,CAAJ;AACA;AACH;;AAED,gBAAI,QAAQ,KAAK,UAAL,CAAgB,GAAhB,CAAZ;;AAEA,gBAAI,CAAC,KAAL,EAAY;AACR;;;;;;AAMA,oBAAI,QAAQ,KAAZ;;AAEA,qBAAK,IAAI,IAAI,CAAb,EAAgB,KAAK,CAAC,OAAO,GAAR,IAAe,CAApC,EAAuC,GAAvC,EAA4C;AACxC,0BAAM,MAAM,IAAN,CAAW,YAAY,CAAZ,GAAgB,CAA3B,CAAN;;AAEA,wBAAI,OAAO,KAAK,UAAL,CAAgB,GAAhB,CAAX,EAAiC;AAC7B,4BAAI,IAAI,CAAR;AACA,gCAAQ,IAAR;AACA;AACH,qBAJD,MAIO;AACH,8BAAM,MAAM,IAAN,CAAW,YAAY,CAAZ,GAAgB,CAA3B,CAAN;;AAEA,4BAAI,OAAO,KAAK,UAAL,CAAgB,GAAhB,CAAX,EAAiC;AAC7B,gCAAI,IAAI,CAAR;AACA,oCAAQ,IAAR;AACA;AACH;AACJ;AACJ;;AAED,oBAAI,KAAJ,EAAW;AACP,4BAAQ,KAAK,UAAL,CAAgB,GAAhB,CAAR;AACH,iBAFD,MAEO;AACH,2BAAO,IAAP;AACH;AACJ;;AAED;AACA,gBAAM,cAAc,UAAU,KAAV,GAAkB,SAAlB,GAA8B,CAAlD;;AAEA,gBAAI,eAAe,CAAf,IAAoB,cAAc,MAAM,IAAN,CAAW,MAAjD,EAAyD;AACrD,oBAAM,WAAW,MAAM,IAAN,CAAW,WAAX,CAAjB;;AAEA,oBAAI,YAAY,KAAK,UAAL,CAAgB,QAAhB,MAA8B,OAA9C,EAAuD;AACnD;AACA,2BAAO,QAAP;AACH;AACJ;;AAED,gBAAM,UAAU,IAAhB;AACA,gBAAM,SAAS,GAAf;;AAEA,gBAAI,QAAQ,OAAZ,EAAqB;AACjB,uBAAO,CAAP;AACH,aAFD,MAEO,IAAI,QAAQ,OAAZ,EAAqB;AACxB,sBAAM,CAAN;AACH,aAFM,MAEA;AACH,uBAAO,GAAP;AACH;;AAED;;;;AAIA,gBAAI,YAAY,IAAZ,IAAoB,WAAW,GAAnC,EAAwC;AACpC;AACH;;AAED,gBAAI,KAAK,KAAL,CAAW,CAAC,MAAM,IAAP,IAAe,CAA1B,CAAJ;AACH;;AAED;AACA,eAAO,IAAP;AACH,KA/S4C;;;AAiT7C;;;;;;;AAOA,UAxT6C,kBAwTtC,IAxTsC,EAwThC;AACT,YAAM,UAAU,KAAK,UAAL,CAAgB,KAAK,CAAL,CAAhB,CAAhB;;AAEA,aAAK,OAAL,GAAe,IAAf;AACA,aAAK,KAAL,GAAa,IAAb;AACA,aAAK,aAAL,GAAqB,OAArB;AACA,aAAK,WAAL,GAAmB,OAAnB;AACA,aAAK,cAAL,GAAsB,KAAK,CAAL,EAAQ,QAA9B;;AAEA,aAAK,QAAL,CAAc,UAAd;AACA,aAAK,GAAL,CAAS,gBAAT;AACH,KAnU4C;;;AAqU7C;;;;;;;AAOA,QA5U6C,gBA4UxC,IA5UwC,EA4UlC;AACP,YAAI,KAAK,aAAL,KAAuB,KAAK,WAAhC,EAA6C;AACzC;AACA,gBAAM,eAAe,KAAK,IAAL,CAAU,cAAV,CAArB;;AAEA,gBAAI,aAAa,MAAb,KAAwB,CAA5B,EAA+B;AAC3B,6BAAa,KAAb;AACA;AACH;AACJ;;AAED;;;;AAIA,aAAK,OAAL,CAAa,cAAb,CAA4B,yBAA5B,CAAsD;AAClD,0BAAc,KAAK,aAD+B;AAElD,wBAAY,KAAK,WAFiC;AAGlD,uBAAW,KAAK,OAHkC;AAIlD,qBAAS,KAAK;AAJoC,SAAtD;AAMH,KAjW4C;;;AAmW7C;;;;;;;;;;;;AAYA,WA/W6C,mBA+WrC,IA/WqC,EA+W/B;AACV;AACA,YAAM,UAAU,KAAK,UAAL,CAAgB,KAAK,CAAL,CAAhB,CAAhB;;AAEA,YAAI,UAAU,KAAK,aAAnB,EAAkC;AAC9B,iBAAK,OAAL,GAAe,IAAf;AACA,iBAAK,aAAL,GAAqB,OAArB;AACH,SAHD,MAGO,IAAI,UAAU,KAAK,aAAnB,EAAkC;AACrC,iBAAK,KAAL,GAAa,IAAb;AACA,iBAAK,WAAL,GAAmB,OAAnB;AACH;;AAED,YAAM,MAAM,KAAK,GAAL,CAAS,KAAK,cAAd,EAA8B,KAAK,CAAL,EAAQ,QAAtC,CAAZ;AACA,YAAM,MAAM,KAAK,GAAL,CAAS,KAAK,cAAd,EAA8B,KAAK,CAAL,EAAQ,QAAtC,CAAZ;;AAEA,aAAK,IAAI,IAAI,GAAb,EAAkB,KAAK,GAAvB,EAA4B,GAA5B,EAAiC;AAC7B,cAAE,KAAK,EAAL,CAAQ,IAAR,CAAa,CAAb,CAAF,EAAmB,QAAnB,CAA4B,UAA5B;AACH;;AAED,aAAK,cAAL,GAAsB,KAAK,CAAL,EAAQ,QAA9B;AACH,KAnY4C;;;AAqY7C;;;;;;;;;;AAUA,iBA/Y6C,yBA+Y/B,IA/Y+B,EA+YzB;AAChB,YAAM,eAAe,EAAE,KAAK,CAAL,EAAQ,KAAR,CAAc,CAAd,CAAF,CAArB;;AAEA;AACA,YAAI,aAAa,IAAb,CAAkB,cAAlB,EAAkC,MAAlC,KAA6C,CAAjD,EAAoD;AAChD,iBAAK,kBAAL,CACK,GADL,CACS,KADT,EACgB,KAAK,MAAL,GAAc,GAAd,GAAoB,CADpC,EAEK,IAFL,GAGK,MAHL,GAIS,WAJT,CAIqB,UAJrB;AAKA,iBAAK,sBAAL,GAA8B,YAA9B;AACH;;AAED,aAAK,QAAL,CAAc,UAAd;AACH,KA7Z4C;;;AA+Z7C;;;;;;;AAOA,kBAta6C,0BAsa9B,IAta8B,EAsaxB;AACjB,YAAM,eAAe,KAAK,CAAL,EAAQ,QAA7B;;AAEA,YAAI,gBAAgB,KAAK,OAAL,CAAa,CAAb,EAAgB,QAApC,EAA8C;AAC1C,gBAAI,KAAK,cAAL,KAAwB,KAAK,KAAL,CAAW,CAAX,EAAc,QAAtC,IACA,KAAK,cAAL,GAAsB,YAD1B,EACwC;AACpC;;;;AAIA,qBAAK,uBAAL,CAA6B,KAAK,cAAlC,EAAkD,YAAlD;AACA,qBAAK,OAAL,GAAe,IAAf;AACA,qBAAK,aAAL,GAAqB,KAAK,UAAL,CAAgB,KAAK,CAAL,CAAhB,CAArB;AACH,aATD,MASO;AACH;;;;AAIA,qBAAK,uBAAL,CAA6B,YAA7B,EAC6B,KAAK,cADlC;;AAGA,qBAAK,KAAL,GAAa,IAAb;AACA,qBAAK,WAAL,GAAmB,KAAK,UAAL,CAAgB,KAAK,CAAL,CAAhB,CAAnB;AACH;;AAED,iBAAK,cAAL,GAAsB,YAAtB;AACH;AACJ,KAjc4C;;;AAmc7C;;;AAGA,UAtc6C,oBAscpC;AACL,YAAI,KAAK,OAAT,EAAkB;AACd;AACA,iBAAK,uBAAL,CAA6B,KAAK,OAAL,CAAa,CAAb,EAAgB,QAA7C,EAC6B,KAAK,KAAL,CAAW,CAAX,EAAc,QAD3C;;AAGA,iBAAK,OAAL,GAAe,IAAf;AACA,iBAAK,KAAL,GAAa,IAAb;AACA,iBAAK,aAAL,GAAqB,CAArB;AACA,iBAAK,WAAL,GAAmB,CAAnB;AACA,iBAAK,cAAL,GAAsB,CAAtB;AACH;;AAED,aAAK,sBAAL,GAA8B,IAA9B;;AAEA;AACA,aAAK,GAAL,CAAS,eAAT;AACH,KAvd4C;;;AAyd7C;;;;;;;;;;AAUA,2BAne6C,mCAmerB,aAneqB,EAmeN,WAneM,EAmeO;AAChD,aAAK,IAAI,IAAI,aAAb,EAA4B,KAAK,WAAjC,EAA8C,GAA9C,EAAmD;AAC/C,cAAE,KAAK,EAAL,CAAQ,IAAR,CAAa,CAAb,CAAF,EAAmB,WAAnB,CAA+B,UAA/B;AACH;AACJ,KAve4C;;;AAye7C;;;;;;;AAOA,kBAhf6C,0BAgf9B,IAhf8B,EAgfxB;AACjB,eAAO,KAAK,OAAL,KAAiB,IAAjB,IACA,KAAK,UAAL,CAAgB,YAAhB,CAA6B,MAA7B,CADP;AAEH,KAnf4C;;;AAqf7C;;;;;;;;;;;;;AAaA,yBAlgB6C,iCAkgBvB,KAlgBuB,EAkgBhB;AACzB,YAAI,MAAM,QAAN,CAAe,aAAf,CAAJ,EAAmC;AAC/B,gBAAI,MAAM,CAAN,MAAa,KAAK,kBAAL,CAAwB,CAAxB,CAAjB,EAA6C;AACzC,uBAAO,KAAK,sBAAZ;AACH,aAFD,MAEO;AACH,uBAAO,MAAM,MAAN,EAAP;AACH;AACJ;;AAED,eAAO,KAAP;AACH,KA5gB4C;;;AA8gB7C;;;;;;AAMA,WAphB6C,mBAohBrC,CAphBqC,EAohBlC;AACP,YAAM,gBAAgB,EAAE,aAAF,CAAgB,aAAhB,IACA,OAAO,aAD7B;;AAGA,YAAI,iBAAiB,KAAK,qBAAtB,IACA,KAAK,yBAAL,CAA+B,aAA/B,CADJ,EACmD;AAC/C;;;AAGA,cAAE,cAAF;AACA,cAAE,eAAF;AACH;AACJ,KAhiB4C;;;AAkiB7C;;;;;;;;;;;;;;;;;AAiBA,gBAnjB6C,wBAmjBhC,MAnjBgC,EAmjBxB,QAnjBwB,EAmjBd,OAnjBc,EAmjBL,iBAnjBK,EAmjBc;AACvD,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,SAAS,QAAT,CAAkB,MAAtC,EAA8C,GAA9C,EAAmD;AAC/C,gBAAM,OAAO,SAAS,QAAT,CAAkB,CAAlB,CAAb;;AAEA,gBAAI,KAAK,QAAL,KAAkB,KAAK,YAA3B,EAAyC;AACrC,oBAAI,KAAK,OAAL,KAAiB,KAArB,EAA4B;AACxB,2BAAO,IAAP,CAAY,IAAZ;AACH,iBAFD,MAEO,IAAI,CAAC,KAAK,OAAL,KAAiB,IAAjB,IACA,EAAE,IAAF,EAAQ,QAAR,CAAiB,OAAjB,CADD,MAEC,KAAK,OAAL,KAAiB,OAAjB,IACA,CAAC,EAAE,IAAF,EAAQ,QAAR,CAAiB,iBAAjB,CAHF,CAAJ,EAG4C;AAC/C,gCAAY,MAAZ,EAAoB,IAApB,EAA0B,OAA1B,EAAmC,iBAAnC;AACH;AACJ;AACJ;AACJ,KAlkB4C;;;AAokB7C;;;;;;;;;;;;;;;;;;;;AAoBA,6BAxlB6C,qCAwlBnB,aAxlBmB,EAwlBJ;AACrC,YAAI,0BAAJ;AACA,YAAI,gBAAJ;;AAEA,YAAI,KAAK,YAAL,KAAsB,IAA1B,EAAgC;AAC5B;;;;;;AAMA,gBAAI,UAAU,UAAV,CAAqB,QAArB,CAA8B,KAA9B,CAAJ,EAA0C;AACtC,qBAAK,YAAL,GAAoB,MAApB;AACH,aAFD,MAEO;AACH,qBAAK,YAAL,GAAoB,IAApB;AACH;AACJ;;AAED,YAAI,KAAK,kBAAL,KAA4B,CAA5B,IAAiC,KAAK,GAAL,CAAS,QAAT,CAAkB,SAAlB,CAArC,EAAmE;AAC/D,sBAAU,GAAV;AACA,gCAAoB,QAApB;AACH,SAHD,MAGO;AACH,sBAAU,GAAV;AACA,gCAAoB,QAApB;AACH;;AAED,YAAM,MAAM,OAAO,YAAP,EAAZ;AACA,YAAM,YAAY,EAAlB;;AAEA,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,IAAI,UAAxB,EAAoC,GAApC,EAAyC;AACrC,gBAAM,QAAQ,IAAI,UAAJ,CAAe,CAAf,CAAd;;AAEA,gBAAI,MAAM,SAAV,EAAqB;AACjB;AACH;;AAED,gBAAM,QAAQ,EAAd;AACA,gBAAM,MAAM,MAAM,aAAN,EAAZ;AACA,wBAAY,KAAZ,EAAmB,GAAnB,EAAwB,OAAxB,EAAiC,iBAAjC;;AAEA,gBAAI,MAAM,MAAN,GAAe,CAAnB,EAAsB;AAClB;;;;AAIA,qBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAAM,MAA1B,EAAkC,GAAlC,EAAuC;AACnC,8BAAU,IAAV,CAAe,MAAM,CAAN,EAAS,WAAxB;AACH;AACJ,aARD,MAQO;AACH;;;;;;;;AAQA,0BAAU,IAAV,CAAe,EAAE,GAAF,EAAO,IAAP,EAAf;AACA;AACH;AACJ;;AAED,YAAI;AACA,0BAAc,OAAd,CAAsB,MAAtB,EAA8B,UAAU,IAAV,CAAe,KAAK,YAApB,CAA9B;AACH,SAFD,CAEE,OAAO,CAAP,EAAU;AACR;AACA,iBAAK,qBAAL,GAA6B,KAA7B;AACA,mBAAO,KAAP;AACH;;AAED,eAAO,IAAP;AACH,KA/pB4C;;;AAiqB7C;;;;;;;AAOA,gBAxqB6C,wBAwqBhC,CAxqBgC,EAwqB7B;AACZ,YAAI,KAAK,eAAT,EAA0B;AACtB,iBAAK,GAAL,CAAS,WAAT,CAAqB,KAAK,eAA1B;AACH;;AAED,YAAM,OAAO,KAAK,sBAAL,GACA,KAAK,sBAAL,CAA4B,CAA5B,CADA,GAEA,EAAE,MAFf;;AAIA,YAAI,KAAK,cAAL,CAAoB,IAApB,CAAJ,EAA+B;AAC3B,iBAAK,MAAL,CAAY,EAAE,KAAK,UAAP,CAAZ;AACH,SAFD,MAEO;AACH,gBAAM,QAAQ,KAAK,OAAL,KAAiB,IAAjB,GACF,EAAE,IAAF,CADE,GAEF,EAAE,IAAF,EAAQ,YAAR,CAAqB,IAArB,EAA2B,IAA3B,CAFZ;;AAIA,gBAAI,MAAM,MAAN,GAAe,CAAnB,EAAsB;AAClB,qBAAK,eAAL,GAAuB,mBAAmB,MAAM,CAAN,EAAS,SAAnD;AACA,qBAAK,kBAAL,GAA0B,MAAM,CAAN,EAAS,SAAnC;AACA,qBAAK,GAAL,CAAS,QAAT,CAAkB,KAAK,eAAvB;AACH;AACJ;AACJ,KA9rB4C;;;AAgsB7C;;;;;;;;;;AAUA,cA1sB6C,sBA0sBlC,CA1sBkC,EA0sB/B;AACV,YAAM,OAAO,KAAK,sBAAL,GACA,KAAK,sBAAL,CAA4B,CAA5B,CADA,GAEA,EAAE,MAFf;;AAIA,YAAI,KAAK,cAAL,CAAoB,IAApB,CAAJ,EAA+B;AAC3B,iBAAK,IAAL,CAAU,KAAK,qBAAL,CAA2B,EAAE,IAAF,CAA3B,EAAoC,MAApC,EAAV;AACA,cAAE,wBAAF;AACH;;AAED,aAAK,MAAL;AACH,KArtB4C;;;AAutB7C;;;;;;;;;;AAUA,gBAjuB6C,wBAiuBhC,CAjuBgC,EAiuB7B;AACZ,YAAM,QAAQ,KAAK,qBAAL,CAA2B,EAAE,EAAE,MAAJ,CAA3B,CAAd;AACA,YAAM,OAAO,MAAM,MAAN,EAAb;;AAEA,YAAI,KAAK,cAAL,CAAoB,MAAM,CAAN,CAApB,CAAJ,EAAmC;AAC/B,gBAAI,KAAK,OAAT,EAAkB;AACd,qBAAK,OAAL,CAAa,IAAb;AACH,aAFD,MAEO;AACH,qBAAK,aAAL,CAAmB,IAAnB;AACH;AACJ,SAND,MAMO,IAAI,KAAK,sBAAL,IACA,MAAM,CAAN,MAAa,KAAK,sBAAL,CAA4B,CAA5B,CADjB,EACiD;AACpD,iBAAK,WAAL,CAAiB,UAAjB;AACH;AACJ,KA/uB4C;;;AAivB7C;;;;;;;;;AASA,eA1vB6C,uBA0vBjC,CA1vBiC,EA0vB9B;AACX,YAAM,YAAY,EAAE,aAApB;;AAEA,YAAI,cAAc,KAAK,kBAAL,CAAwB,CAAxB,CAAlB,EAA8C;AAC1C,iBAAK,kBAAL,CAAwB,IAAxB;AACA,iBAAK,sBAAL,GAA8B,IAA9B;AACH;;AAED,YAAM,QAAQ,KAAK,qBAAL,CAA2B,EAAE,EAAE,MAAJ,CAA3B,CAAd;;AAEA,YAAI,KAAK,OAAT,EAAkB;AACd,gBAAI,aAAa,KAAK,cAAL,CAAoB,SAApB,CAAjB,EAAiD;AAC7C,qBAAK,cAAL,CAAoB,EAAE,UAAU,UAAZ,CAApB;AACH;AACJ,SAJD,MAIO,IAAI,SAAS,KAAK,cAAL,CAAoB,MAAM,CAAN,CAApB,CAAb,EAA4C;AAC/C;;;;;AAKA,kBAAM,MAAN,GAAe,WAAf,CAA2B,UAA3B;AACH;AACJ,KAhxB4C;;;AAkxB7C;;;;;;;;;;;AAWA,iBA7xB6C,yBA6xB/B,CA7xB+B,EA6xB5B;AACb,YAAM,aAAa,EAAE,aAAF,CAAgB,aAAhB,CAA8B,CAA9B,CAAnB;AACA,YAAM,QAAQ,KAAK,qBAAL,CAA2B,EAAE,WAAW,MAAb,CAA3B,CAAd;;AAEA,YAAI,UAAU,IAAV,IAAkB,KAAK,cAAL,CAAoB,MAAM,CAAN,CAApB,CAAtB,EAAqD;AACjD,cAAE,cAAF;AACA,iBAAK,MAAL,CAAY,MAAM,MAAN,EAAZ;AACH;AACJ,KAryB4C;;;AAuyB7C;;;;;;;;;;;;;;;AAeA,eAtzB6C,uBAszBjC,CAtzBiC,EAszB9B;AACX,YAAM,aAAa,EAAE,aAAF,CAAgB,cAAhB,CAA+B,CAA/B,CAAnB;AACA,YAAM,SAAS,SAAS,gBAAT,CAA0B,WAAW,OAArC,EAC0B,WAAW,OADrC,CAAf;AAEA,YAAM,QAAQ,KAAK,qBAAL,CAA2B,EAAE,MAAF,CAA3B,CAAd;;AAEA,YAAI,UAAU,IAAV,IAAkB,KAAK,cAAL,CAAoB,MAAM,CAAN,CAApB,CAAtB,EAAqD;AACjD,cAAE,cAAF;AACA,iBAAK,IAAL,CAAU,MAAM,MAAN,EAAV;AACH;;AAED,aAAK,MAAL;AACH,KAl0B4C;;;AAo0B7C;;;;;;;;;;;AAWA,gBA/0B6C,wBA+0BhC,CA/0BgC,EA+0B7B;AACZ,YAAM,aAAa,EAAE,aAAF,CAAgB,aAAhB,CAA8B,CAA9B,CAAnB;AACA,YAAM,SAAS,SAAS,gBAAT,CAA0B,WAAW,OAArC,EAC0B,WAAW,OADrC,CAAf;AAEA,YAAM,QAAQ,KAAK,qBAAL,CAA2B,EAAE,MAAF,CAA3B,CAAd;;AAEA,YAAI,UAAU,IAAd,EAAoB;AAChB,gBAAM,OAAO,MAAM,MAAN,EAAb;;AAEA,gBAAI,KAAK,cAAL,KAAwB,KAAK,CAAL,EAAQ,QAAhC,IACA,KAAK,cAAL,CAAoB,MAAM,CAAN,CAApB,CADJ,EACmC;AAC/B,kBAAE,cAAF;;AAEA,qBAAK,cAAL,CAAoB,IAApB;AACA,qBAAK,OAAL,CAAa,IAAb;AACH;AACJ;AACJ,KAh2B4C;;;AAk2B7C;;;;;;AAMA,kBAx2B6C,4BAw2B5B;AACb,aAAK,MAAL;AACH,KA12B4C;;;AA42B7C;;;;;;;;;;;AAWA,cAv3B6C,sBAu3BlC,GAv3BkC,EAu3B7B;AACZ,eAAO,SAAS,IAAI,YAAJ,CAAiB,MAAjB,CAAT,EAAmC,EAAnC,CAAP;AACH;AAz3B4C,CAArB,CAA5B","file":"textCommentRowSelector.js","sourcesContent":["/*\n * Provides multi-line commenting capabilities for a diff.\n *\n * This tacks on commenting capabilities onto a DiffReviewableView's\n * element. It listens for mouse events that begin/end the creation of\n * a new comment.\n */\nRB.TextCommentRowSelector = Backbone.View.extend({\n    ghostCommentFlagTemplate: dedent`\n        <span class=\"commentflag ghost-commentflag\">\n         <span class=\"commentflag-shadow\"></span>\n         <span class=\"commentflag-inner\"></span>\n        </span>\n    `,\n\n    events: {\n        'copy': '_onCopy',\n        'mousedown': '_onMouseDown',\n        'mouseup': '_onMouseUp',\n        'mouseover': '_onMouseOver',\n        'mouseout': '_onMouseOut',\n        'touchstart': '_onTouchStart',\n        'touchend': '_onTouchEnd',\n        'touchmove': '_onTouchMove',\n        'touchcancel': '_onTouchCancel',\n    },\n\n    /**\n     * Initialize the commenting selector.\n     *\n     * Args:\n     *     options (object):\n     *         Options for initializing the view.\n     *\n     * Option Args:\n     *     reviewableView (RB.AbstractReviewableView):\n     *         The view that will create the comment based on the selection we\n     *         provide.\n     */\n    initialize(options) {\n        this.options = options;\n        this._$begin = null;\n        this._$end = null;\n        this._beginLineNum = 0;\n        this._endLineNum = 0;\n        this._lastSeenIndex = 0;\n        this._selectionClass = null;\n\n        /*\n         * Support setting the clipboard only if we have the necessary\n         * functions. This may still be turned off later if we can't\n         * actually set the data.\n         */\n        this._supportsSetClipboard = (\n            window.getSelection !== undefined &&\n            window.Range !== undefined &&\n            window.Range.prototype.cloneContents !== undefined);\n\n        this._newlineChar = null;\n\n        this._$ghostCommentFlag = null;\n        this._$ghostCommentFlagCell = null;\n    },\n\n    /**\n     * Remove the selector from the DOM.\n     */\n    remove() {\n        Backbone.View.prototype.remove.call(this);\n\n        this._$ghostCommentFlag.remove();\n    },\n\n    /**\n     * Render the selector.\n     *\n     * Returns:\n     *     RB.TextCommentRowSelector:\n     *     This object, for chaining.\n     */\n    render() {\n        this._$ghostCommentFlag = $(this.ghostCommentFlagTemplate)\n            .on({\n                mousedown: _.bind(this._onMouseDown, this),\n                mouseup: _.bind(this._onMouseUp, this),\n                mouseover: _.bind(this._onMouseOver, this),\n                mouseout: _.bind(this._onMouseOut, this)\n            })\n            .hide()\n            .appendTo('body');\n\n        return this;\n    },\n\n   /**\n    * Create a comment for a chunk of a diff.\n    *\n    * Args:\n    *     beginLineNum (number):\n    *         The first line number of the range being commented upon.\n    *\n    *     endLineNum (number):\n    *         The last line number of the range being commented upon.\n    *\n    *     beginNode (Element):\n    *         The element for the first row of the range being commented on.\n    *\n    *     endNode (Element):\n    *         The element of the last row of the range being commented on.\n    */\n    createComment(beginLineNum, endLineNum, beginNode, endNode) {\n        this._beginLineNum = beginLineNum;\n        this._endLineNum = endLineNum;\n        this._$begin = this._getActualLineNumCell($(beginNode)).parent();\n        this._$end = this._getActualLineNumCell($(endNode)).parent();\n\n        if (this._isLineNumCell(endNode)) {\n            this._end(this._getActualLineNumCell($(endNode)).parent());\n        }\n\n        this._reset();\n    },\n\n    /**\n     * Return the beginning and end rows for a given line number range.\n     *\n     * Args:\n     *      beginLineNum (number):\n     *         The first line number of the range.\n     *\n     *      endLineNum (number):\n     *         The last line number of the range.\n     *\n     *      minRowIndex (number):\n     *         A minimum row index to constrain the search to.\n     *\n     *         No rows with indices less than this will be searched.\n     *\n     * Returns:\n     *     array of Element:\n     *     If the row corresponding to ``beginLineNum`` cannot be found, the\n     *     return value with be ``null``.\n     *\n     *     Otherwise, this will be a 2 element array containing:\n     *\n     *     * The :js:class:`Element` for the row corresponding to\n     *       ``beginLineNum``.\n     *     * The :js:class:`Element` for the row corresponding to\n     *       ``endLineNum``, or ``null`` if it cannot be found.\n     */\n    getRowsForRange(beginLineNum, endLineNum, minRowIndex) {\n        const beginRowEl = this.findLineNumRow(beginLineNum, minRowIndex);\n\n        if (beginRowEl) {\n            const rowIndex = beginRowEl.rowIndex;\n            const endRowEl = (\n                endLineNum === beginLineNum\n                ? beginRowEl\n                : this.findLineNumRow(\n                    endLineNum,\n                    rowIndex,\n                    rowIndex + endLineNum - beginLineNum)\n            );\n\n            return [beginRowEl, endRowEl];\n        } else {\n            return null;\n        }\n    },\n\n    /**\n     * Find the row in a table matching the specified line number.\n     *\n     * This will perform a binary search of the lines trying to find\n     * the matching line number. It will then return the row element,\n     * if found.\n     *\n     * Args:\n     *     lineNum (number):\n     *         The line number to find.\n     *\n     *     startRow (number):\n     *         The index of the row to start the search at.\n     *\n     *     endRow (number):\n     *         The index of the row to end the sarch at.\n     */\n    findLineNumRow(lineNum, startRow, endRow) {\n        const table = this.el;\n        const rowOffset = 1; // Get past the headers.\n        let row = null;\n\n        if (table.rows.length - rowOffset > lineNum) {\n            row = table.rows[rowOffset + lineNum];\n\n            // Account for the \"x lines hidden\" row.\n            if (row && this.getLineNum(row) === lineNum) {\n                return row;\n            }\n        }\n\n        if (startRow) {\n            // startRow already includes the offset, so we need to remove it.\n            startRow -= rowOffset;\n        }\n\n        let low = startRow || 0;\n        let high = Math.min(endRow || table.rows.length, table.rows.length);\n\n        if (endRow !== undefined && endRow < table.rows.length) {\n            // See if we got lucky and found it in the last row.\n            if (this.getLineNum(table.rows[endRow]) === lineNum) {\n                return table.rows[endRow];\n            }\n        } else if (row !== null) {\n            /*\n             * We collapsed the rows (unless someone mucked with the DB),\n             * so the desired row is less than the row number retrieved.\n             */\n            high = Math.min(high, rowOffset + lineNum);\n        }\n\n        // Binary search for this cell.\n        for (let i = Math.round((low + high) / 2); low < high - 1;) {\n            row = table.rows[rowOffset + i];\n\n            if (!row) {\n                // This should not happen, unless we miscomputed high.\n                high--;\n\n                /*\n                 * This won't do much if low + high is odd, but we'll catch\n                 * up on the next iteration.\n                 */\n                i = Math.round((low + high) / 2);\n                continue;\n            }\n\n            let value = this.getLineNum(row);\n\n            if (!value) {\n                /*\n                 * Bad luck, let's look around.\n                 *\n                 * We'd expect to find a value on the first try, but the\n                 * following makes sure we explore all rows.\n                 */\n                let found = false;\n\n                for (let j = 1; j <= (high - low) / 2; j++) {\n                    row = table.rows[rowOffset + i + j];\n\n                    if (row && this.getLineNum(row)) {\n                        i = i + j;\n                        found = true;\n                        break;\n                    } else {\n                        row = table.rows[rowOffset + i - j];\n\n                        if (row && this.getLineNum(row)) {\n                            i = i - j;\n                            found = true;\n                            break;\n                        }\n                    }\n                }\n\n                if (found) {\n                    value = this.getLineNum(row);\n                } else {\n                    return null;\n                }\n            }\n\n            // See if we can use simple math to find the row quickly.\n            const guessRowNum = lineNum - value + rowOffset + i;\n\n            if (guessRowNum >= 0 && guessRowNum < table.rows.length) {\n                const guessRow = table.rows[guessRowNum];\n\n                if (guessRow && this.getLineNum(guessRow) === lineNum) {\n                    // We found it using maths!\n                    return guessRow;\n                }\n            }\n\n            const oldHigh = high;\n            const oldLow = low;\n\n            if (value > lineNum) {\n                high = i;\n            } else if (value < lineNum) {\n                low = i;\n            } else {\n                return row;\n            }\n\n            /*\n             * Make sure we don't get stuck in an infinite loop. This can happen\n             * when a comment is placed in a line that isn't being shown.\n             */\n            if (oldHigh === high && oldLow === low) {\n                break;\n            }\n\n            i = Math.round((low + high) / 2);\n        }\n\n        // Well.. damn. Ignore this then.\n        return null;\n    },\n\n    /**\n     * Begin the selection of line numbers.\n     *\n     * Args:\n     *     $row (jQuery):\n     *         The selected row.\n     */\n    _begin($row) {\n        const lineNum = this.getLineNum($row[0]);\n\n        this._$begin = $row;\n        this._$end = $row;\n        this._beginLineNum = lineNum;\n        this._endLineNum = lineNum;\n        this._lastSeenIndex = $row[0].rowIndex;\n\n        $row.addClass('selected');\n        this.$el.disableSelection();\n    },\n\n    /**\n     * Finalize the selection and pop up a comment dialog.\n     *\n     * Args:\n     *     $row (jQuery):\n     *         The selected row.\n     */\n    _end($row) {\n        if (this._beginLineNum === this._endLineNum) {\n            /* See if we have a comment flag on the selected row. */\n            const $commentFlag = $row.find('.commentflag');\n\n            if ($commentFlag.length === 1) {\n                $commentFlag.click();\n                return;\n            }\n        }\n\n        /*\n         * Selection was finalized. Create the comment block\n         * and show the comment dialog.\n         */\n        this.options.reviewableView.createAndEditCommentBlock({\n            beginLineNum: this._beginLineNum,\n            endLineNum: this._endLineNum,\n            $beginRow: this._$begin,\n            $endRow: this._$end\n        });\n    },\n\n    /**\n     * Add a row to the selection.\n     *\n     * This will update the selection range and mark the rows as selected.\n     *\n     * This row is assumed to be the most recently selected row, and\n     * will mark the new beginning or end of the selection.\n     *\n     * Args:\n     *     $row (jQuery):\n     *         The row to add to the selection.\n     */\n    _addRow($row) {\n        /* We have an active selection. */\n        const lineNum = this.getLineNum($row[0]);\n\n        if (lineNum < this._beginLineNum) {\n            this._$begin = $row;\n            this._beginLineNum = lineNum;\n        } else if (lineNum > this._beginLineNum) {\n            this._$end = $row;\n            this._endLineNum = lineNum;\n        }\n\n        const min = Math.min(this._lastSeenIndex, $row[0].rowIndex);\n        const max = Math.max(this._lastSeenIndex, $row[0].rowIndex);\n\n        for (let i = min; i <= max; i++) {\n            $(this.el.rows[i]).addClass('selected');\n        }\n\n        this._lastSeenIndex = $row[0].rowIndex;\n    },\n\n    /**\n     * Highlight a row.\n     *\n     * This will highlight a row and show a ghost comment flag. This is done\n     * when the mouse hovers over the row.\n     *\n     * Args:\n     *     $row (jQuery):\n     *         The row to highlight.\n     */\n    _highlightRow($row) {\n        const $lineNumCell = $($row[0].cells[0]);\n\n        /* See if we have a comment flag in here. */\n        if ($lineNumCell.find('.commentflag').length === 0) {\n            this._$ghostCommentFlag\n                .css('top', $row.offset().top - 1)\n                .show()\n                .parent()\n                    .removeClass('selected');\n            this._$ghostCommentFlagCell = $lineNumCell;\n        }\n\n        $row.addClass('selected');\n    },\n\n    /**\n     * Remove old rows from the selection based on the most recent selection.\n     *\n     * Args:\n     *     $row (jQuery):\n     *         The most recent row selection.\n     */\n    _removeOldRows($row) {\n        const destRowIndex = $row[0].rowIndex;\n\n        if (destRowIndex >= this._$begin[0].rowIndex) {\n            if (this._lastSeenIndex !== this._$end[0].rowIndex &&\n                this._lastSeenIndex < destRowIndex) {\n                /*\n                 * We're removing from the top of the range. The beginning\n                 * location will need to be moved.\n                 */\n                this._removeSelectionClasses(this._lastSeenIndex, destRowIndex);\n                this._$begin = $row;\n                this._beginLineNum = this.getLineNum($row[0]);\n            } else {\n                /*\n                 * We're removing from the bottom of the selection. The end\n                 * location will need to be moved.\n                 */\n                this._removeSelectionClasses(destRowIndex,\n                                             this._lastSeenIndex);\n\n                this._$end = $row;\n                this._endLineNum = this.getLineNum($row[0]);\n            }\n\n            this._lastSeenIndex = destRowIndex;\n        }\n    },\n\n    /**\n     * Reset the selection information.\n     */\n    _reset() {\n        if (this._$begin) {\n            /* Reset the selection. */\n            this._removeSelectionClasses(this._$begin[0].rowIndex,\n                                         this._$end[0].rowIndex);\n\n            this._$begin = null;\n            this._$end = null;\n            this._beginLineNum = 0;\n            this._endLineNum = 0;\n            this._lastSeenIndex = 0;\n        }\n\n        this._$ghostCommentFlagCell = null;\n\n        /* Re-enable text selection on IE */\n        this.$el.enableSelection();\n    },\n\n    /**\n     * Remove the selection classes on a range of rows.\n     *\n     * Args:\n     *     startRowIndex (number):\n     *         The row index to start removing selection classes at.\n     *\n     *     endRowIndex (number):\n     *         The row index to stop removing selection classes at.\n     */\n    _removeSelectionClasses(startRowIndex, endRowIndex) {\n        for (let i = startRowIndex; i <= endRowIndex; i++) {\n            $(this.el.rows[i]).removeClass('selected');\n        }\n    },\n\n    /**\n     * Return whether a particular cell is a line number cell.\n     *\n     * Args:\n     *     cell (Element):\n     *         The cell to inspect.\n     */\n    _isLineNumCell(cell) {\n        return cell.tagName === 'TH' &&\n               cell.parentNode.getAttribute('line');\n    },\n\n    /**\n     * Return the actual cell node in the table.\n     *\n     * If the node specified is the ghost flag, this will return the\n     * cell the ghost flag represents.\n     *\n     * If this is a comment flag inside a cell, this will return the\n     * comment flag's parent cell\n     *\n     * Returns:\n     *     jQuery:\n     *     The row.\n     */\n    _getActualLineNumCell($node) {\n        if ($node.hasClass('commentflag')) {\n            if ($node[0] === this._$ghostCommentFlag[0]) {\n                return this._$ghostCommentFlagCell;\n            } else {\n                return $node.parent();\n            }\n        }\n\n        return $node;\n    },\n\n    /**\n     * Handler for when the user copies text in a column.\n     *\n     * This will begin the process of capturing any selected text in\n     * a column to the clipboard in a cross-browser way.\n     */\n    _onCopy(e) {\n        const clipboardData = e.originalEvent.clipboardData ||\n                              window.clipboardData;\n\n        if (clipboardData && this._supportsSetClipboard &&\n            this._copySelectionToClipboard(clipboardData)) {\n            /*\n             * Prevent the default copy action from occurring.\n             */\n            e.preventDefault();\n            e.stopPropagation();\n        }\n    },\n\n    /**\n     * Find the pre tags and push them into the result array.\n     *\n     * Args:\n     *     result (array):\n     *         The array for which all matching ``<pre>`` elements will be\n     *         pushed into.\n     *\n     *     parentEl (Element):\n     *         The parent element to search under.\n     *\n     *     tdClass (string):\n     *         The class of ``<td>`` elements to search.\n     *\n     *     excludeTBodyClass (string):\n     *         The class of the ``<tbody>`` to exclude.\n     */\n    _findPreTags(result, parentEl, tdClass, excludeTBodyClass) {\n        for (let i = 0; i < parentEl.children.length; i++) {\n            const node = parentEl.children[i];\n\n            if (node.nodeType === Node.ELEMENT_NODE) {\n                if (node.tagName === 'PRE') {\n                    result.push(node);\n                } else if ((node.tagName !== 'TD' ||\n                            $(node).hasClass(tdClass)) &&\n                           (node.tagName !== 'TBODY' ||\n                            !$(node).hasClass(excludeTBodyClass))) {\n                    findPreTags(result, node, tdClass, excludeTBodyClass);\n                }\n            }\n        }\n    },\n\n    /**\n     * Copy the current selection to the clipboard.\n     *\n     * This will locate the desired text to copy, based on the selection\n     * range within the column where selection started. It will then\n     * extract the code from the ``<pre>`` tags and build a string to set in\n     * the clipboard.\n     *\n     * This requires support in the browser for setting clipboard contents\n     * on copy. If the browser does not support this, the default behavior\n     * will be used.\n     *\n     * Args:\n     *     clipboardData (DataTransfer):\n     *         The clipboard data from the copy event.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether or not we successfully set the clipboard data.\n     */\n    _copySelectionToClipboard(clipboardData) {\n        let excludeTBodyClass;\n        let tdClass;\n\n        if (this._newlineChar === null) {\n            /*\n             * Figure out what newline character should be used on this\n             * platform. Ideally, we'd determine this from some browser\n             * behavior, but it doesn't seem that can be consistently\n             * determined.\n             */\n            if (navigator.appVersion.includes('Win')) {\n                this._newlineChar = '\\r\\n';\n            } else {\n                this._newlineChar = '\\n';\n            }\n        }\n\n        if (this._selectedCellIndex === 3 || this.$el.hasClass('newfile')) {\n            tdClass = 'r';\n            excludeTBodyClass = 'delete';\n        } else {\n            tdClass = 'l';\n            excludeTBodyClass = 'insert';\n        }\n\n        const sel = window.getSelection();\n        const textParts = [];\n\n        for (let i = 0; i < sel.rangeCount; i++) {\n            const range = sel.getRangeAt(i);\n\n            if (range.collapsed) {\n                continue;\n            }\n\n            const nodes = [];\n            const doc = range.cloneContents();\n            findPreTags(nodes, doc, tdClass, excludeTBodyClass);\n\n            if (nodes.length > 0) {\n                /*\n                 * The selection spans multiple rows. Find the blocks of text\n                 * in the column we want, and copy those to the clipboard.\n                 */\n                for (let j = 0; j < nodes.length; j++) {\n                    textParts.push(nodes[j].textContent);\n                }\n            } else {\n                /*\n                 * If we're here, then we selected a subset of a single\n                 * cell. There was only one Range, and no <pre> tags as\n                 * part of it. We can just grab the text of the document.\n                 *\n                 * (We don't really need to break here, but we're going to\n                 * in order to be clear that we're completely done.)\n                 */\n                textParts.push($(doc).text());\n                break;\n            }\n        }\n\n        try {\n            clipboardData.setData('text', textParts.join(this._newlineChar));\n        } catch (e) {\n            /* Let the native behavior take over. */\n            this._supportsSetClipboard = false;\n            return false;\n        }\n\n        return true;\n    },\n\n    /**\n     * Handle the mouse down event, which begins selection for comments.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``mousedown`` event.\n     */\n    _onMouseDown(e) {\n        if (this._selectionClass) {\n            this.$el.removeClass(this._selectionClass);\n        }\n\n        const node = this._$ghostCommentFlagCell\n                   ? this._$ghostCommentFlagCell[0]\n                   : e.target;\n\n        if (this._isLineNumCell(node)) {\n            this._begin($(node.parentNode));\n        } else {\n            const $node = node.tagName === 'TD'\n                      ? $(node)\n                      : $(node).parentsUntil('tr', 'td');\n\n            if ($node.length > 0) {\n                this._selectionClass = 'selecting-col-' + $node[0].cellIndex;\n                this._selectedCellIndex = $node[0].cellIndex;\n                this.$el.addClass(this._selectionClass);\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse up event.\n     *\n     * This will finalize the selection of a range of lines, creating a new\n     * comment block and displaying the dialog.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``mouseup`` event.\n     */\n    _onMouseUp(e) {\n        const node = this._$ghostCommentFlagCell\n                   ? this._$ghostCommentFlagCell[0]\n                   : e.target;\n\n        if (this._isLineNumCell(node)) {\n            this._end(this._getActualLineNumCell($(node)).parent());\n            e.stopImmediatePropagation();\n        }\n\n        this._reset();\n    },\n\n    /**\n     * Handle the mouse over event.\n     *\n     * This will update the selection, if there is one, to include this row\n     * in the range, and set the \"selected\" class on the new row.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``mouseover`` event.\n     */\n    _onMouseOver(e) {\n        const $node = this._getActualLineNumCell($(e.target));\n        const $row = $node.parent();\n\n        if (this._isLineNumCell($node[0])) {\n            if (this._$begin) {\n                this._addRow($row);\n            } else {\n                this._highlightRow($row);\n            }\n        } else if (this._$ghostCommentFlagCell &&\n                   $node[0] !== this._$ghostCommentFlagCell[0]) {\n            $row.removeClass('selected');\n        }\n    },\n\n    /**\n     * Handle the mouse out event.\n     *\n     * This will remove any lines outside the new range from the selection.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``mouseout`` event.\n     */\n    _onMouseOut(e) {\n        const relTarget = e.relatedTarget;\n\n        if (relTarget !== this._$ghostCommentFlag[0]) {\n            this._$ghostCommentFlag.hide();\n            this._$ghostCommentFlagCell = null;\n        }\n\n        const $node = this._getActualLineNumCell($(e.target));\n\n        if (this._$begin) {\n            if (relTarget && this._isLineNumCell(relTarget)) {\n                this._removeOldRows($(relTarget.parentNode));\n            }\n        } else if ($node && this._isLineNumCell($node[0])) {\n            /*\n             * Opera seems to generate lots of spurious mouse-out\n             * events, which would cause us to get all sorts of\n             * errors in here unless we check the target above.\n             */\n            $node.parent().removeClass('selected');\n        }\n    },\n\n    /**\n     * Handle the beginning of a touch event.\n     *\n     * If the user is touching a line number, then this will begin tracking\n     * a new comment selection state, allowing them to either open an existing\n     * comment or create a new one.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``touchstart`` event.\n     */\n    _onTouchStart(e) {\n        const firstTouch = e.originalEvent.targetTouches[0];\n        const $node = this._getActualLineNumCell($(firstTouch.target));\n\n        if ($node !== null && this._isLineNumCell($node[0])) {\n            e.preventDefault();\n            this._begin($node.parent());\n        }\n    },\n\n    /**\n     * Handle the end of a touch event.\n     *\n     * If the user ended on a line number, then this will either open an\n     * existing comment (if the result was a single-line selection on the\n     * line of an existing comment) or create a new comment spanning all\n     * selected lines.\n     *\n     * If they ended outside of the line numbers column, then this will\n     * simply reset the selection.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``touchend`` event.\n     */\n    _onTouchEnd(e) {\n        const firstTouch = e.originalEvent.changedTouches[0];\n        const target = document.elementFromPoint(firstTouch.clientX,\n                                                 firstTouch.clientY);\n        const $node = this._getActualLineNumCell($(target));\n\n        if ($node !== null && this._isLineNumCell($node[0])) {\n            e.preventDefault();\n            this._end($node.parent());\n        }\n\n        this._reset();\n    },\n\n    /**\n     * Handle touch movement events.\n     *\n     * If selecting up or down line numbers, this will update the selection\n     * to span all rows from the original line number first touched and the\n     * line number currently being touched.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``touchmove`` event.\n     */\n    _onTouchMove(e) {\n        const firstTouch = e.originalEvent.targetTouches[0];\n        const target = document.elementFromPoint(firstTouch.clientX,\n                                                 firstTouch.clientY);\n        const $node = this._getActualLineNumCell($(target));\n\n        if ($node !== null) {\n            const $row = $node.parent();\n\n            if (this._lastSeenIndex !== $row[0].rowIndex &&\n                this._isLineNumCell($node[0])) {\n                e.preventDefault();\n\n                this._removeOldRows($row);\n                this._addRow($row);\n            }\n        }\n    },\n\n    /**\n     * Handle touch cancellation events.\n     *\n     * This resets the line number selection. The user will need to begin the\n     * selection again.\n     */\n    _onTouchCancel() {\n        this._reset();\n    },\n\n    /**\n     * Return the line number for a row.\n     *\n     * Args:\n     *     row (Element):\n     *         The element to get the line number for.\n     *\n     * Returns:\n     *     number:\n     *     The line number.\n     */\n    getLineNum(row) {\n        return parseInt(row.getAttribute('line'), 10);\n    },\n});\n"]}