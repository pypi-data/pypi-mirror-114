{"version":3,"sources":["dialogViewTests.es6.js"],"names":[],"mappings":"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","file":"dialogViewTests.js","sourcesContent":["suite('rb/ui/views/DialogView', function() {\n    describe('Buttons', function() {\n        describe('Settings', function() {\n            it('Default', function() {\n                const dialogView = new RB.DialogView({\n                    buttons: [\n                        {\n                            label: 'Test',\n                            id: 'testid',\n                        }\n                    ],\n                });\n                dialogView._makeButtons();\n\n                const buttons = dialogView.$buttonsMap;\n                const button = buttons.testid;\n\n                expect(Object.keys(buttons).length).toBe(1);\n                expect(button.val()).toBe('Test');\n                expect(button.prop('id')).toBe('testid');\n                expect(button.prop('disabled')).toBe(false);\n                expect(button.hasClass('primary')).toBe(false);\n                expect(button.hasClass('danger')).toBe(false);\n            });\n\n            it('Primary', function() {\n                const dialogView = new RB.DialogView({\n                    buttons: [\n                        {\n                            label: 'Test',\n                            id: 'testid',\n                            primary: true,\n                        },\n                    ],\n                });\n                dialogView._makeButtons();\n\n                const buttons = dialogView.$buttonsMap;\n                const button = buttons.testid;\n\n                expect(Object.keys(buttons).length).toBe(1);\n                expect(button.val()).toBe('Test');\n                expect(button.prop('id')).toBe('testid');\n                expect(button.prop('disabled')).toBe(false);\n                expect(button.hasClass('primary')).toBe(true);\n                expect(button.hasClass('danger')).toBe(false);\n            });\n\n            it('Disabled', function() {\n                const dialogView = new RB.DialogView({\n                    buttons: [\n                        {\n                            label: 'Test',\n                            id: 'testid',\n                            disabled: true,\n                        },\n                    ],\n                });\n                dialogView._makeButtons();\n\n                const buttons = dialogView.$buttonsMap;\n                const button = buttons.testid;\n\n                expect(Object.keys(buttons).length).toBe(1);\n                expect(button.val()).toBe('Test');\n                expect(button.prop('id')).toBe('testid');\n                expect(button.prop('disabled')).toBe(true);\n                expect(button.hasClass('primary')).toBe(false);\n                expect(button.hasClass('danger')).toBe(false);\n            });\n\n            it('Danger', function() {\n                const dialogView = new RB.DialogView({\n                    buttons: [\n                        {\n                            label: 'Test',\n                            id: 'testid',\n                            danger: true,\n                        },\n                    ],\n                });\n                dialogView._makeButtons();\n\n                const buttons = dialogView.$buttonsMap;\n                const button = buttons.testid;\n\n                expect(Object.keys(buttons).length).toBe(1);\n                expect(button.val()).toBe('Test');\n                expect(button.prop('id')).toBe('testid');\n                expect(button.prop('disabled')).toBe(false);\n                expect(button.hasClass('primary')).toBe(false);\n                expect(button.hasClass('danger')).toBe(true);\n            });\n        });\n\n        describe('Events', function() {\n            describe('Click', function() {\n                it('When function', function() {\n                    const myFunc = jasmine.createSpy('cb');\n                    const dialogView = new RB.DialogView({\n                        buttons: [\n                            {\n                                label: 'Test',\n                                id: 'testid',\n                                onClick: myFunc,\n                            },\n                        ],\n                    });\n                    dialogView._makeButtons();\n\n                    const buttons = dialogView.$buttonsMap;\n                    const button = buttons.testid;\n\n                    expect(Object.keys(buttons).length).toBe(1);\n                    expect(button.val()).toBe('Test');\n                    button.click();\n                    expect(myFunc).toHaveBeenCalled();\n                });\n\n                it('When string on subclass', function() {\n                    const MyDialogView = RB.DialogView.extend({\n                        buttons: [\n                            {\n                                label: 'Test',\n                                id: 'testid',\n                                onClick: '_onClicked',\n                            },\n                        ],\n\n                        _onClicked: jasmine.createSpy('cb'),\n                    });\n                    const dialogView = new MyDialogView();\n                    dialogView._makeButtons();\n\n                    const buttons = dialogView.$buttonsMap;\n                    const button = buttons.testid;\n\n                    expect(Object.keys(buttons).length).toBe(1);\n                    expect(button.val()).toBe('Test');\n                    button.click();\n                    expect(dialogView._onClicked).toHaveBeenCalled();\n                });\n\n                describe('Keydown', function() {\n                    it('Esc key', function() {\n                        const dialogView = new RB.DialogView({\n                            buttons: [{\n                                id: 'testid',\n                                label: 'Test',\n                            }],\n                        });\n\n                        dialogView.show();\n\n                        const myFunc = jasmine.createSpy('hide');\n                        dialogView.hide = myFunc;\n\n                        const buttons = dialogView.$buttonsMap;\n                        expect(Object.keys(buttons).length).toBe(1);\n                        expect(buttons.testid.val()).toBe('Test');\n\n                        dialogView.$el.trigger(\n                            $.Event('keydown', { which: $.ui.keyCode.ESCAPE }));\n\n                        expect(myFunc).toHaveBeenCalled();\n\n                        dialogView.remove();\n                    });\n                });\n\n                describe('Submit', function() {\n                    it('with primary button enabled', function() {\n                        const myFunc = jasmine.createSpy('cb');\n                        const dialogView = new RB.DialogView({\n                            buttons: [{\n                                id: 'testid',\n                                label: 'Test',\n                                onClick: myFunc,\n                                disabled: false,\n                                primary: true,\n                            }],\n                            body: _.template(dedent`\n                                <form>\n                                 <input value=\"test\">\n                                </form>\n                            `),\n                        });\n\n                        dialogView.show();\n\n                        const buttons = dialogView.$buttonsMap;\n                        const button = buttons.testid;\n                        const form = dialogView.$el.find('form');\n\n                        expect(Object.keys(buttons).length).toBe(1);\n                        expect(button.val()).toBe('Test');\n                        expect(button.prop('disabled')).toBe(false);\n                        expect(button.hasClass('primary')).toBe(true);\n\n                        form.trigger($.Event('submit'));\n                        expect(myFunc).toHaveBeenCalled();\n\n                        dialogView.remove();\n                    });\n\n                    it('with primary button disabled', function() {\n                        const myFunc = jasmine.createSpy('cb');\n                        const dialogView = new RB.DialogView({\n                            buttons: [{\n                                id: 'testid',\n                                label: 'Test',\n                                onClick: myFunc,\n                                disabled: true,\n                                primary: true,\n                            }],\n                            body: _.template(dedent`\n                                <form>\n                                 <input value=\"test\">\n                                </form>\n                            `),\n                        });\n\n                        dialogView.show();\n\n                        const buttons = dialogView.$buttonsMap;\n                        const button = buttons.testid;\n                        const form = dialogView.$el.find('form');\n\n                        expect(Object.keys(buttons).length).toBe(1);\n                        expect(button.val()).toBe('Test')\n                        expect(button.prop('disabled')).toBe(true);\n                        expect(button.hasClass('primary')).toBe(true);\n\n                        form.trigger($.Event('submit'));\n                        expect(myFunc).not.toHaveBeenCalled();\n\n                        dialogView.remove();\n                    });\n\n                    it('with explicit action', function() {\n                        const myFunc1 = jasmine.createSpy('cb1');\n                        const myFunc2 = jasmine.createSpy('cb2')\n                            .and.returnValue(false);\n                        const dialogView = new RB.DialogView({\n                            buttons: [{\n                                id: 'testid',\n                                label: 'Test',\n                                onClick: myFunc1,\n                                disabled: false,\n                                primary: true,\n                            }],\n                            body: _.template(dedent`\n                                <form action=\".\">\n                                 <input value=\"test\">\n                                </form>\n                            `),\n                        });\n\n                        dialogView.show();\n\n                        const buttons = dialogView.$buttonsMap;\n                        const button = buttons.testid;\n                        const form = dialogView.$el.find('form');\n                        form.submit(myFunc2);\n\n                        expect(Object.keys(buttons).length).toBe(1);\n                        expect(button.val()).toBe('Test');\n                        expect(button.prop('disabled')).toBe(false);\n                        expect(button.hasClass('primary')).toBe(true);\n\n                        form.trigger($.Event('submit'));\n                        expect(myFunc1).not.toHaveBeenCalled();\n                        expect(myFunc2).toHaveBeenCalled();\n\n                        dialogView.remove();\n                    });\n                });\n            });\n        });\n    });\n});\n"]}