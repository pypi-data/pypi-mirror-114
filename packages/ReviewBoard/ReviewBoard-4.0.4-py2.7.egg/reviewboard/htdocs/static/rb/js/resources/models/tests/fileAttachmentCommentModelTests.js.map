{"version":3,"sources":["fileAttachmentCommentModelTests.es6.js"],"names":[],"mappings":"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","file":"fileAttachmentCommentModelTests.js","sourcesContent":["suite('rb/resources/models/FileAttachmentComment', function() {\n    const baseStrings = RB.BaseResource.strings;\n    let model;\n\n    beforeEach(function() {\n        /* Set some sane defaults needed to pass validation. */\n        model = new RB.FileAttachmentComment({\n            fileAttachmentID: 16,\n            parentObject: new RB.BaseResource({\n                'public': true,\n            }),\n        });\n    });\n\n    describe('parse', function() {\n        it('API payloads', function() {\n            const data = model.parse({\n                stat: 'ok',\n                file_attachment_comment: {\n                    id: 42,\n                    issue_opened: true,\n                    issue_status: 'resolved',\n                    text_type: 'markdown',\n                    text: 'foo',\n                    extra_data: {\n                        my_int: 123,\n                        my_bool: true,\n                        my_str: 'strvalue',\n                        my_null: null,\n                    },\n                    link_text: 'my-link-text',\n                    thumbnail_html: '<blink>Boo</blink>',\n                    review_url: '/review-ui/',\n                    file_attachment: {\n                        id: 10,\n                        filename: 'file.txt',\n                    },\n                },\n            });\n\n            expect(data).not.toBe(undefined);\n            expect(data.id).toBe(42);\n            expect(data.issueOpened).toBe(true);\n            expect(data.issueStatus).toBe(RB.BaseComment.STATE_RESOLVED);\n            expect(data.richText).toBe(true);\n            expect(data.text).toBe('foo');\n            expect(data.extraData).not.toBe(undefined);\n            expect(data.extraData.my_int).toBe(123);\n            expect(data.extraData.my_bool).toBe(true);\n            expect(data.extraData.my_str).toBe('strvalue');\n            expect(data.extraData.my_null).toBe(null);\n            expect(data.linkText).toBe('my-link-text');\n            expect(data.thumbnailHTML).toBe('<blink>Boo</blink>');\n            expect(data.reviewURL).toBe('/review-ui/');\n            expect(data.fileAttachment).not.toBe(undefined);\n            expect(data.fileAttachment.id).toBe(10);\n            expect(data.fileAttachment.get('filename')).toBe('file.txt');\n            expect(data.fileAttachmentID).toBe(10);\n        });\n    });\n\n    describe('toJSON', function() {\n        it('BaseComment.toJSON called', function() {\n            spyOn(RB.BaseComment.prototype, 'toJSON').and.callThrough();\n            model.toJSON();\n            expect(RB.BaseComment.prototype.toJSON).toHaveBeenCalled();\n        });\n\n        describe('diff_against_file_attachment_id field', function() {\n            it('When loaded', function() {\n                model.set({\n                    loaded: true,\n                    diffAgainstFileAttachmentID: 123,\n                });\n                const data = model.toJSON();\n                expect(data.diff_against_file_attachment_id).toBe(undefined);\n            });\n\n            describe('When not loaded', function() {\n                it('With value', function() {\n                    model.set('diffAgainstFileAttachmentID', 123);\n                    const data = model.toJSON();\n                    expect(data.diff_against_file_attachment_id).toBe(123);\n                });\n\n                it('Without value', function() {\n                    const data = model.toJSON();\n                    expect(data.diff_against_file_attachment_id)\n                        .toBe(undefined);\n                });\n            });\n        });\n\n        describe('file_attachment_id field', function() {\n            it('When loaded', function() {\n                model.set({\n                    loaded: true,\n                    fileAttachmentID: 123,\n                });\n\n                const data = model.toJSON();\n                expect(data.file_attachment_id).toBe(undefined);\n            });\n\n            it('When not loaded', function() {\n                model.set('fileAttachmentID', 123);\n                const data = model.toJSON();\n                expect(data.file_attachment_id).toBe(123);\n            });\n        });\n\n        describe('force_text_type field', function() {\n            it('With value', function() {\n                model.set('forceTextType', 'html');\n                const data = model.toJSON();\n                expect(data.force_text_type).toBe('html');\n            });\n\n            it('Without value', function() {\n                const data = model.toJSON();\n                expect(data.force_text_type).toBe(undefined);\n            });\n        });\n\n        describe('include_text_types field', function() {\n            it('With value', function() {\n                model.set('includeTextTypes', 'html');\n                const data = model.toJSON();\n                expect(data.include_text_types).toBe('html');\n            });\n\n            it('Without value', function() {\n                const data = model.toJSON();\n                expect(data.include_text_types).toBe(undefined);\n            });\n        });\n\n        it('extra_data field', function() {\n            model.set({\n                extraData: {\n                    my_int: 123,\n                    my_bool: true,\n                    my_str: 'strvalue',\n                    my_null: null,\n                },\n            });\n\n            const data = model.toJSON();\n            expect(data['extra_data.my_int']).toBe(123);\n            expect(data['extra_data.my_bool']).toBe(true);\n            expect(data['extra_data.my_str']).toBe('strvalue');\n            expect(data['extra_data.my_null']).toBe(null);\n        });\n    });\n\n    describe('validate', function() {\n        it('Inherited behavior', function() {\n            spyOn(RB.BaseComment.prototype, 'validate');\n            model.validate({});\n            expect(RB.BaseComment.prototype.validate).toHaveBeenCalled();\n        });\n\n        describe('extraData', function() {\n            describe('Valid values', function() {\n                it('Empty object', function() {\n                    expect(model.validate({\n                        extraData: {},\n                    })).toBe(undefined);\n                });\n\n                it('Populated object', function() {\n                    expect(model.validate({\n                        extraData: {\n                            a: 42,\n                        },\n                    })).toBe(undefined);\n                });\n\n                it('Undefined', function() {\n                    expect(model.validate({\n                        extraData: undefined,\n                    })).toBe(undefined);\n                });\n            });\n\n            describe('Invalid values', function() {\n                const errStr = baseStrings.INVALID_EXTRADATA_TYPE;\n\n                it('Array', function() {\n                    expect(model.validate({\n                        extraData: '',\n                    })).toBe(errStr);\n                });\n\n                it('Boolean', function() {\n                    expect(model.validate({\n                        extraData: false,\n                    })).toBe(errStr);\n                });\n\n                it('Integer', function() {\n                    expect(model.validate({\n                        extraData: 0,\n                    })).toBe(errStr);\n                });\n\n                it('Null', function() {\n                    expect(model.validate({\n                        extraData: null,\n                    })).toBe(errStr);\n                });\n\n                it('String', function() {\n                    expect(model.validate({\n                        extraData: '',\n                    })).toBe(errStr);\n                });\n            });\n        });\n\n        describe('extraData entries', function() {\n            describe('Valid values', function() {\n                it('Booleans', function() {\n                    expect(model.validate({\n                        extraData: {\n                            value: true,\n                        },\n                    })).toBe(undefined);\n                });\n\n                it('Integers', function() {\n                    expect(model.validate({\n                        extraData: {\n                            value: 42,\n                        },\n                    })).toBe(undefined);\n                });\n\n                it('Null', function() {\n                    expect(model.validate({\n                        extraData: {\n                            value: null,\n                        },\n                    })).toBe(undefined);\n                });\n\n                it('Strings', function() {\n                    expect(model.validate({\n                        extraData: {\n                            value: 'foo',\n                        },\n                    })).toBe(undefined);\n                });\n            });\n\n            describe('Invalid values', function() {\n                const errStr = baseStrings.INVALID_EXTRADATA_VALUE_TYPE\n                    .replace('{key}', 'value');\n\n                it('Arrays', function() {\n                    expect(model.validate({\n                        extraData: {\n                            value: [1, 2, 3],\n                        },\n                    })).toBe(errStr);\n                });\n\n                it('NaN', function() {\n                    expect(model.validate({\n                        extraData: {\n                            value: NaN,\n                        },\n                    })).toBe(errStr);\n                });\n\n                it('Objects', function() {\n                    expect(model.validate({\n                        extraData: {\n                            value: {\n                                a: 1,\n                            },\n                        },\n                    })).toBe(errStr);\n                });\n\n                it('Undefined', function() {\n                    expect(model.validate({\n                        extraData: {\n                            value: undefined,\n                        },\n                    })).toBe(errStr);\n                });\n            });\n        });\n    });\n});\n"]}