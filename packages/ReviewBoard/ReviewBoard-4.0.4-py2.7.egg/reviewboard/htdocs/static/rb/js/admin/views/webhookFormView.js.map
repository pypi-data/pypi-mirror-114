{"version":3,"sources":["webhookFormView.es6.js"],"names":[],"mappings":";;AAAA;;;;;;AAMA,GAAG,eAAH,GAAqB,SAAS,IAAT,CAAc,MAAd,CAAqB;AACtC,YAAQ;AACJ,+BAAuB,mBADnB;AAEJ,+BAAuB,oBAFnB;AAGJ,yCAAiC,4BAH7B;AAIJ,+BAAuB;AAJnB,KAD8B;;AAQtC;;;;;;;AAOA,UAfsC,oBAe7B;AACL,aAAK,UAAL,GAAkB,EAAE,cAAF,CAAlB;AACA,aAAK,iBAAL,GAAyB,EAAE,YAAF,EAAgB,IAAhB,CAAqB,OAArB,CAAzB;AACA,aAAK,mBAAL,GAA2B,KAAK,iBAAL,CAAuB,MAAvB,CAA8B,aAA9B,CAA3B;AACA,aAAK,SAAL,GAAiB,EAAE,cAAF,CAAjB;AACA,aAAK,iBAAL,GAAyB,KAAK,SAAL,CAAe,IAAf,CAAoB,aAApB,CAAzB;AACA,aAAK,kBAAL,GAA0B,KAAK,CAAL,CAAO,uBAAP,CAA1B;AACA,aAAK,UAAL,GAAkB,KAAK,CAAL,CAAO,qBAAP,CAAlB;AACA,aAAK,kBAAL,GAA0B,EAAE,wBAAF,CAA1B;;AAEA,aAAK,WAAL,GAAmB,WAAW,YAAX,CAAwB,EAAE,oBAAF,EAAwB,CAAxB,CAAxB,EAAoD;AACnE,2BAAe,IADoD;AAEnE,kBAAM;AAF6D,SAApD,CAAnB;;AAKA,aAAK,kBAAL,CAAwB,IAAxB,CAA6B,QAA7B,EACK,MADL,CACY,OADZ,EAEK,MAFL,CAGQ,EAAE,MAAF,EACK,IADL,CACU,MADV,EACkB,aAAa,+BAAb,GACN,kBAFZ,EAGK,IAHL,qCAHR;;AASA;;;;AAIA,aAAK,mBAAL;AACA,aAAK,iBAAL;AACA,aAAK,kBAAL;AACA,aAAK,0BAAL;;AAEA,eAAO,IAAP;AACH,KAjDqC;;;AAmDtC;;;;;AAKA,uBAxDsC,iCAwDhB;AAClB,aAAK,iBAAL,CAAuB,GAAvB,CAA2B,KAAK,mBAAhC,EAAqD,IAArD,CACI,UADJ,EACgB,KAAK,mBAAL,CAAyB,CAAzB,EAA4B,OAD5C;AAEH,KA3DqC;;;AA6DtC;;;;;;AAMA,qBAnEsC,+BAmElB;AAChB,aAAK,UAAL,CAAgB,UAAhB,CAA2B,KAAK,iBAAL,CAAuB,CAAvB,EAA0B,OAArD;AACH,KArEqC;;;AAuEtC;;;;;AAKA,sBA5EsC,gCA4EjB;AACjB,aAAK,WAAL,CAAiB,SAAjB,CAA2B,MAA3B,EAAmC,KAAK,UAAL,CAAgB,GAAhB,EAAnC;AACH,KA9EqC;;;AAgFtC;;;;;AAKA,8BArFsC,wCAqFT;AACzB,aAAK,kBAAL,CAAwB,UAAxB,CAAmC,KAAK,kBAAL,CAAwB,CAAxB,EAA2B,OAA9D;AACH;AAvFqC,CAArB,CAArB","file":"webhookFormView.js","sourcesContent":["/**\n * Manages UI for the Add/Edit Webhook form.\n *\n * This will manage the visibility of different page elements, create a\n * CodeMirror for editing, and manage CodeMirror's properties.\n */\nRB.WebhookFormView = Backbone.View.extend({\n    events: {\n        'change #id_apply_to': '_onApplyToChanged',\n        'change #id_encoding': '_onEncodingChanged',\n        'change #id_use_custom_content': '_onUseCustomContentToggled',\n        'change #id_events_0': '_onAllEventsToggled',\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.WebhookFormView:\n     *     This object, for chaining.\n     */\n    render() {\n        this._$encoding = $('#id_encoding');\n        this._$eventCheckboxes = $('#id_events').find('input');\n        this._$allEventsCheckbox = this._$eventCheckboxes.filter('[value=\"*\"]');\n        this._$applyTo = $('#id_apply_to');\n        this._$applyToSelected = this._$applyTo.find('[value=\"S\"]');\n        this._$customContentRow = this.$('.field-custom_content');\n        this._$reposRow = this.$('.field-repositories');\n        this._$useCustomContent = $('#id_use_custom_content');\n\n        this._codeMirror = CodeMirror.fromTextArea($('#id_custom_content')[0], {\n            matchBrackets: true,\n            mode: 'application/json',\n        });\n\n        this._$customContentRow.find('p.help')\n            .append('<br/>')\n            .append(\n                $('<a/>')\n                    .attr('href', MANUAL_URL + 'admin/configuration/webhooks/'\n                          + '#custom-payloads')\n                    .text(gettext('Custom payload reference'))\n                );\n\n        /*\n         * Activate these handlers so that the form will be in the correct\n         * state.\n         */\n        this._onAllEventsToggled();\n        this._onApplyToChanged();\n        this._onEncodingChanged();\n        this._onUseCustomContentToggled();\n\n        return this;\n    },\n\n    /**\n     * Handler for when the All Events checkbox is toggled.\n     *\n     * Sets the other events to be disabled if the checkbox is checked.\n     */\n    _onAllEventsToggled() {\n        this._$eventCheckboxes.not(this._$allEventsCheckbox).prop(\n            'disabled', this._$allEventsCheckbox[0].checked);\n    },\n\n    /**\n     * Handler for when the Apply To radio buttons are changed.\n     *\n     * Toggles the visibility of the Repositories list, depending on the\n     * selected radio button.\n     */\n    _onApplyToChanged() {\n        this._$reposRow.setVisible(this._$applyToSelected[0].checked);\n    },\n\n    /**\n     * Handler for when the Encoding drop-down is changed.\n     *\n     * Sets the CodeMirror mode based on the encoding value.\n     */\n    _onEncodingChanged() {\n        this._codeMirror.setOption('mode', this._$encoding.val());\n    },\n\n    /**\n     * Handler for when the Use Custom Content checkbox is toggled.\n     *\n     * Toggles the visibility of the text box to match the checkbox.\n     */\n    _onUseCustomContentToggled() {\n        this._$customContentRow.setVisible(this._$useCustomContent[0].checked);\n    },\n});\n"]}