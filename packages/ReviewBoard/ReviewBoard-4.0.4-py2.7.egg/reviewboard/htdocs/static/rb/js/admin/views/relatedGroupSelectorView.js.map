{"version":3,"sources":["relatedGroupSelectorView.es6.js"],"names":[],"mappings":";;AAAA,CAAC,YAAW;;AAGZ,QAAM,iBAAiB,EAAE,QAAF,gFAAvB;;AAOA;;;AAGA,OAAG,wBAAH,GAA8B,QAAQ,yBAAR,CAAkC,MAAlC,CAAyC;AACnE,8DADmE;;AAGnE;;;;;;;;;;;;;;;;;;;AAmBA,kBAtBmE,sBAsBxD,OAtBwD,EAsB/C;AAChB,oBAAQ,yBAAR,CAAkC,SAAlC,CAA4C,UAA5C,CAAuD,IAAvD,CACI,IADJ,EAEI,EAAE,QAAF,CAAW;AACP,kCAAkB;AACd,iCAAa,CAAC,MAAD,EAAS,cAAT,CADC;AAEd,+BAAW,CACP,EAAC,OAAO,MAAR,EADO,EAEP,EAAC,OAAO,cAAR,EAFO,CAFG;AAMd,gCAAY;AANE;AADX,aAAX,EASG,OATH,CAFJ;;AAaA,iBAAK,gBAAL,GAAwB,QAAQ,eAAR,IAA2B,EAAnD;AACA,iBAAK,WAAL,GAAmB,QAAQ,UAA3B;AACH,SAtCkE;;;AAwCnE;;;;;;;;;;;AAWA,oBAnDmE,wBAmDtD,IAnDsD,EAmDhD;AACf,mBAAO,eAAe,IAAf,CAAP;AACH,SArDkE;;;AAuDnE;;;;;;;;;;;;AAYA,mBAnEmE,uBAmEvD,KAnEuD,EAmEhD,QAnEgD,EAmEtC;AAAA;;AACzB,gBAAM,SAAS;AACX,+BAAe,kCADJ;AAEX,6BAAa;AAFF,aAAf;;AAKA,gBAAI,MAAM,MAAN,KAAiB,CAArB,EAAwB;AACpB,uBAAO,CAAP,GAAW,KAAX;AACH;;AAED,cAAE,IAAF,CAAO;AACH,sBAAM,KADH;AAEH,0BAAQ,SAAR,GAAoB,KAAK,gBAAzB,gBAFG;AAGH,sBAAM,MAHH;AAIH,yBAAS,0BAAW;AAChB;;AAEA,wBAAI,MAAK,WAAL,KAAqB,IAAzB,EAA+B;AAC3B,gCAAQ,MAAR,GAAiB,QAAQ,MAAR,CAAe,MAAf,CAAsB,eAAO;AAC1C,mCAAO,IAAI,WAAX;AACH,yBAFgB,CAAjB;AAGH;AACD,6BAAS,QAAQ,MAAR,CAAe,GAAf,CAAmB;AAAA,+BAAM;AAC9B,kCAAM,EAAE,IADsB;AAE9B,0CAAc,EAAE,YAFc;AAG9B,gCAAI,EAAE,EAHwB;AAI9B,yCAAa,EAAE;AAJe,yBAAN;AAAA,qBAAnB,CAAT;AAMH,iBAlBE;AAmBH,uBAAO,iBAAa;AAAA,sDAAT,IAAS;AAAT,4BAAS;AAAA;;AAChB,4BAAQ,KAAR,CAAc,oBAAd,EAAoC,IAApC;AACA;AACH;AAtBE,aAAP;AAwBH;AArGkE,KAAzC,CAA9B;AAyGC,CAtHD","file":"relatedGroupSelectorView.js","sourcesContent":["(function() {\n\n\nconst optionTemplate = _.template(dedent`\n    <div>\n     <span class=\"title\"><%- name %> : <%- display_name %></span>\n    </div>\n`);\n\n\n/**\n * A widget to select related groups using search and autocomplete.\n */\nRB.RelatedGroupSelectorView = Djblets.RelatedObjectSelectorView.extend({\n    searchPlaceholderText: gettext('Search for groups...'),\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     localSitePrefix (string):\n     *         The URL prefix for the local site, if any.\n     *\n     *     multivalued (boolean):\n     *         Whether or not the widget should allow selecting multuple\n     *         values.\n     *\n     *     inviteOnly (boolean):\n     *         Whether or not we want to only search for inviteOnly review\n     *         groups.\n     */\n    initialize(options) {\n        Djblets.RelatedObjectSelectorView.prototype.initialize.call(\n            this,\n            _.defaults({\n                selectizeOptions: {\n                    searchField: ['name', 'display_name'],\n                    sortField: [\n                        {field: 'name'},\n                        {field: 'display_name'},\n                    ],\n                    valueField: 'name',\n                }\n            }, options));\n\n        this._localSitePrefix = options.localSitePrefix || '';\n        this._inviteOnly = options.inviteOnly;\n    },\n\n    /**\n     * Render an option in the drop-down menu.\n     *\n     * Args:\n     *     item (object):\n     *         The item to render.\n     *\n     * Returns:\n     *     string:\n     *     HTML to insert into the drop-down menu.\n     */\n    renderOption(item) {\n        return optionTemplate(item);\n    },\n\n    /**\n     * Load options from the server.\n     *\n     * Args:\n     *     query (string):\n     *         The string typed in by the user.\n     *\n     *     callback (function):\n     *         A callback to be called once data has been loaded. This should\n     *         be passed an array of objects, each representing an option in\n     *         the drop-down.\n     */\n    loadOptions(query, callback) {\n        const params = {\n            'only-fields': 'invite_only,name,display_name,id',\n            displayname: 1,\n        };\n\n        if (query.length !== 0) {\n            params.q = query;\n        }\n\n        $.ajax({\n            type: 'GET',\n            url: `${SITE_ROOT}${this._localSitePrefix}api/groups/`,\n            data: params,\n            success: results => {\n                /* This is done because we cannot filter using invite_only in\n                the groups api. */\n                if (this._inviteOnly === true) {\n                    results.groups = results.groups.filter(obj => {\n                        return obj.invite_only;\n                    });\n                }\n                callback(results.groups.map(u => ({\n                    name: u.name,\n                    display_name: u.display_name,\n                    id: u.id,\n                    invite_only: u.invite_only\n                })));\n            },\n            error: (...args) => {\n                console.error('Group query failed', args);\n                callback();\n            },\n        });\n    },\n});\n\n\n})();\n"]}