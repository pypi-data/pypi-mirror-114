{"version":3,"sources":["reviewRequestEditorModelTests.es6.js"],"names":[],"mappings":"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","file":"reviewRequestEditorModelTests.js","sourcesContent":["suite('rb/models/ReviewRequestEditor', function() {\n    let reviewRequest;\n    let editor;\n\n    beforeEach(function() {\n        reviewRequest = new RB.ReviewRequest({\n            id: 1,\n        });\n\n        editor = new RB.ReviewRequestEditor({\n            reviewRequest: reviewRequest,\n        });\n    });\n\n    describe('Methods', function() {\n        describe('createFileAttachment', function() {\n            it('With new FileAttachment', function() {\n                const fileAttachments = editor.get('fileAttachments');\n\n                expect(fileAttachments.length).toBe(0);\n\n                const fileAttachment = editor.createFileAttachment();\n                expect(fileAttachments.length).toBe(1);\n\n                expect(fileAttachments.at(0)).toBe(fileAttachment);\n            });\n        });\n\n        describe('decr', function() {\n            it('With integer attribute', function() {\n                editor.set('myint', 1);\n\n                editor.decr('myint');\n                expect(editor.get('myint')).toBe(0);\n            });\n\n            it('With non-integer attribute', function() {\n                editor.set('foo', 'abc');\n\n                expect(() => editor.decr('foo')).toThrow();\n\n                expect(console.assert).toHaveBeenCalled();\n                expect(console.assert.calls.mostRecent().args[0]).toBe(false);\n                expect(editor.get('foo')).toBe('abc');\n            });\n\n            describe('editCount', function() {\n                it('When > 0', function() {\n                    editor.set('editCount', 1);\n\n                    editor.decr('editCount');\n                    expect(editor.get('editCount')).toBe(0);\n                    expect(editor.validationError).toBe(null);\n                });\n\n                it('When 0', function() {\n                    editor.set('editCount', 0);\n\n                    editor.decr('editCount');\n                    expect(editor.get('editCount')).toBe(0);\n                    expect(editor.validationError).toBe(\n                        RB.ReviewRequestEditor.strings.UNBALANCED_EDIT_COUNT);\n                });\n            });\n        });\n\n        describe('incr', function() {\n            it('With integer attribute', function() {\n                editor.set('myint', 0);\n                editor.incr('myint');\n                expect(editor.get('myint')).toBe(1);\n            });\n\n            it('With non-integer attribute', function() {\n                editor.set('foo', 'abc');\n\n                expect(() => editor.incr('foo')).toThrow();\n\n                expect(console.assert).toHaveBeenCalled();\n                expect(console.assert.calls.mostRecent().args[0]).toBe(false);\n                expect(editor.get('foo')).toBe('abc');\n            });\n        });\n\n        describe('getDraftField', function() {\n            it('For closeDescription', function() {\n                reviewRequest.set('closeDescription', 'Test');\n\n                const value = editor.getDraftField('closeDescription');\n                expect(value).toBe('Test');\n            });\n\n            it('For closeDescriptionRichText', function() {\n                reviewRequest.set('closeDescriptionRichText', true);\n\n                const value = editor.getDraftField('closeDescriptionRichText');\n                expect(value).toBe(true);\n            });\n\n            it('For draft fields', function() {\n                reviewRequest.draft.set('description', 'Test');\n\n                const value = editor.getDraftField('description');\n                expect(value).toBe('Test');\n            });\n\n            it('With useExtraData', function() {\n                const extraData = reviewRequest.draft.get('extraData');\n\n                extraData.foo = '**Test**';\n\n                const value = editor.getDraftField('foo', {\n                    useExtraData: true\n                });\n                expect(value).toBe('**Test**');\n            });\n\n            describe('With useExtraData and useRawTextValue', function() {\n                it('With field in rawTextFields', function() {\n                    const draft = reviewRequest.draft;\n                    const extraData = reviewRequest.draft.get('extraData');\n\n                    extraData.foo = '<b>Test</b>';\n                    draft.set('rawTextFields', {\n                        extra_data: {\n                            foo: '**Test**',\n                        },\n                    });\n\n                    const value = editor.getDraftField('foo', {\n                        useExtraData: true,\n                        useRawTextValue: true,\n                    });\n                    expect(value).toBe('**Test**');\n                });\n\n                it('With field not in rawTextFields', function() {\n                    const extraData = reviewRequest.draft.get('extraData');\n\n                    extraData.foo = '<b>Test</b>';\n\n                    const value = editor.getDraftField('foo', {\n                        useExtraData: true,\n                        useRawTextValue: true,\n                    });\n                    expect(value).toBe('<b>Test</b>');\n                });\n            });\n        });\n\n        describe('setDraftField', function() {\n            let callbacks;\n            let draft;\n\n            beforeEach(function() {\n                callbacks = {\n                    error: function() {},\n                    success: function() {},\n                };\n\n                spyOn(callbacks, 'error');\n                spyOn(callbacks, 'success');\n\n                draft = editor.get('reviewRequest').draft;\n            });\n\n            describe('When publishing', function() {\n                beforeEach(function() {\n                    spyOn(editor, 'publishDraft');\n\n                    editor.set({\n                        publishing: true,\n                        pendingSaveCount: 1,\n                    });\n                });\n\n                it('Successful saves', function() {\n                    spyOn(draft, 'save').and.callFake(\n                        (options, context) => options.success.call(context));\n\n                    editor.setDraftField('summary', 'My Summary', _.defaults({\n                        jsonFieldName: 'summary',\n                    }, callbacks));\n\n                    expect(callbacks.success).toHaveBeenCalled();\n                    expect(editor.get('publishing')).toBe(false);\n                    expect(editor.get('pendingSaveCount')).toBe(0);\n                    expect(editor.publishDraft).toHaveBeenCalled();\n                });\n\n                it('Field set errors', function() {\n                    spyOn(draft, 'save').and.callFake((options, context) =>\n                        options.error.call(context, draft, {\n                            errorPayload: {\n                                fields: {\n                                    summary: ['Something went wrong'],\n                                },\n                            },\n                        }));\n\n                    editor.setDraftField('summary', 'My Summary', _.defaults({\n                        jsonFieldName: 'summary',\n                    }, callbacks));\n\n                    expect(callbacks.error).toHaveBeenCalled();\n                    expect(editor.get('publishing')).toBe(false);\n                    expect(editor.get('pendingSaveCount')).toBe(1);\n                    expect(editor.publishDraft).not.toHaveBeenCalled();\n                });\n            });\n\n            describe('Rich text fields', function() {\n                describe('changeDescription', function() {\n                    describe('Draft description', function() {\n                        function testDraftDescription(richText, textType) {\n                            spyOn(reviewRequest, 'close');\n                            spyOn(reviewRequest.draft, 'save');\n\n                            editor.setDraftField(\n                                'changeDescription',\n                                'My description',\n                                {\n                                    allowMarkdown: true,\n                                    fieldID: 'changedescription',\n                                    richText: richText,\n                                    jsonFieldName: 'changedescription',\n                                    jsonTextTypeFieldName:\n                                        'changedescription_text_type'\n                                });\n\n                            expect(reviewRequest.close)\n                                .not.toHaveBeenCalled();\n                            expect(reviewRequest.draft.save)\n                                .toHaveBeenCalled();\n\n                            expect(\n                                reviewRequest.draft.save.calls.argsFor(0)[0].data\n                            ).toEqual({\n                                changedescription_text_type: textType,\n                                changedescription: 'My description',\n                                force_text_type: 'html',\n                                include_text_types: 'raw'\n                            });\n                        }\n\n                        it('For Markdown', function() {\n                            testDraftDescription(true, 'markdown');\n                        });\n\n                        it('For plain text', function() {\n                            testDraftDescription(false, 'plain');\n                        });\n                    });\n                });\n            });\n\n            describe('Special list fields', function() {\n                describe('targetGroups', function() {\n                    it('Empty', function() {\n                        spyOn(draft, 'save').and.callFake((options, context) =>\n                            options.success.call(context));\n\n                        editor.setDraftField('targetGroups', '', _.defaults({\n                            jsonFieldName: 'target_groups'\n                        }, callbacks));\n\n                        expect(callbacks.success).toHaveBeenCalled();\n                    });\n\n                    it('With values', function() {\n                        spyOn(draft, 'save').and.callFake((options, context) =>\n                            options.success.call(context));\n\n                        editor.setDraftField(\n                            'targetGroups', 'group1, group2',\n                           _.defaults({\n                                jsonFieldName: 'target_groups'\n                            }, callbacks));\n\n                        expect(callbacks.success).toHaveBeenCalled();\n                    });\n\n                    it('With invalid groups', function() {\n                        spyOn(draft, 'save').and.callFake((options, context) =>\n                            options.error.call(context, draft, {\n                                errorPayload: {\n                                    fields: {\n                                        target_groups: ['group1', 'group2'],\n                                    },\n                                },\n                            }));\n\n                        editor.setDraftField('targetGroups', 'group1, group2',\n                                             _.defaults({\n                            jsonFieldName: 'target_groups',\n                        }, callbacks));\n\n                        expect(callbacks.error).toHaveBeenCalledWith({\n                            errorText: 'Groups \"group1\" and \"group2\" do ' +\n                                       'not exist.',\n                        });\n                    });\n                });\n\n                describe('targetPeople', function() {\n                    it('Empty', function() {\n                        spyOn(draft, 'save').and.callFake((options, context) =>\n                            options.success.call(context));\n\n                        editor.setDraftField('targetPeople', '', _.defaults({\n                            jsonFieldName: 'target_people',\n                        }, callbacks));\n\n                        expect(callbacks.success).toHaveBeenCalled();\n                    });\n\n                    it('With values', function() {\n                        spyOn(draft, 'save').and.callFake((options, context) =>\n                            options.success.call(context));\n\n                        editor.setDraftField(\n                            'targetPeople', 'user1, user2',\n                            _.defaults({\n                                jsonFieldName: 'target_people'\n                            }, callbacks));\n\n                        expect(callbacks.success).toHaveBeenCalled();\n                    });\n\n                    it('With invalid users', function() {\n                        spyOn(draft, 'save').and.callFake((options, context) =>\n                            options.error.call(context, draft, {\n                                errorPayload: {\n                                    fields: {\n                                        target_people: ['user1', 'user2'],\n                                    },\n                                },\n                            }));\n\n                        editor.setDraftField(\n                            'targetPeople', 'user1, user2',\n                            _.defaults({\n                                jsonFieldName: 'target_people',\n                            }, callbacks));\n\n                        expect(callbacks.error).toHaveBeenCalledWith({\n                            errorText: 'Users \"user1\" and \"user2\" do not exist.',\n                        });\n                    });\n                });\n\n                describe('submitter', function() {\n                    it('Empty', function() {\n                        spyOn(draft, 'save').and.callFake(\n                            (options, context) => options.success.call(context));\n\n                        editor.setDraftField('submitter', '', _.defaults({\n                            jsonFieldName: 'submitter',\n                        }, callbacks));\n\n                        expect(callbacks.success).toHaveBeenCalled();\n                    });\n\n                    it('With value', function() {\n                        spyOn(draft, 'save').and.callFake(\n                            (options, context) => options.success.call(context));\n\n                        editor.setDraftField(\n                            'submitter', 'user1',\n                            _.defaults({\n                                jsonFieldName: 'submitter',\n                            }, callbacks));\n\n                        expect(callbacks.success).toHaveBeenCalled();\n                    });\n\n                    it('With invalid user', function() {\n                        spyOn(draft, 'save').and.callFake((options, context) =>\n                            options.error.call(context, draft, {\n                                errorPayload: {\n                                    fields: {\n                                        submitter: ['user1'],\n                                    },\n                                },\n                            }));\n\n                        editor.setDraftField(\n                            'submitter', 'user1',\n                            _.defaults({\n                                jsonFieldName: 'submitter',\n                            }, callbacks));\n\n                        expect(callbacks.error).toHaveBeenCalledWith({\n                            errorText: 'User \"user1\" does not exist.',\n                        });\n                    });\n                });\n            });\n\n            describe('Custom fields', function() {\n                describe('Rich text fields', function() {\n                    function testFields(richText, textType) {\n                        spyOn(reviewRequest.draft, 'save');\n\n                        editor.setDraftField(\n                            'myField',\n                            'Test text.',\n                            {\n                                allowMarkdown: true,\n                                useExtraData: true,\n                                fieldID: 'myfield',\n                                richText: richText,\n                                jsonFieldName: 'myfield',\n                                jsonTextTypeFieldName:\n                                    'myfield_text_type'\n                            });\n\n                        expect(reviewRequest.draft.save)\n                            .toHaveBeenCalled();\n                        expect(\n                            reviewRequest.draft.save.calls.argsFor(0)[0].data\n                        ).toEqual({\n                            'extra_data.myfield_text_type': textType,\n                            'extra_data.myfield': 'Test text.',\n                            force_text_type: 'html',\n                            include_text_types: 'raw'\n                        });\n                    }\n\n                    it('For Markdown', function() {\n                        testFields(true, 'markdown');\n                    });\n\n                    it('For plain text', function() {\n                        testFields(false, 'plain');\n                    });\n                });\n            });\n        });\n    });\n\n    describe('Reviewed objects', function() {\n        describe('File attachments', function() {\n            it('Removed when destroyed', function(done) {\n                const fileAttachments = editor.get('fileAttachments');\n                const fileAttachment = editor.createFileAttachment();\n                const draft = editor.get('reviewRequest').draft;\n\n                spyOn(draft, 'ensureCreated').and.callFake(\n                    (options, context) => options.success.call(context));\n\n                expect(fileAttachments.at(0)).toBe(fileAttachment);\n\n                fileAttachment.destroy({\n                    success: function() {\n                        expect(fileAttachments.length).toBe(0);\n                        done();\n                    }\n                });\n            });\n        });\n\n        describe('Screenshots', function() {\n            it('Removed when destroyed', function(done) {\n                const screenshots = editor.get('screenshots');\n                const screenshot = reviewRequest.createScreenshot();\n\n                screenshots.add(screenshot);\n                expect(screenshots.at(0)).toBe(screenshot);\n\n                screenshot.destroy({\n                    success: () => {\n                        expect(screenshots.length).toBe(0);\n                        done();\n                    }\n                });\n            });\n        });\n    });\n\n    describe('Events', function() {\n        describe('saved', function() {\n            it('When new file attachment saved', function() {\n                const fileAttachment = editor.createFileAttachment();\n\n                spyOn(editor, 'trigger');\n                fileAttachment.trigger('saved');\n\n                expect(editor.trigger).toHaveBeenCalledWith('saved');\n            });\n\n            it('When new file attachment destroyed', function(done) {\n                const fileAttachment = editor.createFileAttachment();\n                const draft = editor.get('reviewRequest').draft;\n\n                spyOn(draft, 'ensureCreated').and.callFake(\n                    (options, context) => options.success.call(context));\n\n                spyOn(editor, 'trigger');\n                fileAttachment.destroy({\n                    success: () => {\n                        expect(editor.trigger).toHaveBeenCalledWith('saved');\n                        done();\n                    }\n                });\n            });\n\n            it('When existing file attachment saved', function() {\n                const fileAttachment =\n                    reviewRequest.draft.createFileAttachment();\n\n                editor = new RB.ReviewRequestEditor({\n                    reviewRequest: reviewRequest,\n                    fileAttachments: new Backbone.Collection(\n                        [fileAttachment])\n                });\n\n                spyOn(editor, 'trigger');\n                fileAttachment.trigger('saved');\n\n                expect(editor.trigger).toHaveBeenCalledWith('saved');\n            });\n\n            it('When existing file attachment destroyed', function(done) {\n                const fileAttachment =\n                    reviewRequest.draft.createFileAttachment();\n\n                editor = new RB.ReviewRequestEditor({\n                    reviewRequest: reviewRequest,\n                    fileAttachments: new Backbone.Collection(\n                        [fileAttachment])\n                });\n\n                spyOn(reviewRequest.draft, 'ensureCreated').and.callFake(\n                    (options, context) => options.success.call(context));\n\n                spyOn(editor, 'trigger');\n                fileAttachment.destroy({\n                    success: () => {\n                        expect(editor.trigger).toHaveBeenCalledWith('saved');\n                        done();\n                    }\n                });\n            });\n\n            it('When existing screenshot saved', function() {\n                const screenshot = reviewRequest.createScreenshot();\n\n                editor = new RB.ReviewRequestEditor({\n                    reviewRequest: reviewRequest,\n                    screenshots: new Backbone.Collection([screenshot])\n                });\n\n                spyOn(editor, 'trigger');\n                screenshot.trigger('saved');\n\n                expect(editor.trigger).toHaveBeenCalledWith('saved');\n            });\n\n            it('When existing screenshot destroyed', function(done) {\n                const screenshot = reviewRequest.createScreenshot();\n\n                editor = new RB.ReviewRequestEditor({\n                    reviewRequest: reviewRequest,\n                    screenshots: new Backbone.Collection([screenshot])\n                });\n\n                spyOn(reviewRequest.draft, 'ensureCreated').and.callFake(\n                    (options, context) => options.success.call(context));\n\n                spyOn(editor, 'trigger');\n                screenshot.destroy({\n                    success: () => {\n                        expect(editor.trigger).toHaveBeenCalledWith('saved');\n                        done();\n                    }\n                });\n            });\n        });\n\n        describe('saving', function() {\n            it('When new file attachment saving', function() {\n                const fileAttachment = editor.createFileAttachment();\n\n                spyOn(editor, 'trigger');\n                fileAttachment.trigger('saving');\n\n                expect(editor.trigger).toHaveBeenCalledWith('saving');\n            });\n\n            it('When existing file attachment saving', function() {\n                const fileAttachment =\n                    reviewRequest.draft.createFileAttachment();\n\n                editor = new RB.ReviewRequestEditor({\n                    reviewRequest: reviewRequest,\n                    fileAttachments: new Backbone.Collection(\n                        [fileAttachment])\n                });\n\n                spyOn(editor, 'trigger');\n                fileAttachment.trigger('saving');\n\n                expect(editor.trigger).toHaveBeenCalledWith('saving');\n            });\n\n            it('When screenshot saving', function() {\n                const screenshot = reviewRequest.createScreenshot();\n\n                editor = new RB.ReviewRequestEditor({\n                    reviewRequest: reviewRequest,\n                    screenshots: new Backbone.Collection([screenshot])\n                });\n\n                spyOn(editor, 'trigger');\n                screenshot.trigger('saving');\n\n                expect(editor.trigger).toHaveBeenCalledWith('saving');\n            });\n        });\n    });\n});\n"]}