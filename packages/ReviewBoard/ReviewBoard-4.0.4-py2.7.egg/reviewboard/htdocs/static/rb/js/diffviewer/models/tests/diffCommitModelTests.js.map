{"version":3,"sources":["diffCommitModelTests.es6.js"],"names":[],"mappings":";;AAAA,MAAM,iCAAN,EAAyC,YAAW;AAChD,aAAS,OAAT,EAAkB,YAAW;AACzB,WAAG,sBAAH,EAA2B,YAAW;AAClC,gBAAM,QAAQ,IAAI,GAAG,UAAP,CACV;AACI,6BAAa,aADjB;AAEI,2BAAW,MAFf;AAGI,gCAAgB,qBAHpB;AAII,oBAAI,CAJR;AAKI,2BAAW;AALf,aADU,EAOP,EAAC,OAAO,IAAR,EAPO,CAAd;;AASA,mBAAO,KAAP,EAAc,UAAd;AACA,mBAAO,MAAM,UAAb,EAAyB,GAAzB,CAA6B,IAA7B,CAAkC,SAAlC;AACA,mBAAO,MAAM,UAAb,EAAyB,OAAzB,CAAiC;AAC7B,4BAAY,aADiB;AAE7B,0BAAU,MAFmB;AAG7B,+BAAe,mBAHc;AAI7B,oBAAI,CAJyB;AAK7B,0BAAU,MALmB;AAM7B,yBAAS;AANoB,aAAjC;AAQA,mBAAO,MAAM,UAAN,EAAP,EAA2B,IAA3B,CAAgC,KAAhC;AACH,SArBD;;AAuBA,WAAG,qBAAH,EAA0B,YAAW;AACjC,gBAAM,QAAQ,IAAI,GAAG,UAAP,CACV;AACI,6BAAa,aADjB;AAEI,2BAAW,MAFf;AAGI,kIAHJ;AAWI,oBAAI,CAXR;AAYI,2BAAW;AAZf,aADU,EAcP,EAAC,OAAO,IAAR,EAdO,CAAd;;AAgBA,mBAAO,KAAP,EAAc,UAAd;AACA,mBAAO,MAAM,UAAb,EAAyB,GAAzB,CAA6B,IAA7B,CAAkC,SAAlC;AACA,mBAAO,MAAM,UAAb,EAAyB,OAAzB,CAAiC;AAC7B,4BAAY,aADiB;AAE7B,0BAAU,MAFmB;AAG7B,+BACI,uCACA,2BADA,GAEA,mCANyB;AAQ7B,oBAAI,CARyB;AAS7B,0BAAU,MATmB;AAU7B,yBAAS;AAVoB,aAAjC;AAYA,mBAAO,MAAM,UAAN,EAAP,EAA2B,IAA3B,CAAgC,IAAhC;AACH,SAhCD;;AAkCA,WAAG,yCAAH,EAA8C,YAAW;AACrD,gBAAM,UAAU,OAAO,MAAP,CAAc,GAAd,CAAhB;AACA,gBAAM,UAAU,QAAQ,MAAR,CAAe,CAAf,EAAkB,EAAlB,IAAwB,KAAxC;AACA,gBAAM,QAAQ,IAAI,GAAG,UAAP,CACV;AACI,6BAAa,aADjB;AAEI,2BAAW,MAFf;AAGI,gCAAgB,OAHpB;AAII,oBAAI,CAJR;AAKI,2BAAW;AALf,aADU,EAQV,EAAC,OAAO,IAAR,EARU,CAAd;;AAUA,mBAAO,KAAP,EAAc,UAAd;AACA,mBAAO,MAAM,UAAb,EAAyB,GAAzB,CAA6B,IAA7B,CAAkC,SAAlC;AACA,mBAAO,MAAM,UAAb,EAAyB,OAAzB,CAAiC;AAC7B,4BAAY,aADiB;AAE7B,0BAAU,MAFmB;AAG7B,+BAAe,OAHc;AAI7B,oBAAI,CAJyB;AAK7B,0BAAU,MALmB;AAM7B,yBAAS;AANoB,aAAjC;AAQA,mBAAO,MAAM,UAAN,EAAP,EAA2B,IAA3B,CAAgC,IAAhC;AACH,SAxBD;AAyBH,KAnFD;AAoFH,CArFD","file":"diffCommitModelTests.js","sourcesContent":["suite('rb/diffviewer/models/DiffCommit', function() {\n    describe('parse', function() {\n        it('Short commit message', function() {\n            const model = new RB.DiffCommit(\n                {\n                    author_name: 'Author Name',\n                    commit_id: 'r123',\n                    commit_message: 'A commit message.\\n',\n                    id: 1,\n                    parent_id: 'r122',\n                }, {parse: true});\n\n            expect(model).toBeTruthy();\n            expect(model.attributes).not.toBe(undefined);\n            expect(model.attributes).toEqual({\n                authorName: 'Author Name',\n                commitID: 'r123',\n                commitMessage: 'A commit message.',\n                id: 1,\n                parentID: 'r122',\n                summary: 'A commit message.',\n            });\n            expect(model.hasSummary()).toBe(false);\n        });\n\n        it('Long commit message', function() {\n            const model = new RB.DiffCommit(\n                {\n                    author_name: 'Author Name',\n                    commit_id: 'r123',\n                    commit_message: dedent`\n                        This is a long commit message.\n\n                        It spans several lines.\n                        It has trailing newlines as well.\n\n\n                    `,\n                    id: 2,\n                    parent_id: 'r122',\n                }, {parse: true});\n\n            expect(model).toBeTruthy();\n            expect(model.attributes).not.toBe(undefined);\n            expect(model.attributes).toEqual({\n                authorName: 'Author Name',\n                commitID: 'r123',\n                commitMessage: (\n                    'This is a long commit message.\\n\\n' +\n                    'It spans several lines.\\n' +\n                    'It has trailing newlines as well.'\n                ),\n                id: 2,\n                parentID: 'r122',\n                summary: 'This is a long commit message.',\n            });\n            expect(model.hasSummary()).toBe(true);\n        });\n\n        it('Commit message with overlong first line', function() {\n            const message = 'abcd'.repeat(100);\n            const summary = message.substr(0, 77) + '...';\n            const model = new RB.DiffCommit(\n                {\n                    author_name: 'Author Name',\n                    commit_id: 'r234',\n                    commit_message: message,\n                    id: 3,\n                    parent_id: 'r233',\n                },\n                {parse: true});\n\n            expect(model).toBeTruthy();\n            expect(model.attributes).not.toBe(undefined);\n            expect(model.attributes).toEqual({\n                authorName: 'Author Name',\n                commitID: 'r234',\n                commitMessage: message,\n                id: 3,\n                parentID: 'r233',\n                summary: summary,\n            });\n            expect(model.hasSummary()).toBe(true);\n        });\n    });\n});\n"]}