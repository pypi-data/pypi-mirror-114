{"version":3,"sources":["uploadDiffModel.es6.js"],"names":[],"mappings":"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","file":"uploadDiffModel.js","sourcesContent":["/**\n * A model for uploading diffs (either to an existing review request, or\n * creating a new review request).\n */\nRB.UploadDiffModel = Backbone.Model.extend({\n    defaults: {\n        basedir: null,\n        changeNumber: null,\n        diffFile: null,\n        diffValid: false,\n        error: null,\n        parentDiffFile: null,\n        repository: null,\n        reviewRequest: null,\n        state: 0,\n    },\n\n    State: {\n        PROMPT_FOR_DIFF: 0,\n        PROMPT_FOR_BASEDIR: 1,\n        PROPMT_FOR_CHANGE_NUMBER: 2,\n        PROCESSING_DIFF: 3,\n        UPLOADING: 4,\n        PROMPT_FOR_PARENT_DIFF: 5,\n        ERROR: 6,\n    },\n\n    /**\n     * Initialize the model.\n     */\n    initialize() {\n        Backbone.Model.prototype.initialize.apply(this, arguments);\n\n        this.on('change:diffFile change:parentDiffFile change:basedir ' +\n                'change:changeNumber change:diffValid',\n                this._updateState, this);\n    },\n\n    /**\n     * Reset the various state of the pre-commit creator.\n     *\n     * This is used when the user clicks \"start over\" in the middle of the\n     * process.\n     */\n    startOver() {\n        this.set({\n            basedir: null,\n            changeNumber: null,\n            diffFile: null,\n            diffValid: false,\n            error: null,\n            parentDiffFile: null,\n            state: this.State.PROMPT_FOR_DIFF,\n        });\n    },\n\n    /**\n     * Handle a selected diff file.\n     *\n     * In the case where the current state is PROMPT_FOR_DIFF or\n     * PROMPT_FOR_PARENT_DIFF, this will take the diff file and set the\n     * relevant attribute, triggering the validation stage.\n     *\n     * Args:\n     *     files (FileList):\n     *         The selected file list from the input element.\n     */\n    handleFiles(files) {\n        switch (this.get('state')) {\n            case this.State.PROMPT_FOR_DIFF:\n                this.set('diffFile', files[0]);\n                break;\n\n            case this.State.PROMPT_FOR_PARENT_DIFF:\n                this.set('parentDiffFile', files[0]);\n                break;\n\n            default:\n                console.assert('File received in wrong state');\n                break;\n        }\n    },\n\n    /**\n     * Perform a state transition, based on the current state and attributes.\n     */\n    _updateState() {\n        const basedir = this.get('basedir');\n        const changeNumber = this.get('changeNumber');\n        const diff = this.get('diffFile');\n        const diffValid = this.get('diffValid');\n        const parentDiff = this.get('parentDiffFile');\n        const repository = this.get('repository');\n        const requiresBasedir = repository.get('requiresBasedir');\n        const requiresChangeNumber = repository.get('requiresChangeNumber');\n        const state = this.get('state');\n\n        switch (state) {\n            case this.State.PROMPT_FOR_DIFF:\n                if (diff) {\n                    if (requiresBasedir && !basedir) {\n                        this.set('state', this.State.PROMPT_FOR_BASEDIR);\n                    } else if (requiresChangeNumber && !changeNumber) {\n                        this.set('state', this.State.PROMPT_FOR_CHANGE_NUMBER);\n                    } else {\n                        this.set('state', this.State.PROCESSING_DIFF);\n                        this._tryValidate();\n                    }\n                }\n                break;\n\n            case this.State.PROMPT_FOR_PARENT_DIFF:\n                if (diff && parentDiff) {\n                    this.set('state', this.State.PROCESSING_DIFF);\n                    this._tryValidate();\n                }\n\n                break;\n\n            case this.State.PROMPT_FOR_BASEDIR:\n                console.assert(\n                    diff, 'cannot be in basedir prompt state without a diff');\n\n                if (basedir) {\n                    if (requiresChangeNumber && !changeNumber) {\n                        /*\n                         * Right now we don't have anything that requires both a\n                         * basedir and a change number, but that might change in\n                         * the future.\n                         */\n                        this.set('state', this.State.PROMPT_FOR_CHANGE_NUMBER);\n                    } else {\n                        this.set('state', this.State.PROCESSING_DIFF);\n                        this._tryValidate();\n                    }\n                }\n                break;\n\n            case this.State.PROMPT_FOR_CHANGE_NUMBER:\n                console.assert(\n                    diff, 'cannot be in changenum prompt state without a diff');\n\n                if (changeNumber) {\n                    this.set('state', this.State.PROCESSING_DIFF);\n                    this._tryValidate();\n                }\n\n                break;\n\n            case this.State.PROCESSING_DIFF:\n                if (diffValid) {\n                    this.set('state', this.State.UPLOADING);\n\n                    if (this.get('reviewRequest') === null) {\n                        this._createReviewRequest();\n                    } else {\n                        this._createDiff();\n                    }\n                }\n                break;\n\n            case this.State.UPLOADING:\n                break;\n\n            case this.State.ERROR:\n                break;\n        }\n    },\n\n    /**\n     * Do a test validation of the selected diff and provided options.\n     *\n     * This starts an asynchronous process. When this process is completed\n     * successfully, the 'diffValid' attribute will be set to true. If the\n     * validation fails, the state will be set to State.ERROR and the 'state'\n     * attribute will be set to HTML with a user-visible error.\n     */\n    _tryValidate() {\n        this.set('diffValid', false);\n\n        const diff = this.get('diffFile');\n        console.assert(diff);\n\n        const parentDiff = this.get('parentDiffFile');\n        const repository = this.get('repository');\n        const uploader = new RB.ValidateDiffModel();\n\n        uploader.set({\n            repository: repository.get('id'),\n            localSitePrefix: repository.get('localSitePrefix'),\n            basedir: this.get('basedir'),\n            diff: diff,\n            parentDiff: parentDiff,\n        });\n\n        uploader.save({\n            success: _.bind(this._onValidateSuccess, this),\n            error: _.bind(this._onValidateError, this),\n        });\n    },\n\n    /**\n     * Callback for when validation succeeds.\n     */\n    _onValidateSuccess() {\n        this.set('diffValid', true);\n    },\n\n    /**\n     * Callback for when validation fails.\n     */\n    _onValidateError(model, xhr) {\n        const rsp = $.parseJSON(xhr.responseText);\n        let newState = this.State.ERROR;\n        let error;\n\n        if (rsp !== null) {\n            switch (rsp.err.code) {\n                case RB.APIErrors.REPO_FILE_NOT_FOUND:\n                    if (this.get('repository').get('scmtoolName') === 'Git' &&\n                        rsp.revision.length !== 40) {\n                        error = gettext('The uploaded diff uses short revisions, but Review Board requires full revisions.<br />Please generate a new diff using the <code>--full-index</code> parameter.');\n                    } else {\n                        error = interpolate(\n                            gettext('The file \"%(file)s\" (revision %(revision)s) was not found in the repository.'),\n                            {\n                                file: rsp.file,\n                                revision: rsp.revision,\n                            },\n                            true);\n\n                        if (this.get('parentDiffFile') === null) {\n                            // Allow the user to try providing a parent diff.\n                            newState = this.State.PROMPT_FOR_PARENT_DIFF;\n                        }\n                    }\n\n                    break;\n\n                case RB.APIErrors.DIFF_PARSE_ERROR:\n                    error = interpolate(\n                        gettext('%(error)s<br />Line %(line)s: %(reason)s'),\n                        {\n                            error: rsp.err.msg,\n                            line: rsp.linenum,\n                            reason: rsp.reason,\n                        },\n                        true);\n                    break;\n\n                default:\n                    error = rsp.err.msg;\n                    break;\n            }\n        } else {\n            error = gettext('Unknown error');\n        }\n\n        if (error) {\n            this.set({\n                state: newState,\n                error: error,\n            });\n        }\n    },\n\n    /**\n     * Actually create the review request.\n     *\n     * This should be all but guaranteed to succeed, since we've already\n     * determined that the supplied parameters ought to work through the\n     * ValidateDiffModel.\n     */\n    _createReviewRequest() {\n        const repository = this.get('repository');\n        const reviewRequest = new RB.ReviewRequest({\n            commitID: this.get('changeNumber'),\n            localSitePrefix: repository.get('localSitePrefix'),\n            repository: repository.get('id'),\n        });\n\n        reviewRequest.save({\n            success: () => {\n                this.set('reviewRequest', reviewRequest);\n                this._createDiff();\n            },\n            error: this._onValidateError.bind(this),\n        });\n    },\n\n    /**\n     * Create the diff.\n     *\n     * This requires that the review request object already exists.\n     */\n    _createDiff() {\n        const reviewRequest = this.get('reviewRequest');\n        const diff = reviewRequest.createDiff();\n\n        diff.set({\n            basedir: this.get('basedir'),\n            diff: this.get('diffFile'),\n            parentDiff: this.get('parentDiffFile'),\n        });\n        diff.url = reviewRequest.get('links').diffs.href;\n        diff.save({\n            success: () => {\n                window.location = reviewRequest.get('reviewURL');\n            },\n            error: this._onValidateError.bind(this),\n        });\n    },\n});\n"]}