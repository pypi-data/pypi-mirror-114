{"version":3,"sources":["relatedUserSelectorViewTests.es6.js"],"names":[],"mappings":"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","file":"relatedUserSelectorViewTests.js","sourcesContent":["suite('rb/admin/views/relatedUserSelectorView', function() {\n    describe('Rendering', function() {\n        it('when empty', function() {\n            let view = new RB.RelatedUserSelectorView({\n                $input: $('<input id=\"id_people\" type=\"hidden\">'),\n                initialOptions: [],\n                useAvatars: true,\n                multivalued: true\n            });\n            expect(view.options.useAvatars).toBe(true);\n            expect(view.options.multivalued).toBe(true);\n            view.render();\n\n            expect(view.$el.find('.related-object-selected li').length)\n                .toBe(0);\n        });\n    });\n\n    describe('Rendering', function() {\n        it('with inital options', function() {\n            let view = new RB.RelatedUserSelectorView({\n                $input: $('<input id=\"id_people\" type=\"hidden\">'),\n                initialOptions: [{\n                    username: 'admin',\n                    fullname: 'Admin User',\n                    id: 1,\n                    avatarHTML: {\n                        '20': '<div class=\"avatar\" alt=\"Admin User\"></div>',\n                    },\n                }, {\n                    username: 'doc',\n                    fullname: \"Doc Dwarf\",\n                    id: 2,\n                    avatarHTML: {\n                        '20': '<div class=\"avatar\" alt=\"Doc Dwarf\"></div>',\n                    },\n                }, {\n                    username: 'dopey',\n                    fullname: 'Dopey Dwarf',\n                    id: 3,\n                    avatarHTML: {\n                        '20': '<div class=\"avatar\" alt=\"Dopey Dwarf\"></div>',\n                    },\n                }],\n                useAvatars: true,\n                multivalued: true,\n            });\n            view.render();\n            expect(view.options.useAvatars).toBe(true);\n            expect(view.options.multivalued).toBe(true);\n\n            expect(view.$el.find('.related-object-selected li').length)\n                .toBe(3);\n            expect(view.$el.siblings('#id_people').val()).toBe('');\n            /* The input element value should be empty, since the widget will\n               not fill in the values from the objects if the objects are\n               passed through initialOptions. */\n            expect(view._selectedIDs.size).toBe(3);\n        });\n    });\n\n    describe('Select item', function() {\n        let view;\n\n        beforeEach(function(done) {\n            $testsScratch.append('<input id=\"id_people\" type=\"hidden\">');\n            view = new RB.RelatedUserSelectorView({\n                $input: $('#id_people'),\n                initialOptions: [],\n                useAvatars: true,\n                multivalued: true\n            });\n            view.render();\n\n            /* These are the fake users, that will be displayed in the\n               dropdown */\n            spyOn(view, 'loadOptions').and.callFake(function(query, callback) {\n                callback([{\n                    avatarHTML: {\n                        '20': '<div class=\"avatar\" alt=\"Admin User\"></div>',\n                    },\n                    fullname: 'Admin User',\n                    id: 1,\n                    username: 'admin',\n                }, {\n                    avatarHTML: {\n                        '20': '<div class=\"avatar\" alt=\"Doc Dwarf\"></div>',\n                    },\n                    fullname: 'Doc Dwarf',\n                    id: 2,\n                    username: 'doc',\n                }]);\n            });\n\n            $('select')[0].selectize.focus();\n            /* The focus() method is being called asynchronously, so it\n              doesn't actually call the loadOptions() method here\n              instantly. That's why I use setTimeout to wait for it to\n              finish. */\n            setTimeout(function() {\n                $testsScratch.find('div .selectize-input.items.not-full input').click();\n                done();\n            }, 4000);\n            /* I probably shouldn't be doing this, but I\n            don't know how else to get it to work. */\n        });\n\n        it('from dropdown', function(done) {\n            expect(view.loadOptions).toHaveBeenCalled();\n            $(\"div[data-value='admin']\").click();\n            $(\"div[data-value='doc']\").click();\n            expect(view.$el.siblings('#id_people').val()).toBe('1,2');\n            done();\n        });\n    });\n\n\n});"]}