{"version":3,"sources":["diffFileModel.es6.js"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA,GAAG,QAAH,GAAc,SAAS,KAAT,CAAe,MAAf,CAAsB;AAChC,cAAU;AACN,wBAAgB,IADV;AAEN,gBAAQ,KAFF;AAGN,uBAAe,IAHT;AAIN,iBAAS,KAJH;AAKN,uBAAe,IALT;AAMN,sBAAc,IANR;AAON,sBAAc,IAPR;AAQN,kBAAU,IARJ;AASN,eAAO,IATD;AAUN,uBAAe,IAVT;AAWN,iBAAS,KAXH;AAYN,wBAAgB,IAZV;AAaN,gCAAwB;AAblB,KADsB;;AAiBhC;;;;;;;;;;;AAWA,SA5BgC,iBA4B1B,GA5B0B,EA4BrB;AACP,eAAO;AACH,oBAAQ,IAAI,MADT;AAEH,4BAAgB,IAAI,gBAFjB;AAGH,2BAAe,IAAI,cAHhB;AAIH,qBAAS,IAAI,OAJV;AAKH,2BAAe,IAAI,cALhB;AAMH,0BAAc,IAAI,aANf;AAOH,0BAAc,IAAI,aAPf;AAQH,sBAAU,IAAI,QARX;AASH,gBAAI,IAAI,EATL;AAUH,mBAAO,IAAI,KAVR;AAWH,2BAAe,IAAI,aAXhB;AAYH,qBAAS,IAAI,OAZV;AAaH,sBAAU,IAAI,QAbX;AAcH,4BAAgB,IAAI,eAdjB;AAeH,oCAAwB,IAAI;AAfzB,SAAP;AAiBH;AA9C+B,CAAtB,CAAd","file":"diffFileModel.js","sourcesContent":["/**\n * A model for a single file in a diff.\n *\n * Model Attributes:\n *     baseFileDiffID (number):\n *         An optional primary key of a :py:class:`~reviewboard.diffviewer.\n *         models.filediff.FileDiff` for generating a diff spanning multiple\n *         commits.\n *\n *     binary (boolean):\n *         Whether or not this is a binary file.\n *\n *     commentCounts (Array of number):\n *         The counts of each comment type.\n *\n *     deleted (boolean):\n *         Whether or not the file was deleted.\n *\n *     depotFilename (string):\n *         The file's path in the repository.\n *\n *     destFilename (string):\n *         The destination file path. This will differ from ``depotFilename``\n *         in the case of a move or rename.\n *\n *     filediff (object):\n *         A serailized :py:class:`~reviewboard.diffviewer.models.filediff.\n *         FileDiff` representing this file.\n *\n *     index (number):\n *         The file's index in the diff.\n *\n *     interfilediff (object):\n *         An optional serialized :py:class:`~reviewboard.diffviewer.models.\n *         filediff.FileDiff` for interidffing.\n *\n *     newfile (boolean):\n *         Whether or not the file is newly created.\n *\n *     revision (number):\n *         The base revision of the file.\n */\nRB.DiffFile = Backbone.Model.extend({\n    defaults: {\n        baseFileDiffID: null,\n        binary: false,\n        commentCounts: null,\n        deleted: false,\n        depotFilename: null,\n        destFilename: null,\n        destRevision: null,\n        filediff: null,\n        index: null,\n        interfilediff: null,\n        newfile: false,\n        forceInterdiff: null,\n        forceInterdiffRevision: null,\n    },\n\n    /**\n     * Parse the response into model attributes.\n     *\n     * Args:\n     *     rsp (object):\n     *         The response from the server.\n     *\n     * Returns:\n     *     object:\n     *     The model attributes.\n     */\n    parse(rsp) {\n        return {\n            binary: rsp.binary,\n            baseFileDiffID: rsp.base_filediff_id,\n            commentCounts: rsp.comment_counts,\n            deleted: rsp.deleted,\n            depotFilename: rsp.depot_filename,\n            destFilename: rsp.dest_filename,\n            destRevision: rsp.dest_revision,\n            filediff: rsp.filediff,\n            id: rsp.id,\n            index: rsp.index,\n            interfilediff: rsp.interfilediff,\n            newfile: rsp.newfile,\n            revision: rsp.revision,\n            forceInterdiff: rsp.force_interdiff,\n            forceInterdiffRevision: rsp.interdiff_revision,\n        };\n    },\n});\n"]}