{"version":3,"sources":["userSessionModel.es6.js"],"names":[],"mappings":"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","file":"userSessionModel.js","sourcesContent":["(function() {\n\n\n/**\n * An item in a StoredItems list.\n *\n * These are used internally to proxy object registration into a store list.\n * It is meant to be a temporary, internal object that can be created with\n * the proper data and then immediately saved or deleted.\n *\n * Model Attributes:\n *     baseURL (string):\n *         The root of the URL for the resource list.\n *\n *     loaded (boolean):\n *         Whether the item is loaded from the server.\n *\n *     objectID (string):\n *         The ID of the item.\n *\n *     stored (boolean):\n *         Whether or not the item has been stored on the server.\n */\nconst Item = RB.BaseResource.extend({\n    /**\n     * Return defaults for the model attributes.\n     *\n     * Returns:\n     *     object:\n     *     Default values for the attributes.\n     */\n    defaults() {\n        return _.defaults({\n            baseURL: null,\n            loaded: true,\n            objectID: null,\n            stored: false,\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    /**\n     * Return the URL for the item resource.\n     *\n     * Returns:\n     *     string:\n     *     The URL to use for updating the item.\n     */\n    url() {\n        let url = this.get('baseURL');\n\n        if (this.get('stored')) {\n            url += this.get('objectID') + '/';\n        }\n\n        return url;\n    },\n\n    /**\n     * Return whether the item is new (not yet stored on the server).\n     *\n     * Returns:\n     *     boolean:\n     *     Whether the item is new.\n     */\n    isNew() {\n        return !this.get('stored');\n    },\n\n    /**\n     * Return a JSON-serializable representation of the item.\n     *\n     * Returns:\n     *    object:\n     *    A representation of the item suitable for serializing to JSON.\n     */\n    toJSON() {\n        return {\n            object_id: this.get('objectID') || undefined,\n        };\n    },\n\n    /**\n     * Parse the response from the server.\n     */\n    parse(/* rsp */) {\n    },\n});\n\n\n/**\n * Manages a list of stored objects.\n *\n * This interfaces with a Watched Items resource (for groups or review\n * requests) and a Hidden Items resource, allowing immediate adding/removing\n * of objects.\n *\n * Model Attributes:\n *     addError (string):\n *         The error string to use when adding an item fails.\n *\n *     removeError (string):\n *         The error string to use when removing an item fails.\n */\nconst StoredItems = RB.BaseResource.extend({\n    /**\n     * Return the defaults for the model attributes.\n     *\n     * Returns:\n     *     object:\n     *     The default values for the model attributes.\n     */\n    defaults() {\n        return _.defaults({\n            addError: '',\n            removeError: '',\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    /**\n     * Return the URL for the resource.\n     *\n     * Returns:\n     *     string:\n     *     The URL for the resource.\n     */\n    url() {\n        return this.get('url');\n    },\n\n    /**\n     * Immediately add an object to a stored list on the server.\n     *\n     * Args:\n     *     obj (Item):\n     *         The item to add.\n     *\n     *     options (object, optional):\n     *         Options for the save operation.\n     *\n     *     context (object, optional):\n     *         Context to use when calling the callbacks in ``options``.\n     */\n    addImmediately(obj, options={}, context=null) {\n        const url = this.url();\n\n        if (url) {\n            const item = new Item({\n                objectID: obj.id,\n                baseURL: url,\n            });\n\n            item.save(options, context);\n        } else if (_.isFunction(options.error)) {\n            options.error.call({\n                errorText: this.addError,\n            });\n        }\n    },\n\n    /**\n     * Immediately remove an object from a stored list on the server.\n     *\n     * Args:\n     *     obj (Item):\n     *         The item to remove.\n     *\n     *     options (object, optional):\n     *         Options for the save operation.\n     *\n     *     context (object, optional):\n     *         Context to use when calling the callbacks in ``options``.\n     */\n    removeImmediately(obj, options={}, context=null) {\n        const url = this.url();\n\n        if (url) {\n            const item = new Item({\n                objectID: obj.id,\n                baseURL: url,\n                stored: true,\n            });\n\n            item.destroy(options, context);\n        } else if (_.isFunction(options.error)) {\n            options.error.call({\n                errorText: this.removeError,\n            });\n        }\n    },\n});\n\n\n/**\n * Manages the user's active session.\n *\n * This stores basic information on the user (the username and session API URL)\n * and utility objects such as the watched groups, watched review requests and\n * hidden review requests lists.\n *\n * There should only ever be one instance of a UserSession. It should always\n * be created through UserSession.create, and retrieved through\n * UserSession.instance.\n *\n * Model Attributes:\n *     archivedReviewRequestsURL (string):\n *         The URL for the archived review requests API resource.\n *\n *     authenticated (boolean):\n *         Whether the user is currently authenticated.\n *\n *     diffsShowExtraWhitespace (boolean):\n *         Whether the user wants to see diffs with excess whitespace\n *         highlighted.\n *\n *     fullName (string):\n *         The user's full name.\n *\n *     loginURL (string):\n *         The URL to the login page (if the user is anonymous).\n *\n *     mutedReviewRequestsURL (string):\n *         The URL for the archived review requests API resource.\n *\n *     readOnly (boolean):\n *         Whether the user is operating in read-only mode.\n *\n *     sessionURL (string):\n *         The URL to the session API resource.\n *\n *     timezoneOffset (string):\n *         The user's offset from UTC. This will be in the format that would\n *         attach to an ISO8601-style date, such as \"-0800\" for PST.\n *\n *     userFileAttachmentsURL (string):\n *         The URL for the user file attachments API resource.\n *\n *     userPageURL (string):\n *         The URL for the user's profile page.\n *\n *     username: (string):\n *         The user's username.\n *\n *     watchedReviewGroupsURL (string):\n *         The URL for the watched review groups API resource.\n *\n *     watchedReviewRequestsURL (string):\n *         The URL for the watched review requests API resource.\n */\nRB.UserSession = Backbone.Model.extend({\n    defaults: {\n        archivedReviewRequestsURL: null,\n        authenticated: false,\n        diffsShowExtraWhitespace: false,\n        fullName: null,\n        loginURL: null,\n        mutedReviewRequestsURL: null,\n        readOnly: false,\n        sessionURL: null,\n        timezoneOffset: '0',\n        userFileAttachmentsURL: null,\n        userPageURL: null,\n        username: null,\n        watchedReviewGroupsURL: null,\n        watchedReviewRequestsURL: null,\n    },\n\n    /**\n     * Initialize the model.\n     */\n    initialize() {\n        this.watchedGroups = new StoredItems({\n            url: this.get('watchedReviewGroupsURL'),\n            addError: gettext('Must log in to add a watched item.'),\n            removeError: gettext('Must log in to remove a watched item.'),\n        });\n\n        this.watchedReviewRequests = new StoredItems({\n            url: this.get('watchedReviewRequestsURL'),\n            addError: gettext('Must log in to add a watched item.'),\n            removeError: gettext('Must log in to remove a watched item.'),\n        });\n\n        this.archivedReviewRequests = new StoredItems({\n            url: this.get('archivedReviewRequestsURL'),\n            removeError: gettext('Must log in to remove a archived item.'),\n            addError: gettext('Must log in to add an archived item.'),\n        });\n\n        this.mutedReviewRequests = new StoredItems({\n            url: this.get('mutedReviewRequestsURL'),\n            removeError: gettext('Must log in to remove a muted item.'),\n            addError: gettext('Must log in to add a muted item.'),\n        });\n\n        this._bindCookie({\n            attr: 'diffsShowExtraWhitespace',\n            cookieName: 'show_ew',\n            deserialize: value => (value !== 'false'),\n        });\n    },\n\n    /**\n     * Toggle a boolean attribute.\n     *\n     * The attribute will be the inverse of the prior value.\n     *\n     * Args:\n     *     attr (string):\n     *         The name of the attribute to toggle.\n     */\n    toggleAttr(attr) {\n        this.set(attr, !this.get(attr));\n    },\n\n    /*\n     * Return avatar HTML for the user with the given size.\n     *\n     * Version Added:\n     *     3.0.19\n     *\n     * Args:\n     *     size (Number):\n     *         The size of the avatar, in pixels. This is both the width and\n     *         height.\n     *\n     * Return:\n     *     string:\n     *     The HTML for the avatar.\n     */\n    getAvatarHTML: function(size) {\n        var urls = this.get('avatarHTML') || {};\n        return urls[size] || '';\n    },\n\n    /**\n     * Return avatar URLs for the user with the given size.\n     *\n     * Deprecated:\n     *     3.0.19:\n     *     :js:meth:`getAvatarHTML` should be used instead.\n     *\n     * Args:\n     *     size (number):\n     *         The size of the avatar, in pixels. This is both the width and\n     *         height.\n     *\n     * Return:\n     *     object:\n     *     An object containing avatar URLs, if the requested avatar size is\n     *     available. This object will contain the following keys:\n     *\n     *     * ``1x``: The url for the avatar.\n     *     * ``2x``: The high-DPI URL for the avatar.\n     *\n     *     If the requested avatar size is unavailable, this function returns\n     *     an empty object.\n     */\n    getAvatarURLs(size) {\n        const urls = this.get('avatarURLs') || {};\n        return urls[size] || {};\n    },\n\n    /**\n     * Bind a cookie to an attribute.\n     *\n     * The initial value of the attribute will be set to that of the cookie.\n     *\n     * When the attribute changes, the cookie will be updated.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the bind.\n     *\n     * Option Args:\n     *    attr (string):\n     *        The name of the attribute to bind.\n     *\n     *    cookieName (string):\n     *        The name of the cookie to store.\n     *\n     *    deserialize (function, optional):\n     *        A deserialization function to use when fetching the attribute\n     *        value.\n     *\n     *    serialize (function, optional):\n     *        A serialization function to use when storing the attribute value.\n     */\n    _bindCookie(options) {\n        const deserialize = options.deserialize || _.identity;\n        const serialize = (options.serialize ||\n                           (value => value.toString()));\n\n        this.set(options.attr, deserialize($.cookie(options.cookieName)));\n\n        this.on(`change:${options.attr}`, (model, value) => {\n            $.cookie(options.cookieName, serialize(value), {\n                path: SITE_ROOT,\n            });\n        });\n    },\n}, {\n    instance: null,\n\n    ARCHIVED: 'A',\n    MUTED: 'M',\n\n    /**\n     * Create the UserSession for the current user.\n     *\n     * Only one will ever exist. Calling this a second time will assert.\n     *\n     * Args:\n     *     options (object):\n     *         Options to pass into the UserSession initializer.\n     *\n     * Returns:\n     *     RB.UserSession:\n     *     The user session instance.\n     */\n    create(options) {\n        console.assert(!RB.UserSession.instance,\n                       'UserSession.create can only be called once.');\n\n        RB.UserSession.instance = new RB.UserSession(options);\n        return RB.UserSession.instance;\n    },\n});\n\n\n})();\n"]}