{"version":3,"sources":["baseCommentReplyModelTests.es6.js"],"names":[],"mappings":"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","file":"baseCommentReplyModelTests.js","sourcesContent":["suite('rb/resources/models/BaseCommentReply', function() {\n    let parentObject;\n    let model;\n\n    beforeEach(function() {\n        parentObject = new RB.BaseResource({\n            'public': true,\n        });\n\n        model = new RB.BaseCommentReply({\n            parentObject: parentObject,\n        });\n\n        expect(model.validate(model.attributes)).toBe(undefined);\n    });\n\n    describe('destroyIfEmpty', function() {\n        beforeEach(function() {\n            spyOn(model, 'destroy');\n        });\n\n        it('Destroying when text is empty', function() {\n            model.set('text', '');\n            model.destroyIfEmpty();\n            expect(model.destroy).toHaveBeenCalled();\n        });\n\n        it('Not destroying when text is not empty', function() {\n            model.set('text', 'foo');\n            model.destroyIfEmpty();\n            expect(model.destroy).not.toHaveBeenCalled();\n        });\n    });\n\n    describe('parse', function() {\n        beforeEach(function() {\n            model.rspNamespace = 'my_comment';\n        });\n\n        it('API payloads', function() {\n            const data = model.parse({\n                stat: 'ok',\n                my_comment: {\n                    id: 42,\n                    text: 'foo',\n                    text_type: 'markdown',\n                },\n            });\n\n            expect(data).not.toBe(undefined);\n            expect(data.id).toBe(42);\n            expect(data.text).toBe('foo');\n            expect(data.richText).toBe(true);\n        });\n    });\n\n    describe('toJSON', function() {\n        describe('force_text_type field', function() {\n            it('With value', function() {\n                model.set('forceTextType', 'html');\n                const data = model.toJSON();\n                expect(data.force_text_type).toBe('html');\n            });\n\n            it('Without value', function() {\n                const data = model.toJSON();\n\n                expect(data.force_text_type).toBe(undefined);\n            });\n        });\n\n        describe('include_text_types field', function() {\n            it('With value', function() {\n                model.set('includeTextTypes', 'html');\n                const data = model.toJSON();\n                expect(data.include_text_types).toBe('html');\n            });\n\n            it('Without value', function() {\n                const data = model.toJSON();\n                expect(data.include_text_types).toBe(undefined);\n            });\n        });\n\n        describe('reply_to_id field', function() {\n            it('When loaded', function() {\n                model.set({\n                    replyToID: 10,\n                    loaded: true,\n                });\n                const data = model.toJSON();\n                expect(data.reply_to_id).toBe(undefined);\n            });\n\n            it('When not loaded', function() {\n                model.set({\n                    replyToID: 10,\n                    loaded: false,\n                });\n                const data = model.toJSON();\n                expect(data.reply_to_id).toBe(10);\n            });\n        });\n\n        describe('richText field', function() {\n            it('With true', function() {\n                model.set('richText', true);\n                const data = model.toJSON();\n                expect(data.text_type).toBe('markdown');\n            });\n\n            it('With false', function() {\n                model.set('richText', false);\n                const data = model.toJSON();\n                expect(data.text_type).toBe('plain');\n            });\n        });\n\n        describe('text field', function() {\n            it('With value', function() {\n                model.set('text', 'foo');\n                const data = model.toJSON();\n                expect(data.text).toBe('foo');\n            });\n        });\n    });\n\n    describe('validate', function() {\n        describe('parentObject', function() {\n            it('With value', function() {\n                expect(model.validate({\n                    parentObject: parentObject,\n                })).toBe(undefined);\n            });\n\n            it('Unset', function() {\n                expect(model.validate({\n                    parentObject: null,\n                })).toBe(RB.BaseResource.strings.UNSET_PARENT_OBJECT);\n            });\n        });\n    });\n});\n"]}