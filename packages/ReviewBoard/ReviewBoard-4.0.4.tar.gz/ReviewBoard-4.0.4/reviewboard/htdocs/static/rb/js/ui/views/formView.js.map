{"version":3,"sources":["formView.es6.js"],"names":[],"mappings":"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","file":"formView.js","sourcesContent":["/**\n * A view for managing state on a form.\n *\n * This provides some standard behavior for setting up form widgets and\n * handling collapsable fieldsets, along with managing subforms.\n */\nRB.FormView = Backbone.View.extend({\n    events: {\n        'click .rb-c-form-fieldset__toggle': '_onToggleFieldSetClicked',\n    },\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        this._$subforms = null;\n        this._subformsByGroup = {};\n        this._formWidgetsInitialized = false;\n    },\n\n    /**\n     * Render the view.\n     *\n     * This will set up any subforms that might be available within the form.\n     *\n     * Returns:\n     *     RB.FormView:\n     *     This object, for chaining.\n     */\n    render() {\n        this._$subforms = this.$('.rb-c-form-fieldset.-is-subform');\n\n        if (this._$subforms.length > 0) {\n            this._setupSubforms();\n        }\n\n        this.setupFormWidgets();\n\n        return this;\n    },\n\n    /**\n     * Set up state for widgets on the form.\n     *\n     * This will ensure that widgets are set up correctly on the form, or on\n     * a part of the form. This will take care to re-initialize widgets if\n     * they've already been initialized before (useful when dynamically adding\n     * new sections of a form).\n     *\n     * This supports only a few known types of widgets (Django date/time\n     * widgets and related object selectors).\n     *\n     * Args:\n     *     $el (jQuery, optional):\n     *         A starting point for finding the widgets. If not provided, all\n     *         widgets in the form will be set up.\n     */\n    setupFormWidgets($el) {\n        if ($el === undefined) {\n            $el = this.$el;\n        }\n\n        /*\n         * Update some state for Django widgets. We've quite possibly made use\n         * of widgets in the form that need to be initialized, and Django\n         * doesn't have much fine-grained support for doing this, so we need\n         * to take a heavy-handed approach.\n         *\n         * Django (up through 3.0 at least) performs similar logic.\n         */\n        if (window.DateTimeShortcuts &&\n            $el.find('.datetimeshortcuts').length > 0) {\n            if (this._formWidgetsInitialized) {\n                /*\n                 * Yep, we have to remove *all* of these... DateTimeShortcuts\n                 * has no granular widget support.\n                 */\n                $('.datetimeshortcuts').remove();\n            }\n\n            DateTimeShortcuts.init();\n        }\n\n        if (window.SelectFilter) {\n            $el.find('.selectfilter').each((i, el) => {\n                const parts = el.name.split('-');\n                SelectFilter.init(el.id, parts[parts.length - 1], false);\n            });\n\n            $el.find('.selectfilterstacked').each((i, el) => {\n                const parts = el.name.split('-');\n                SelectFilter.init(el.id, parts[parts.length - 1], true);\n            });\n        }\n\n        this._formWidgetsInitialized = true;\n    },\n\n    /**\n     * Set the visibility of one or more subforms.\n     *\n     * This will toggle visibility of a single subform, hide all subforms,\n     * or hide all subforms except one.\n     *\n     * Args:\n     *     options (object):\n     *         Options to control visibility.\n     *\n     * Option Args:\n     *     group (string):\n     *         The registered group for the subforms.\n     *\n     *     hideOthers (boolean):\n     *         Whether to hide any subforms other than the one specified by\n     *         ``subformID``.\n     *\n     *     subformID (string):\n     *         A single subform to set the visibility state for. If not\n     *         provided, this will toggle visibility of all subforms in the\n     *         group.\n     *\n     *     visible (boolean):\n     *         Whether to make the selected subform visible. This is only used\n     *         if ``hideOthers`` is not provided.\n     */\n    setSubformVisibility(options) {\n        console.assert(_.isObject(options),\n                       'An options object must be provided.');\n\n        const group = options.group;\n        const subformID = options.subformID;\n        const visible = options.visible;\n\n        console.assert(group, 'Missing option \"group\"');\n\n        const subformIDs = this._subformsByGroup[group];\n        console.assert(subformIDs, `Invalid subform group ${group}`);\n\n        if (options.hideOthers || !subformID) {\n            _.each(subformIDs, ($subform, id) => {\n                const isHidden = (subformID === undefined\n                                  ? !visible\n                                  : (id !== subformID));\n\n                $subform.prop({\n                    disabled: isHidden,\n                    hidden: isHidden,\n                });\n            });\n        } else {\n            console.assert(visible !== undefined, 'Missing option \"visible\"');\n\n            const $subform = subformIDs[subformID];\n            console.assert($subform, `Invalid subform ID ${subformID}`);\n\n            $subform.prop({\n                disabled: !visible,\n                hidden: !visible,\n            });\n        }\n    },\n\n    /**\n     * Set up state and event handlers for subforms.\n     *\n     * This will begin tracking all the subforms on the page, and connect\n     * subform visibility to any associated controllers.\n     */\n    _setupSubforms() {\n        const configuredControllers = {};\n\n        this._$subforms.each((i, subformEl) => {\n            const $subform = $(subformEl);\n            const controllerID = $subform.data('subform-controller');\n            const subformID = $subform.data('subform-id');\n            let group = $subform.data('subform-group');\n            let $controller;\n\n            if (!subformID) {\n                console.error('Subform %o is missing data-subform-id=',\n                              subformEl);\n                return;\n            }\n\n            if (!group && !controllerID) {\n                console.error(\n                    'Subform %o is missing either data-subform-group= ' +\n                    'or data-subform-controller=',\n                    subformEl);\n                return;\n            }\n\n            /*\n             * If we have a controller ID provided, look it up and ensure\n             * we're using the right group.\n             */\n            if (controllerID) {\n                $controller = this.$(`#${controllerID}`);\n\n                console.assert($controller.length === 1,\n                               `Missing controller #${controllerID}`);\n\n                const controllerGroup =\n                    $controller.data('subform-group');\n\n                /*\n                 * If the subform specifies an explicit group, and it\n                 * specified a controller, make sure they match up. While\n                 * we could work around an issue here, we'd rather make the\n                 * developer fix their code.\n                 */\n                if (group === undefined) {\n                    group = controllerGroup;\n                } else if (controllerGroup !== group) {\n                    console.error('Subform %o and controller %s have ' +\n                                  'different values for data-subform-group',\n                                  subformEl, controllerID);\n                    return;\n                }\n            }\n\n            /* Register the subforms so that they can be looked up later. */\n            if (!this._subformsByGroup.hasOwnProperty(group)) {\n                this._subformsByGroup[group] = {};\n            }\n\n            this._subformsByGroup[group][subformID] = $subform;\n\n            /*\n             * If we have a controller associated, set the current subform's\n             * visibility based on that value, and listen for changes.\n             */\n            if ($controller) {\n                this.setSubformVisibility({\n                    group: group,\n                    subformID: subformID,\n                    visible: $controller.val() === subformID,\n                });\n\n                if (!configuredControllers[controllerID]) {\n                    configuredControllers[controllerID] = true;\n\n                    $controller.on('change', () => this.setSubformVisibility({\n                        group: group,\n                        subformID: $controller.val(),\n                        visible: true,\n                        hideOthers: true,\n                    }));\n                }\n            }\n        });\n    },\n\n    /**\n     * Handle the showing or collapsing of a fieldset.\n     *\n     * This will set the appropriate state on the fieldset to show or hide\n     * the content.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The click event on the Show/Hide button.\n     */\n    _onToggleFieldSetClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const $toggle = $(e.target);\n        const $fieldset = $toggle.closest('.rb-c-form-fieldset');\n\n        if ($fieldset.hasClass('-is-collapsed')) {\n            $fieldset.removeClass('-is-collapsed');\n            $toggle.text(gettext('(Hide)'));\n        } else {\n            $fieldset.addClass('-is-collapsed');\n            $toggle.text(gettext('(Show)'));\n        }\n    },\n});\n"]}