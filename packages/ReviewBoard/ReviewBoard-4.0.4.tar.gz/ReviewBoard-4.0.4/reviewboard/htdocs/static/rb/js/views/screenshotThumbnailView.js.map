{"version":3,"sources":["screenshotThumbnailView.es6.js"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;AAkBA,GAAG,mBAAH,GAAyB,SAAS,IAAT,CAAc,MAAd,CAAqB;AAC1C,YAAQ;AACJ,0BAAkB;AADd,KADkC;;AAK1C;;;;;;;;;;AAUA,UAf0C,oBAejC;AAAA;;AACL,aAAK,QAAL,CAAc,KAAK,KAAnB,EAA0B,SAA1B,EAAqC,YAAM;AACvC,kBAAK,GAAL,CAAS,OAAT,CAAiB;AAAA,uBAAM,MAAK,MAAL,EAAN;AAAA,aAAjB;AACH,SAFD;;AAIA,aAAK,QAAL,GAAgB,KAAK,GAAL,CAAS,IAAT,CAAc,QAAd,EACX,YADW,CACE;AACV,2BAAe,sBADL;AAEV,yBAAa;AAFH,SADF,EAKX,EALW,CAKR;AACA,yBAAa;AAAA,uBAAM,MAAK,OAAL,CAAa,WAAb,CAAN;AAAA,aADb;AAEA,sBAAU;AAAA,uBAAM,MAAK,OAAL,CAAa,SAAb,CAAN;AAAA,aAFV;AAGA,wBAAY,kBAAC,CAAD,EAAI,KAAJ,EAAc;AACtB;;;;AAIA,sBAAK,KAAL,CAAW,KAAX,CAAiB;AACb,2BAAO,iBAAM;AACT,8BAAK,KAAL,CAAW,GAAX,CAAe,SAAf,EAA0B,KAA1B;AACA,8BAAK,OAAL,CAAa,SAAb;AACA,8BAAK,KAAL,CAAW,IAAX;AACH;AALY,iBAAjB;AAOH;AAfD,SALQ,CAAhB;;AAuBA,eAAO,IAAP;AACH,KA5CyC;;;AA8C1C;;;;;;;;;AASA,oBAvD0C,4BAuDzB,CAvDyB,EAuDtB;AAChB,UAAE,cAAF;AACA,UAAE,eAAF;;AAEA,aAAK,KAAL,CAAW,OAAX;AACH;AA5DyC,CAArB,CAAzB","file":"screenshotThumbnailView.js","sourcesContent":["/**\n * Displays a thumbnail for a screenshot.\n *\n * Screenshot thumbnails allow the caption to be edited and the screenshot\n * to be deleted.\n *\n * This expects to take an existing element for the thumbnail contents, and\n * will attach handlers for interaction.\n *\n * The following signals are provided, on top of the standard Backbone.View\n * signals:\n *\n *     * beginEdit\n *       - Editing of the screenshot (caption) has begun.\n *\n *     * endEdit\n *       - Editing of the screenshot (caption) has finished.\n */\nRB.ScreenshotThumbnail = Backbone.View.extend({\n    events: {\n        'click a.delete': '_onDeleteClicked',\n    },\n\n    /**\n     * Render the thumbnail.\n     *\n     * This will listen for events on the screenshot and for events on the\n     * thumbnail itself (to allow for caption editing).\n     *\n     * Returns:\n     *     RB.ScreenshotThumbnail:\n     *     This object, for chaining.\n     */\n    render() {\n        this.listenTo(this.model, 'destroy', () => {\n            this.$el.fadeOut(() => this.remove());\n        });\n\n        this.$caption = this.$el.find('a.edit')\n            .inlineEditor({\n                editIconClass: 'rb-icon rb-icon-edit',\n                showButtons: false,\n            })\n            .on({\n                'beginEdit': () => this.trigger('beginEdit'),\n                'cancel': () => this.trigger('endEdit'),\n                'complete': (e, value) => {\n                    /*\n                     * We want to set the caption after ready() finishes,\n                     * it case it loads state and overwrites.\n                     */\n                    this.model.ready({\n                        ready: () => {\n                            this.model.set('caption', value);\n                            this.trigger('endEdit');\n                            this.model.save();\n                        }\n                    });\n                }\n            });\n\n        return this;\n    },\n\n    /**\n     * Delete the screenshot.\n     *\n     * Once the screenshot has been deleted, the view will be removed.\n     *\n     * Args:\n     *     e (Event):\n     *         The event that triggered the delete.\n     */\n    _onDeleteClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.model.destroy();\n    },\n});\n"]}