{"version":3,"sources":["dashboardPageView.es6.js"],"names":[],"mappings":"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","file":"dashboardPageView.js","sourcesContent":["/**\n * The administration UI's main dashboard page.\n *\n * This displays all the widgets rendered on the dashboard, allowing users to\n * see important details about their install from one place.\n */\nRB.Admin.DashboardPageView = RB.Admin.PageView.extend({\n    events: {\n        'click .js-action-remove-widget': '_onRemoveWidgetClicked',\n    },\n\n    /**\n     * Initialize the page.\n     */\n    initialize() {\n        RB.Admin.PageView.prototype.initialize.apply(this, arguments);\n\n        this._widgetViews = {};\n        this._widgetWidths = {};\n        this._orderedWidgets = [];\n        this._$dashboardView = null;\n        this._$widgetsContainer = null;\n        this._$widgetsMain = null;\n        this._$widgets = null;\n        this._masonry = null;\n    },\n\n    /**\n     * Render the page.\n     *\n     * This will set up the support banner and the dashboard widgets.\n     */\n    renderPage() {\n        RB.Admin.PageView.prototype.renderPage.call(this);\n\n        /* Set up the main dashboard widgets area. */\n        this._$dashboardView = this.$('#admin-dashboard');\n        this._$widgetsContainer = this._$dashboardView.find(\n            '.rb-c-admin-widgets');\n        this._$widgetsMain = this._$widgetsContainer.children(\n            '.rb-c-admin-widgets__main');\n        this._$widgets = this._$widgetsMain.children('.rb-c-admin-widget');\n\n        const $sizerGutter = this._$widgetsContainer.children(\n            '.rb-c-admin-widgets__sizer-gutter');\n        const $sizerColumn = this._$widgetsContainer.children(\n            '.rb-c-admin-widgets__sizer-column');\n\n        this._masonry = new Masonry(this._$widgetsMain[0], {\n            columnWidth: $sizerColumn[0],\n            gutter: $sizerGutter[0],\n            transitionDuration: 0,\n            initLayout: false,\n        });\n\n        /* Show a banner detailing the support coverage for the server. */\n        const supportData = this.model.get('supportData');\n\n        if (supportData) {\n            const supportBanner = new RB.SupportBannerView({\n                el: $('#support-banner'),\n                supportData: this.model.get('supportData'),\n            });\n            supportBanner.render();\n        }\n\n        this._loadWidgets();\n\n        this._masonry.on('layoutComplete', this._onLayoutComplete.bind(this));\n\n        /* Now that everything is in place, show the dashboard. */\n        this._$dashboardView.css('visibility', 'visible');\n    },\n\n    /**\n     * Load all widgets for the view.\n     *\n     * The widgets will be loaded based on the data passed to the model,\n     * and will then be added to Masonry in order of largest to smallest\n     * widget.\n     */\n    _loadWidgets() {\n        const sortableWidgets = [];\n        let index = 0;\n\n        /* Render all the widgets. */\n        this.model.loadWidgets(widgetOptions => {\n            const widgetModel = widgetOptions.widgetModel;\n            const widgetView = new widgetOptions.ViewType(_.defaults(\n                {\n                    el: $(`#${widgetOptions.domID}`),\n                    model: widgetModel,\n                },\n                widgetOptions.viewOptions));\n\n            widgetView.$el.addClass('js-masonry-item');\n            widgetView.render();\n\n            this.listenTo(widgetView, 'sizeChanged',\n                          () => this._onWidgetSizeChanged(widgetModel.id,\n                                                          widgetView.$el));\n\n            const widgetEl = widgetView.el;\n            const width = widgetEl.offsetWidth;\n\n            this._widgetViews[widgetModel.id] = widgetView;\n            this._widgetWidths[widgetModel.id] = width;\n            sortableWidgets.push({\n                el: widgetEl,\n                index: index,\n                isFullWidth: widgetView.$el.hasClass('-is-full-size'),\n                width: width,\n            });\n        });\n\n        /*\n         * Force a specific sort order for the widgets to ensure the most\n         * compact layout, ideally keeping everything on screen.\n         *\n         * We require a stable order (widgets of the same size should be in a\n         * predictable order), and we have to account for full-width widgets,\n         * so our comparator is a little bit more complex. We use the\n         * following rules:\n         *\n         * 1) Full-size widgets are positioned at the top.\n         * 2) Column-based widgets are then ordered from largest to smallest.\n         * 3) Any widgets of the same size are sorted according to their\n         *    registration index.\n         */\n        sortableWidgets.sort((a, b) => {\n            if (a.isFullWidth && !b.isFullWidth) {\n                return -1;\n            } else if (!a.isFullWidth && b.isFullWidth) {\n                return 1;\n            } else if (!a.isFullWidth && !b.isFullWidth &&\n                       a.width !== b.width) {\n                if (a.width > b.width) {\n                    return -1;\n                } else if (a.width < b.width) {\n                    return 1;\n                }\n            }\n\n            /* The widths are equal. Keep the widgets in index order. */\n            return a.index - b.index;\n        });\n\n        this._masonry.items = [];\n        this._masonry.addItems(_.pluck(sortableWidgets, 'el'));\n        this._masonry.layout();\n    },\n\n    /**\n     * Handle a completed widget re-layout.\n     *\n     * This will go through all the widgets and determine if any have changed\n     * their sizes (widths). If so, their\n     * :js:func:`RB.Admin.WidgetView.updateSize` method will be called.\n     */\n    _onLayoutComplete() {\n        this.model.widgets.each(widget => {\n            const widgetView = this._widgetViews[widget.id];\n            const newWidth = widgetView.$el.width();\n\n            if (newWidth !== this._widgetWidths[widget.id]) {\n                widgetView.updateSize();\n                this._widgetWidths[widget.id] = newWidth;\n            }\n        });\n    },\n\n    /**\n     * Handle changes to widget sizes.\n     *\n     * This is called in response to the ``sizeChanged`` events on widgets. If\n     * the size of the widget has actually changed, this will record the new\n     * width and then update the positions of widgets accordingly.\n     *\n     * Args:\n     *     widgetID (string):\n     *         The ID of the widget that changed size.\n     *\n     *     $widget (jQuery):\n     *         The widget's jQuery-wrapped element.\n     */\n    _onWidgetSizeChanged(widgetID, $widget) {\n        const newWidth = $widget.width();\n\n        if (newWidth !== this._widgetWidths[widgetID]) {\n            this._widgetWidths[widgetID] = newWidth;\n            this._masonry.layout();\n        }\n    },\n});\n"]}