{"version":3,"sources":["extraDataMixin.es6.js"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;AAYA,GAAG,cAAH,GAAoB;AAChB;;;;;;;;;;;;;;AAcA,mBAfgB,6BAeE;AACd,aAAK,SAAL,GAAiB,IAAI,GAAG,SAAP,EAAjB;AACA,aAAK,SAAL,CAAe,UAAf,GAA4B,KAAK,UAAL,CAAgB,SAA5C;;AAEA,aAAK,QAAL,CAAc,KAAK,SAAnB,EAA8B,QAA9B,EAAwC,KAAK,mBAA7C;AACH,KApBe;;;AAsBhB;;;;;;;;;;;;;;;;;;;;;;AAsBA,OA5CgB,eA4CZ,GA5CY,EA4CP,KA5CO,EA4CA,OA5CA,EA4CS;AACrB,YAAI,cAAJ;;AAEA,YAAI,EAAE,QAAF,CAAW,GAAX,CAAJ,EAAqB;AACjB,oBAAQ,GAAR;AACA,sBAAU,KAAV;AACH,SAHD,MAGO;AACH,oBAAQ,EAAR;AACA,kBAAM,GAAN,IAAa,KAAb;AACH;;AAED,YAAM,eAAgB,EAAE,GAAF,CAAM,KAAN,EAAa,WAAb,KACA,EAAE,GAAF,CAAM,IAAN,EAAY,WAAZ,CADtB;;AAGA,YAAI,YAAJ,EAAkB;AACd,gBAAI,MAAM,SAAN,YAA2B,GAAG,SAAlC,EAA6C;AACzC;;;;;AAKA,sBAAM,SAAN,GAAkB,EAAE,KAAF,CAAQ,MAAM,SAAN,CAAgB,UAAxB,CAAlB;AACH;AACJ;;AAED,iBAAS,KAAT,CAAe,SAAf,CAAyB,GAAzB,CAA6B,IAA7B,CAAkC,IAAlC,EAAwC,KAAxC,EAA+C,OAA/C;;AAEA,YAAI,YAAJ,EAAkB;AACd,iBAAK,SAAL,CAAe,UAAf,GAA4B,KAAK,UAAL,CAAgB,SAA5C;AACH;;AAED,eAAO,IAAP;AACH,KA5Ee;;;AA8EhB;;;;;;;;;;;;AAYA,uBA1FgB,+BA0FI,SA1FJ,EA0Fe,OA1Ff,EA0FwB;AACpC,aAAK,OAAL,CAAa,kBAAb,EAAiC,IAAjC,EAAuC,SAAvC,EAAkD,OAAlD;AACA,aAAK,OAAL,CAAa,QAAb,EAAuB,IAAvB,EAA6B,OAA7B;AACH,KA7Fe;;;AA+FhB;;;;;;;;;;;;;AAaA,gBA5GgB,wBA4GH,GA5GG,EA4GE;AACd,eAAO,KAAK,SAAL,CAAe,GAAf,CAAmB,GAAnB,CAAP;AACH,KA9Ge;;;AAgHhB;;;;;;;;;;;;AAYA,gBA5HgB,wBA4HH,GA5HG,EA4HE,KA5HF,EA4HS;AACrB,aAAK,SAAL,CAAe,GAAf,CAAmB,GAAnB,EAAwB,KAAxB;AACH;AA9He,CAApB","file":"extraDataMixin.js","sourcesContent":["/**\n * A mixin to add a new extra data API to a model.\n *\n * The model this is attached to gains an extraData property that is backed by\n * the extraData key of the model's attributes object. This new API also\n * enhances the model such that extraData object can be interacted with on in a\n * key-value manner instead of dealing with the whole object.\n *\n * Any class that inherits this mixin should call _setupExtraData in its\n * initialize function to ensure that the mixin will work properly. This will\n * set up the property and event listeners.\n */\nRB.ExtraDataMixin = {\n    /**\n     * Set up the resource to add the new extra data API.\n     *\n     * This function should be called in the model's initialize function.\n     *\n     * This adds an extraData attribute that is backed by the model's\n     * attribute.extraData. This new model.extraData can be used directly in a\n     * model.extraData.get/set fashion to get or set individual keys in the\n     * extra data, instead of getting and setting the extra data all at once.\n     *\n     * This will also set up event listeners so that changes to extraData\n     * through the RB.ExtraData instance will trigger changed events on the\n     * model itself\n     */\n    _setupExtraData() {\n        this.extraData = new RB.ExtraData();\n        this.extraData.attributes = this.attributes.extraData;\n\n        this.listenTo(this.extraData, 'change', this._onExtraDataChanged);\n    },\n\n    /**\n     * Set the key to the value with the given options.\n     *\n     * This is a special case of Backbone.Model's set which does some extra\n     * work when dealing with a extraData member. It ensures that extraData is\n     * only ever set to an instance of RB.ExtraData and sets up a listener\n     * to fire change events when the extraData fires a change event.\n     *\n     * Args:\n     *     key (string):\n     *         The key to set.\n     *\n     *     value (*):\n     *         The value to set.\n     *\n     *     options (object):\n     *         Options for the set operation.\n     *\n     * Returns:\n     *     RB.ExtraDataMixin:\n     *     This object, for chaining.\n     */\n    set(key, value, options) {\n        let attrs;\n\n        if (_.isObject(key)) {\n            attrs = key;\n            options = value;\n        } else {\n            attrs = {};\n            attrs[key] = value;\n        }\n\n        const useExtraData = (_.has(attrs, 'extraData') &&\n                              _.has(this, 'extraData'));\n\n        if (useExtraData) {\n            if (attrs.extraData instanceof RB.ExtraData) {\n                /*\n                 * We don't want to assign an RB.ExtraData instance to the\n                 * model's extraData attribute because it expects a plain\n                 * JavaScript object.\n                 */\n                attrs.extraData = _.clone(attrs.extraData.attributes);\n            }\n        }\n\n        Backbone.Model.prototype.set.call(this, attrs, options);\n\n        if (useExtraData) {\n            this.extraData.attributes = this.attributes.extraData;\n        }\n\n        return this;\n    },\n\n    /**\n     * Handle a change event fired from the model's extra data.\n     *\n     * This fires both the change and change:extraData for this model.\n     *\n     * Args:\n     *     extraData (object):\n     *         The key:value mapping for the extra data.\n     *\n     *     options (object):\n     *         Options to pass along to event handlers.\n     */\n    _onExtraDataChanged(extraData, options) {\n        this.trigger('change:extraData', this, extraData, options);\n        this.trigger('change', this, options);\n    },\n\n    /**\n     * Get the key from the model's extra data.\n     *\n     * This should only be used when the model has an extraData attribute.\n     *\n     * Args:\n     *     key (string):\n     *         The key to fetch.\n     *\n     * Returns:\n     *     *:\n     *     The value of the data.\n     */\n    getExtraData(key) {\n        return this.extraData.get(key);\n    },\n\n    /**\n     * Set the key in the model's extra data to the value.\n     *\n     * This should only be used when the model has an extraData attribute.\n     *\n     * Args:\n     *     key (string):\n     *         The key to set.\n     *\n     *     value (*):\n     *         The value to set.\n     */\n    setExtraData(key, value) {\n        this.extraData.set(key, value);\n    },\n};\n"]}