{"version":3,"sources":["reviewReplyEditorModel.es6.js"],"names":[],"mappings":"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","file":"reviewReplyEditorModel.js","sourcesContent":["/**\n * An editor for replying to parts of a review.\n *\n * This will track the editing state of a reply to the body top/bottom of\n * a review or a comment, and handles saving of the reply.\n */\nRB.ReviewRequestPage.ReviewReplyEditor = Backbone.Model.extend({\n    defaults: {\n        anchorPrefix: null,\n        contextID: null,\n        contextType: null,\n        commentID: null,\n        hasDraft: false,\n        replyObject: null,\n        review: null,\n        reviewReply: null,\n        richText: null,\n        text: '',\n    },\n\n    replyClasses: {\n        diff_comments: RB.DiffCommentReply,\n        screenshot_comments: RB.ScreenshotCommentReply,\n        file_attachment_comments: RB.FileAttachmentCommentReply,\n        general_comments: RB.GeneralCommentReply,\n    },\n\n    /**\n     * Initialize the model.\n     */\n    initialize() {\n        this.on('change:reviewReply', this._setupReviewReply, this);\n        this._setupReviewReply();\n    },\n\n    /**\n     * Save the current reply.\n     *\n     * This will trigger the \"saving\" event before saving, and will trigger\n     * \"saved\" after it succeeds.\n     */\n    save() {\n        const contextType = this.get('contextType');\n        const reviewReply = this.get('reviewReply');\n        let valueAttr;\n        let richTextAttr;\n        let obj;\n\n        if (contextType === 'body_top') {\n            valueAttr = 'bodyTop';\n            richTextAttr = 'bodyTopRichText';\n            obj = reviewReply;\n        } else if (contextType === 'body_bottom') {\n            valueAttr = 'bodyBottom';\n            richTextAttr = 'bodyBottomRichText';\n            obj = reviewReply;\n        } else {\n            valueAttr = 'text';\n            richTextAttr = 'richText';\n            obj = this.get('replyObject');\n\n            if (!obj) {\n                const ReplyClass = this.replyClasses[contextType];\n\n                console.assert(ReplyClass,\n                               \"Unexpected context type '%s'\",\n                               contextType);\n\n                obj = new ReplyClass({\n                    parentObject: reviewReply,\n                    replyToID: this.get('contextID'),\n                    id: this.get('commentID'),\n                });\n            }\n        }\n\n        this.set('replyObject', obj);\n\n        this.trigger('saving');\n\n        obj.ready({\n            ready: () => {\n                const text = this.get('text');\n\n                if (text) {\n                    obj.set(valueAttr, text);\n                    obj.set(richTextAttr, this.get('richText'));\n                    obj.set({\n                        forceTextType: 'html',\n                        includeTextTypes: 'raw',\n                    });\n\n                    obj.save({\n                        attrs: [valueAttr, richTextAttr, 'forceTextType',\n                                'includeTextTypes', 'replyToID'],\n                        success: function() {\n                            this.set({\n                                hasDraft: true,\n                                text: obj.get(valueAttr),\n                                richText: true,\n                            });\n                            this.trigger('textUpdated');\n                            this.trigger('saved');\n                        }\n                    }, this);\n                } else {\n                    this.resetStateIfEmpty();\n                }\n            },\n        });\n    },\n\n    /**\n     * Reset the editor state, if the text isn't set.\n     *\n     * If the text attribute has a value, this will do nothing.\n     * Otherwise, it will destroy the reply or the comment (depending on\n     * what is being replied to), and then trigger \"resetState\".\n     */\n    resetStateIfEmpty() {\n        const text = this.get('text');\n\n        if (text.strip() !== '') {\n            return;\n        }\n\n        const replyObject = this.get('replyObject');\n\n        if (!replyObject || replyObject.isNew()) {\n            this._resetState();\n        } else {\n            const contextType = this.get('contextType');\n\n            if (contextType === 'body_top' ||\n                contextType === 'body_bottom') {\n                this._resetState(true);\n            } else {\n                replyObject.destroy({\n                    success: this._resetState\n                }, this);\n            }\n        }\n    },\n\n    /**\n     * Set up a new ReviewReply for this editor.\n     *\n     * This will first stop listening to any events on an old reviewReply.\n     *\n     * It will then listen for \"destroy\" and \"published\" events on the new\n     * reply. If either triggers, the \"discarded\" or \"published\" signals\n     * (respectively) will be triggered, and the state of the editor will reset.\n     */\n    _setupReviewReply() {\n        const reviewReply = this.get('reviewReply');\n        const oldReviewReply = this.previous('reviewReply');\n\n        if (oldReviewReply) {\n            oldReviewReply.off(null, null, this);\n        }\n\n        this.listenTo(reviewReply, 'destroyed', () => {\n            this.trigger('discarded');\n            this._resetState();\n        });\n\n        this.listenTo(reviewReply, 'published', () => {\n            this.trigger('published');\n            this._resetState(false);\n        });\n    },\n\n    /**\n     * Resets the state of the editor.\n     *\n     * Args:\n     *     shouldDiscardIfEmpty (boolean):\n     *         Whether to discard the entire reply if there are no individual\n     *         comments.\n     */\n    _resetState: function(shouldDiscardIfEmpty) {\n        this.set({\n            commentID: null,\n            hasDraft: false,\n            replyObject: null,\n        });\n\n        if (shouldDiscardIfEmpty === false) {\n            this.trigger('resetState');\n        } else {\n            this.get('reviewReply').discardIfEmpty({\n                success: () => this.trigger('resetState'),\n            });\n        }\n    },\n});\n"]}