{"version":3,"sources":["widgetView.es6.js"],"names":[],"mappings":"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","file":"widgetView.js","sourcesContent":["/**\n * The UI for an administration dashboard widget.\n *\n * This can be subclassed by widgets in order to add custom widget actions and\n * content. Subclasses can render the widget by overriding\n * :js:func:`RB.Admin.WidgetView.renderWidget()`, and respond to layout and\n * size changes by overriding :js:func:`RB.Admin.WidgetView.updateSize()`.\n */\nRB.Admin.WidgetView = Backbone.View.extend({\n    events: {\n        'click .js-action-reload': 'reloadContent',\n    },\n\n    /** Whether this widget can reload its contents on request. */\n    canReload: false,\n\n    /** Whether this widget can reload its contents on request. */\n    reloadTitle: null,\n\n    /**\n     * Initialize the widget.\n     */\n    initialize() {\n        this.$header = null;\n        this.$content = null;\n        this.$footer = null;\n        this.$headerActions = null;\n        this.$footerActions = null;\n        this._$reloadAction = null;\n    },\n\n    /**\n     * Add an action to the header.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the action.\n     *\n     * Option Args:\n     *     id (string):\n     *         The ID of the action. This will be used to add a CSS class\n     *         in the form of :samp:`js-action-{id}`.\n     *\n     *     cssClasses (string, optional):\n     *         A space-separated list of CSS class names to add to the\n     *         action.\n     *\n     *     el (Element or jQuery, optional):\n     *         An optional element to add to the action. This takes\n     *         precedence over ``html`` and ``text``.\n     *\n     *     html (string, optional):\n     *         Optional HTML to insert into the action. This takes\n     *         precedence over ``text``.\n     *\n     *     text (string, optional):\n     *         Optional plain text to set inside the action.\n     *\n     *     title (string, optional):\n     *         Optional title to display when hovering over the action,\n     *         or for screen readers.\n     *\n     * Returns:\n     *     jQuery:\n     *     The resulting action element.\n     */\n    addHeaderAction(options) {\n        return this._buildAction(options)\n            .appendTo(this.$headerActions);\n    },\n\n    /**\n     * Add an action to the footer.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the action.\n     *\n     * Option Args:\n     *     id (string):\n     *         The ID of the action. This will be used to add a CSS class\n     *         in the form of :samp:`js-action-{id}`.\n     *\n     *     cssClasses (string, optional):\n     *         A space-separated list of CSS class names to add to the\n     *         action.\n     *\n     *     el (Element or jQuery, optional):\n     *         An optional element to add to the action. This takes\n     *         precedence over ``html`` and ``text``.\n     *\n     *     html (string, optional):\n     *         Optional HTML to insert into the action. This takes\n     *         precedence over ``text``.\n     *\n     *     text (string, optional):\n     *         Optional plain text to set inside the action.\n     *\n     *     title (string, optional):\n     *         Optional title to display when hovering over the action,\n     *         or for screen readers.\n     *\n     * Returns:\n     *     jQuery:\n     *     The resulting action element.\n     */\n    addFooterAction(options) {\n        return this._buildAction(options)\n            .appendTo(this.$footerActions);\n    },\n\n    /**\n     * Show to the user whether or not content is loading/reloading.\n     *\n     * This will set whether the reloading action icon is spinning.\n     *\n     * Args:\n     *     reloading (boolean):\n     *         Whether to show to the user that content is reloading.\n     */\n    setReloading(reloading) {\n        console.assert(this.canReload,\n                       'This widget did not set canReload=true.');\n\n        this._$reloadAction.toggleClass('fa-spin', reloading);\n    },\n\n    /**\n     * Render the widget.\n     *\n     * Returns:\n     *     RB.Admin.WidgetView:\n     *     This widget, for chaining purposes.\n     */\n    render() {\n        this.$header = this.$el.children('.rb-c-admin-widget__header');\n        this.$content = this.$el.children('.rb-c-admin-widget__content');\n        this.$footer = this.$el.children('.rb-c-admin-widget__footer');\n        this.$headerActions = this.$header.children(\n            '.rb-c-admin-widget__actions');\n        this.$footerActions = this.$footer.children(\n            '.rb-c-admin-widget__actions');\n\n        if (this.canReload) {\n            this._$reloadAction = this.addHeaderAction({\n                id: 'reload',\n                cssClasses: 'fa fa-refresh',\n                title: this.reloadTitle,\n            });\n        }\n\n        this.renderWidget();\n\n        /* This is needed only for legacy widgets. */\n        this.$el.trigger('widget-shown');\n\n        return this;\n    },\n\n    /**\n     * Render the content of the widget.\n     *\n     * This will only be called once, when the widget is first rendered. It\n     * should take care of any initial content shown in the widget, and should\n     * attach any event listeners needed to perform updates to the content.\n     */\n    renderWidget() {\n    },\n\n    /**\n     * Update the rendered size of the widget.\n     *\n     * This may be called in response to changes in the widget size, such as\n     * when manually resizing the page or switching between desktop and mobile\n     * modes.\n     *\n     * This should perform any changes needed to the rendered size of any\n     * non-responsive UI elements in the widget.\n     */\n    updateSize() {\n    },\n\n    /**\n     * Reload the content inside the widget.\n     *\n     * This is called in response to a user clicking the Reload action,\n     * if :js:attr:`RB.Admin.WidgetView.canReload` is set to ``true``.\n     */\n    reloadContent() {\n    },\n\n    /**\n     * Build an action.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the action.\n     *\n     * Option Args:\n     *     id (string):\n     *         The ID of the action. This will be used to add a CSS class\n     *         in the form of :samp:`js-action-{id}`.\n     *\n     *     cssClasses (string, optional):\n     *         A space-separated list of CSS class names to add to the\n     *         action.\n     *\n     *     el (Element or jQuery, optional):\n     *         An optional element to add to the action. This takes\n     *         precedence over ``html`` and ``text``.\n     *\n     *     html (string, optional):\n     *         Optional HTML to insert into the action. This takes\n     *         precedence over ``text``.\n     *\n     *     text (string, optional):\n     *         Optional plain text to set inside the action.\n     *\n     *     title (string, optional):\n     *         Optional title to display when hovering over the action,\n     *         or for screen readers.\n     *\n     * Returns:\n     *     jQuery:\n     *     The resulting action element.\n     */\n    _buildAction(options) {\n        console.assert(options.id, 'An \"id\" value must be provided');\n\n        const $action = $('<li class=\"rb-c-admin-widget__action\">')\n            .addClass(`js-action-${options.id}`);\n\n        if (options.cssClasses) {\n            $action.addClass(options.cssClasses);\n        }\n\n        if (options.el) {\n            $action.append(options.el);\n        } else if (options.html) {\n            $action.html(options.html);\n        } else if (options.text) {\n            $action.text(options.text);\n        }\n\n        if (options.title) {\n            $action.attr('title', options.title);\n        }\n\n        return $action;\n    },\n});\n"]}