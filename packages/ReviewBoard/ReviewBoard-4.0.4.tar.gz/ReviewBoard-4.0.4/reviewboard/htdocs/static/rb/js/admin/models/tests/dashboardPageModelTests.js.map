{"version":3,"sources":["dashboardPageModelTests.es6.js"],"names":[],"mappings":"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","file":"dashboardPageModelTests.js","sourcesContent":["suite('rb/admin/models/DashboardPage', function() {\n    let page;\n\n    beforeEach(function() {\n        page = new RB.Admin.DashboardPage();\n    });\n\n    describe('Widgets', function() {\n        it('Loading', function() {\n            page.set('widgetsData', [\n                {\n                    id: 'widget-1',\n                    domID: 'widget-1',\n                    viewClass: 'RB.Admin.WidgetView',\n                    modelClass: 'RB.Admin.Widget',\n                    modelAttrs: {\n                        myAttr: 1,\n                    },\n                    viewOptions: {\n                        myOption: true,\n                    },\n                },\n                {\n                    id: 'widget-2',\n                    domID: 'widget-2',\n                    viewClass: 'RB.Admin.WidgetView',\n                    modelClass: 'RB.Admin.Widget',\n                    modelAttrs: {\n                        myAttr: 2,\n                    },\n                    viewOptions: {\n                        myOption: false,\n                    },\n                },\n            ]);\n\n            const onWidgetLoaded = jasmine.createSpy();\n\n            page.loadWidgets(onWidgetLoaded);\n\n            expect(page.widgets.length).toBe(2);\n\n            const model1 = page.widgets.at(0);\n            const model2 = page.widgets.at(1);\n\n            expect(model1).toBeInstanceOf(RB.Admin.Widget);\n            expect(model1.get('myAttr')).toBe(1);\n\n            expect(model2).toBeInstanceOf(RB.Admin.Widget);\n            expect(model2.get('myAttr')).toBe(2);\n\n            expect(onWidgetLoaded).toHaveBeenCalledTimes(2);\n            expect(onWidgetLoaded).toHaveBeenCalledWith({\n                domID: 'widget-1',\n                ViewType: RB.Admin.WidgetView,\n                viewOptions: {\n                    myOption: true,\n                },\n                widgetModel: model1,\n            });\n            expect(onWidgetLoaded).toHaveBeenCalledWith({\n                domID: 'widget-2',\n                ViewType: RB.Admin.WidgetView,\n                viewOptions: {\n                    myOption: false,\n                },\n                widgetModel: model2,\n            });\n        });\n\n        it('Loading errors sandboxed', function() {\n            spyOn(console, 'error');\n\n            page.set('widgetsData', [\n                {\n                    id: 'widget-1',\n                    domID: 'widget-1',\n                    viewClass: 'BadViewClass',\n                    modelClass: 'BadModelClass',\n                },\n                {\n                    id: 'widget-2',\n                    domID: 'widget-2',\n                    viewClass: 'RB.Admin.WidgetView',\n                    modelClass: 'RB.Admin.Widget',\n                    modelAttrs: {\n                        myAttr: 2,\n                    },\n                    viewOptions: {\n                        myOption: false,\n                    },\n                },\n            ]);\n\n            const onWidgetLoaded = jasmine.createSpy();\n\n            page.loadWidgets(onWidgetLoaded);\n\n            expect(page.widgets.length).toBe(1);\n\n            const model1 = page.widgets.at(0);\n            expect(model1).toBeInstanceOf(RB.Admin.Widget);\n\n            expect(onWidgetLoaded).toHaveBeenCalledTimes(1);\n            expect(onWidgetLoaded).toHaveBeenCalledWith({\n                domID: 'widget-2',\n                ViewType: RB.Admin.WidgetView,\n                viewOptions: {\n                    myOption: false,\n                },\n                widgetModel: model1,\n            });\n\n            expect(console.error).toHaveBeenCalled();\n            const args = console.error.calls.argsFor(0);\n            expect(args[0]).toBe(\n                'Unable to render administration widget \"%s\": %s');\n            expect(args[1]).toBe('widget-1');\n        });\n    });\n});\n"]}