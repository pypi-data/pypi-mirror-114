{"version":3,"sources":["newReviewRequestView.es6.js"],"names":[],"mappings":"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","file":"newReviewRequestView.js","sourcesContent":["(function() {\n\n\n/**\n * A simple model for creating file-attachment only review requests.\n *\n * Model Attributes:\n *     repository (RB.Repository):\n *         The associated repository (always ``null``).\n */\nconst FilesOnlyPreCommitModel = Backbone.Model.extend({\n    defaults: _.defaults({\n        repository: null,\n    }),\n});\n\n\n/**\n * A simple view for creating file-attachment only review requests.\n */\nconst FilesOnlyPreCommitView = Backbone.View.extend({\n    className: 'files-only',\n\n    template: _.template(dedent`\n        <p><%- description %></p>\n        <input type=\"submit\" class=\"primary large\" id=\"files-only-create\"\n               value=\"<%- buttonText %>\" />\n    `),\n\n    events: {\n        'click #files-only-create': '_onCreateClicked',\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     FilesOnlyPreCommitView:\n     *     This object, for chaining.\n     */\n    render() {\n        this.$el.html(this.template({\n            description: gettext('You won\\'t be able to add any diffs to this review request. The review request will only be usable for reviewing graphics, screenshots and file attachments.'),\n            buttonText: gettext('Create Review Request'),\n        }));\n\n        return this;\n    },\n\n    /**\n     * Callback for when the \"Create Review Request\" button is clicked.\n     *\n     * Creates a review request with the given localSitePrefix and nothing else,\n     * and redirects the browser to it.\n     *\n     * Args:\n     *     ev (Event):\n     *         The click event.\n     */\n    _onCreateClicked(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        const repository = this.model.get('repository');\n        const reviewRequest = new RB.ReviewRequest({\n            localSitePrefix: repository.get('localSitePrefix')\n        });\n\n        reviewRequest.save({\n            success: () => {\n                window.location = reviewRequest.get('reviewURL');\n            },\n            error: () => {\n                // TODO: handle errors\n            },\n        });\n    },\n});\n\n\n/**\n * The view for creating new review requests.\n *\n * This orchestrates several other objects to guide users through creating file\n * attachment only, pre-commit, or post-commit review requests.\n */\nRB.NewReviewRequestView = RB.PageView.extend({\n    el: '#new-review-request',\n\n    template: _.template(dedent`\n        <div class=\"rb-c-new-review-request\">\n         <div class=\"rb-c-sidebar -no-icons\"></div>\n         <div class=\"rb-c-new-review-request__repo-pane\">\n          <a href=\"#\" class=\"rb-c-new-review-request__show-repositories\">\n           <span class=\"fa fa-chevron-left\"></span>\n           <%- repositoriesLabel %>\n          </a>\n          <div class=\"rb-c-new-review-request__repo-detail\">\n           <div class=\"rb-c-new-review-request__main\">\n            <div class=\"rb-c-new-review-request__hint\"><%- hint %></div>\n           </div>\n          </div>\n         </div>\n        </div>\n    `),\n\n    events: {\n        'click .rb-c-new-review-request__show-repositories':\n            '_onShowRepositoriesClicked',\n    },\n\n    /**\n     * Render the page.\n     */\n    renderPage() {\n        /* Build the main UI for the page. */\n        this.$pageContent.html(this.template({\n            hint: gettext('Select a repository'),\n            repositoriesLabel: gettext('Repositories'),\n        }));\n\n        this._$newReviewRequestContainer = this.$pageContent.find(\n            '.rb-c-new-review-request');\n        this._$repoPane = this.$pageContent.find(\n            '.rb-c-new-review-request__repo-pane');\n        this._$repoDetailContainer = this._$repoPane.find(\n            '.rb-c-new-review-request__repo-detail');\n        this._$repoSelectorContainer = this._$newReviewRequestContainer.find(\n            '.rb-c-sidebar');\n        this._$content = this._$repoDetailContainer.find(\n            '.rb-c-new-review-request__main');\n        this._$hint = this._$repoDetailContainer.find(\n            '.rb-c-new-review-request__hint');\n\n        /*\n         * Add the repository selector. This will live either in the page's\n         * sidebar (in desktop mode) or in the page's container (in mobile\n         * mode).\n         */\n        this._repositorySelectionView = new RB.RepositorySelectionView({\n            collection: this.model.get('repositories'),\n        });\n        this._repositorySelectionView.render();\n\n        this.listenTo(this._repositorySelectionView,\n                      'selected',\n                      repository => this.model.set('repository', repository));\n        this.listenTo(this.model, 'change:repository',\n                      this._onRepositoryChanged);\n\n        if (this._preCommitView) {\n            this._$hint.hide();\n            this._$content.append(this._preCommitView.render().el);\n        }\n        if (this._postCommitView) {\n            this._$hint.hide();\n            this._$content.append(this._postCommitView.render().el);\n        }\n\n        /*\n         * If the only two options are the \"None - File attachments only\"\n         * pseudo-repository and one real one, pre-select the real one to speed\n         * up the 80% case. Otherwise, we'll leave it at the \"Select a\n         * repository\" screen.\n         */\n        const repositories = this.model.get('repositories').models;\n\n        if (repositories.length === 2) {\n            repositories[1].trigger('selected', repositories[1]);\n        }\n\n        return this;\n    },\n\n    /**\n     * Handle mobile mode changes.\n     *\n     * This will update the parent of the repository selector. In desktop\n     * mode, it will be placed in the sidebar. In mobile mode, it will be\n     * placed in a container in this view, with its display managed by CSS.\n     *\n     * Args:\n     *     inMobileMode (bool):\n     *         Whether the UI is now in mobile mode.\n     */\n    onMobileModeChanged(inMobileMode) {\n        this._repositorySelectionView.$el\n            .detach()\n            .appendTo(inMobileMode\n                      ? this._$repoSelectorContainer\n                      : this.$mainSidebar);\n    },\n\n    /**\n     * Callback for when the current repository has changed.\n     *\n     * If the \"Files Only\" entry is selected, this shows the special\n     * FilesOnlyPreCommitView in the right-hand pane.\n     *\n     * If a repository that supports fetching committed revisions is selected,\n     * this will show both the pre-commit and post-commit UIs stacked\n     * vertically. If the repository only supports pre-commit, only the\n     * pre-commit UI is shown.\n     */\n    _onRepositoryChanged() {\n        const repository = this.model.get('repository');\n\n        if (repository === null) {\n            /*\n             * A repository is no longer selected. The user either chose\n             * the File Attachments Only entry or hit the \"< Repositories\"\n             * link on mobile.\n             *\n             * If on mobile, we're going to add a small delay (slightly longer\n             * than the animation time) before removing any views, so that\n             * they don't disappear during animation.\n             */\n            this._$newReviewRequestContainer\n                .removeClass('js-repository-selected');\n\n            if (this.inMobileMode) {\n                _.delay(this._removeCommitViews.bind(this), 400);\n            } else {\n                this._removeCommitViews();\n            }\n        } else {\n            /*\n             * The user has selected a repository. Begin placing new views\n             * based on the repository's capabilities.\n             */\n            this._$newReviewRequestContainer\n                .addClass('js-repository-selected');\n\n            this._removeCommitViews();\n\n            if (repository.get('filesOnly')) {\n                this._preCommitView = new FilesOnlyPreCommitView({\n                    model: new FilesOnlyPreCommitModel({\n                        repository: repository\n                    })\n                });\n            } else {\n                this._preCommitView = new RB.PreCommitView({\n                    model: new RB.UploadDiffModel({\n                        repository: repository\n                    })\n                });\n\n                if (repository.get('supportsPostCommit')) {\n                    this._postCommitView = new RB.PostCommitView({\n                        model: new RB.PostCommitModel({\n                            repository: repository\n                        }),\n                        $scrollContainer: this._$content,\n                    });\n                }\n            }\n\n            this._$hint.hide();\n            this._$content.append(this._preCommitView.render().el);\n\n            if (this._postCommitView) {\n                this._$content.append(this._postCommitView.render().el);\n            }\n        }\n    },\n\n    /**\n     * Remove the pre- and post-commit views.\n     *\n     * This will remove the views from the DOM and null them out, allowing\n     * them to be rebuilt.\n     */\n    _removeCommitViews() {\n        if (this._preCommitView) {\n            this._preCommitView.remove();\n            this._preCommitView = null;\n        }\n\n        if (this._postCommitView) {\n            this._postCommitView.remove();\n            this._postCommitView = null;\n        }\n    },\n\n    /**\n     * Handler for when the mobile-only Show Repositories link is clicked.\n     *\n     * Sets the page to slide back to the sidebar listing repositories.\n     */\n    _onShowRepositoriesClicked() {\n        this._repositorySelectionView.unselect();\n    },\n});\n\n\n})();\n"]}