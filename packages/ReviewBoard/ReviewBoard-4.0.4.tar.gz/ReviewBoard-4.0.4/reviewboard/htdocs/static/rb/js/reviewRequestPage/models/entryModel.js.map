{"version":3,"sources":["entryModel.es6.js"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,GAAG,iBAAH,CAAqB,KAArB,GAA6B,SAAS,KAAT,CAAe,MAAf,CAAsB;AAC/C,YAAU;AACN,oBAAgB,IADV;AAEN,eAAW,KAFL;AAGN,UAAM,IAHA;AAIN,UAAM,IAJA;AAKN,yBAAqB,IALf;AAMN,YAAQ,IANF;AAON,sBAAkB;AAPZ,GADqC;;AAW/C;;;;;;;;;;;AAWA,OAtB+C,iBAsBzC,KAtByC,EAsBlC;AACT,WAAO;AACH,UAAI,MAAM,EADP;AAEH,iBAAW,MAAM,SAFd;AAGH,sBAAgB,EAAE,MAAF,CAAS,MAAM,cAAf,IACE,MAAM,cADR,GAEE,OAAO,GAAP,CAAW,MAAM,cAAjB,EAAiC,MAAjC,EALf;AAMH,YAAM,MAAM,IAAN,IAAc,IANjB;AAOH,wBAAkB,EAAE,MAAF,CAAS,MAAM,gBAAf,IACE,MAAM,gBADR,GAEE,OAAO,GAAP,CAAW,MAAM,gBAAjB,EAAmC,MAAnC,EATjB;AAUH,cAAQ,MAAM,MAVX;AAWH,2BAAqB,MAAM;AAXxB,KAAP;AAaH,GApC8C;;;AAsC/C;;;;;;;;;;;;;;;AAeA,WArD+C,qBAqDrC,QArDqC,EAqD3B;AAChB,QAAM,eAAe,OAAO,GAAP,CAAW,SAAS,gBAApB,EAAsC,MAAtC,EAArB;;AAEA;AACA,QAAM,UAAU,SAAS,IAAT,IAAiB,IAAjC;AACA,QAAM,YAAY,KAAK,GAAL,CAAS,MAAT,KAAoB,IAAtC;;AAEA,WAAQ,eAAe,KAAK,GAAL,CAAS,kBAAT,CAAf,IACA,YAAY,SADpB;AAEH,GA9D8C;;;AAgE/C;;;;;;;;;;;;AAYA,mBA5E+C,6BA4E7B,SA5E6B,EA4ElB,CAC5B,CA7E8C;;;AA+E/C;;;;;;;;;;;;;AAaA,kBA5F+C,4BA4F9B,SA5F8B,EA4FnB,CAC3B,CA7F8C;;;AA+F/C;;;;;;;;;;;AAWA,cA1G+C,wBA0GlC,QA1GkC,EA0GxB;AACnB,SAAK,GAAL,CAAS,MAAT,EAAiB,iBAAjB,CAAmC,IAAnC,EAAyC,QAAzC;AACH,GA5G8C;;;AA8G/C;;;AAGA,qBAjH+C,iCAiHzB;AAClB,SAAK,GAAL,CAAS,MAAT,EAAiB,wBAAjB,CAA0C,IAA1C;AACH;AAnH8C,CAAtB,CAA7B","file":"entryModel.js","sourcesContent":["/**\n * An entry on the review request page.\n *\n * This represents entries on the review request page, such as reviews and\n * review request changes. It stores common state used by all entries.\n *\n * This is meant to be subclassed to handle parsing of custom content or\n * storing custom state, but can be used as-is for simple entries.\n *\n * Model Attributes:\n *     addedTimestamp (Date):\n *         The date/time the entry was added.\n *\n *     collapsed (boolean):\n *         Whether this entry is in a collapsed state.\n *\n *     etag (string):\n *         An ETag representing the content or state of the entry.\n *\n *         This is used along with ``updatedTimestamp`` to determine if an\n *         entry has new content.\n *\n *     page (RB.ReviewRequestPage):\n *         The page that owns this entry.\n *\n *     reviewRequestEditor (RB.ReviewRequestEditor):\n *         The review request editor managing state on the page.\n *\n *     typeID (string):\n *         The type of this entry, corresponding to a entry type ID that's\n *         been registered server-side.\n *\n *     updatedTimestamp (Date):\n *         The date/time the entry was last updated.\n *\n *         This is used along with ``etag`` to determine if an entry has new\n *         content.\n */\nRB.ReviewRequestPage.Entry = Backbone.Model.extend({\n    defaults: {\n        addedTimestamp: null,\n        collapsed: false,\n        etag: null,\n        page: null,\n        reviewRequestEditor: null,\n        typeID: null,\n        updatedTimestamp: null,\n    },\n\n    /**\n     * Parse attributes for the model.\n     *\n     * Args:\n     *     attrs (object):\n     *         The attributes provided when constructing the model instance.\n     *\n     * Returns:\n     *     object:\n     *     The resulting attributes used for the model instance.\n     */\n    parse(attrs) {\n        return {\n            id: attrs.id,\n            collapsed: attrs.collapsed,\n            addedTimestamp: _.isDate(attrs.addedTimestamp)\n                            ? attrs.addedTimestamp\n                            : moment.utc(attrs.addedTimestamp).toDate(),\n            etag: attrs.etag || null,\n            updatedTimestamp: _.isDate(attrs.updatedTimestamp)\n                              ? attrs.updatedTimestamp\n                              : moment.utc(attrs.updatedTimestamp).toDate(),\n            typeID: attrs.typeID,\n            reviewRequestEditor: attrs.reviewRequestEditor,\n        };\n    },\n\n    /**\n     * Return whether an entry has been updated server-side.\n     *\n     * This defaults to comparing the timestamp and the ETag. While these\n     * should always be sufficient, subclasses can override the logic if\n     * needed.\n     *\n     * Args:\n     *     metadata (object):\n     *         Deserialized metadata from the update payload.\n     *\n     * Returns:\n     *     boolean:\n     *     ``true`` if the entry has been updated. ``false`` if it has not.\n     */\n    isUpdated(metadata) {\n        const newTimestamp = moment.utc(metadata.updatedTimestamp).toDate();\n\n        /* Normalize these to null, if undefined or empty. */\n        const newETag = metadata.etag || null;\n        const entryETag = this.get('etag') || null;\n\n        return (newTimestamp > this.get('updatedTimestamp') ||\n                newETag !== entryETag);\n    },\n\n    /**\n     * Handle operations before applying an update from the server.\n     *\n     * This can be overridden by entries to store state or before cleanup\n     * before reloading and re-rendering the HTML from the server.\n     *\n     * Subclasses do not need to call the parent method.\n     *\n     * Args:\n     *     entryData (object):\n     *         The metadata provided by the server in the update.\n     */\n    beforeApplyUpdate(entryData) {\n    },\n\n    /**\n     * Handle operations after applying an update from the server.\n     *\n     * This can be overridden by entries to restore state or perform other\n     * post-update tasks after reloading and re-rendering the HTML from the\n     * server.\n     *\n     * Subclasses do not need to call the parent method.\n     *\n     * Args:\n     *     entryData (object):\n     *         The metadata provided by the server in the update.\n     */\n    afterApplyUpdate(entryData) {\n    },\n\n    /**\n     * Watch for updates to this entry.\n     *\n     * The entry will be checked for updates at least once every ``periodMS``\n     * milliseconds.\n     *\n     * Args:\n     *     periodMS (number):\n     *         The frequency at which the updates should be polled. Updates\n     *         will be checked at least this often.\n     */\n    watchUpdates(periodMS) {\n        this.get('page').watchEntryUpdates(this, periodMS);\n    },\n\n    /**\n     * Stop watching for updates to this entry.\n     */\n    stopWatchingUpdates() {\n        this.get('page').stopWatchingEntryUpdates(this);\n    },\n});\n"]}