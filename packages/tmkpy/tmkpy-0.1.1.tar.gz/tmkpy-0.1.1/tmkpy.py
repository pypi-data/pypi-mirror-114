# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_tmkpy')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_tmkpy')
    _tmkpy = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tmkpy', [dirname(__file__)])
        except ImportError:
            import _tmkpy
            return _tmkpy
        try:
            _mod = imp.load_module('_tmkpy', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _tmkpy = swig_import_helper()
    del swig_import_helper
else:
    import _tmkpy
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class TMKFeatureVectors(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TMKFeatureVectors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TMKFeatureVectors, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _tmkpy.new_TMKFeatureVectors(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        tryCreateFromPrecomputed = staticmethod(_tmkpy.TMKFeatureVectors_tryCreateFromPrecomputed)
    else:
        tryCreateFromPrecomputed = _tmkpy.TMKFeatureVectors_tryCreateFromPrecomputed
    if _newclass:
        areCompatible = staticmethod(_tmkpy.TMKFeatureVectors_areCompatible)
    else:
        areCompatible = _tmkpy.TMKFeatureVectors_areCompatible
    if _newclass:
        makePoullotPeriods = staticmethod(_tmkpy.TMKFeatureVectors_makePoullotPeriods)
    else:
        makePoullotPeriods = _tmkpy.TMKFeatureVectors_makePoullotPeriods
    if _newclass:
        makePoullotFourierCoefficients = staticmethod(_tmkpy.TMKFeatureVectors_makePoullotFourierCoefficients)
    else:
        makePoullotFourierCoefficients = _tmkpy.TMKFeatureVectors_makePoullotFourierCoefficients

    def ingestFrameFeature(self, frameFeature, frameNumber):
        return _tmkpy.TMKFeatureVectors_ingestFrameFeature(self, frameFeature, frameNumber)

    def finishFrameFeatureIngest(self):
        return _tmkpy.TMKFeatureVectors_finishFrameFeatureIngest(self)

    def writeToOutputStream(self, fp, programName):
        return _tmkpy.TMKFeatureVectors_writeToOutputStream(self, fp, programName)

    def writeToOutputFile(self, fileName, programName):
        return _tmkpy.TMKFeatureVectors_writeToOutputFile(self, fileName, programName)
    if _newclass:
        readFromInputStream = staticmethod(_tmkpy.TMKFeatureVectors_readFromInputStream)
    else:
        readFromInputStream = _tmkpy.TMKFeatureVectors_readFromInputStream
    if _newclass:
        readFromInputFile = staticmethod(_tmkpy.TMKFeatureVectors_readFromInputFile)
    else:
        readFromInputFile = _tmkpy.TMKFeatureVectors_readFromInputFile

    def getAlgorithm(self):
        return _tmkpy.TMKFeatureVectors_getAlgorithm(self)

    def getNumPeriods(self):
        return _tmkpy.TMKFeatureVectors_getNumPeriods(self)

    def getNumFourierCoefficients(self):
        return _tmkpy.TMKFeatureVectors_getNumFourierCoefficients(self)

    def getFrameFeatureDimension(self):
        return _tmkpy.TMKFeatureVectors_getFrameFeatureDimension(self)

    def getFramesPerSecond(self):
        return _tmkpy.TMKFeatureVectors_getFramesPerSecond(self)

    def getFrameFeatureCount(self):
        return _tmkpy.TMKFeatureVectors_getFrameFeatureCount(self)

    def getPeriods(self):
        return _tmkpy.TMKFeatureVectors_getPeriods(self)

    def getFourierCoefficients(self):
        return _tmkpy.TMKFeatureVectors_getFourierCoefficients(self)

    def getPureAverageFeature(self):
        return _tmkpy.TMKFeatureVectors_getPureAverageFeature(self)

    def getCosFeatures(self):
        return _tmkpy.TMKFeatureVectors_getCosFeatures(self)

    def getSinFeatures(self):
        return _tmkpy.TMKFeatureVectors_getSinFeatures(self)

    def L2NormalizePureAverageFeature(self):
        return _tmkpy.TMKFeatureVectors_L2NormalizePureAverageFeature(self)
    if _newclass:
        findPairOffsetsModuloPeriods = staticmethod(_tmkpy.TMKFeatureVectors_findPairOffsetsModuloPeriods)
    else:
        findPairOffsetsModuloPeriods = _tmkpy.TMKFeatureVectors_findPairOffsetsModuloPeriods
    if _newclass:
        computeLevel1Score = staticmethod(_tmkpy.TMKFeatureVectors_computeLevel1Score)
    else:
        computeLevel1Score = _tmkpy.TMKFeatureVectors_computeLevel1Score
    if _newclass:
        computeLevel2Score = staticmethod(_tmkpy.TMKFeatureVectors_computeLevel2Score)
    else:
        computeLevel2Score = _tmkpy.TMKFeatureVectors_computeLevel2Score
    if _newclass:
        compare = staticmethod(_tmkpy.TMKFeatureVectors_compare)
    else:
        compare = _tmkpy.TMKFeatureVectors_compare
    __swig_destroy__ = _tmkpy.delete_TMKFeatureVectors
    __del__ = lambda self: None
TMKFeatureVectors_swigregister = _tmkpy.TMKFeatureVectors_swigregister
TMKFeatureVectors_swigregister(TMKFeatureVectors)
cvar = _tmkpy.cvar
TMK_DEFAULT_RESAMPLE_FPS = cvar.TMK_DEFAULT_RESAMPLE_FPS

def TMKFeatureVectors_tryCreateFromPrecomputed(algorithm, framesPerSecond, frameFeatureCount, periods, fourierCoefficients, pureAverageFeature, cosFeatures, sinFeatures):
    return _tmkpy.TMKFeatureVectors_tryCreateFromPrecomputed(algorithm, framesPerSecond, frameFeatureCount, periods, fourierCoefficients, pureAverageFeature, cosFeatures, sinFeatures)
TMKFeatureVectors_tryCreateFromPrecomputed = _tmkpy.TMKFeatureVectors_tryCreateFromPrecomputed

def TMKFeatureVectors_areCompatible(fva, fvb):
    return _tmkpy.TMKFeatureVectors_areCompatible(fva, fvb)
TMKFeatureVectors_areCompatible = _tmkpy.TMKFeatureVectors_areCompatible

def TMKFeatureVectors_makePoullotPeriods():
    return _tmkpy.TMKFeatureVectors_makePoullotPeriods()
TMKFeatureVectors_makePoullotPeriods = _tmkpy.TMKFeatureVectors_makePoullotPeriods

def TMKFeatureVectors_makePoullotFourierCoefficients():
    return _tmkpy.TMKFeatureVectors_makePoullotFourierCoefficients()
TMKFeatureVectors_makePoullotFourierCoefficients = _tmkpy.TMKFeatureVectors_makePoullotFourierCoefficients

def TMKFeatureVectors_readFromInputStream(fp, programName):
    return _tmkpy.TMKFeatureVectors_readFromInputStream(fp, programName)
TMKFeatureVectors_readFromInputStream = _tmkpy.TMKFeatureVectors_readFromInputStream

def TMKFeatureVectors_readFromInputFile(fileName, programName):
    return _tmkpy.TMKFeatureVectors_readFromInputFile(fileName, programName)
TMKFeatureVectors_readFromInputFile = _tmkpy.TMKFeatureVectors_readFromInputFile

def TMKFeatureVectors_findPairOffsetsModuloPeriods(fva, fvb, bestOffsets, valuesAtBestOffsets, printDetails):
    return _tmkpy.TMKFeatureVectors_findPairOffsetsModuloPeriods(fva, fvb, bestOffsets, valuesAtBestOffsets, printDetails)
TMKFeatureVectors_findPairOffsetsModuloPeriods = _tmkpy.TMKFeatureVectors_findPairOffsetsModuloPeriods

def TMKFeatureVectors_computeLevel1Score(fva, fvb):
    return _tmkpy.TMKFeatureVectors_computeLevel1Score(fva, fvb)
TMKFeatureVectors_computeLevel1Score = _tmkpy.TMKFeatureVectors_computeLevel1Score

def TMKFeatureVectors_computeLevel2Score(fva, fvb):
    return _tmkpy.TMKFeatureVectors_computeLevel2Score(fva, fvb)
TMKFeatureVectors_computeLevel2Score = _tmkpy.TMKFeatureVectors_computeLevel2Score

def TMKFeatureVectors_compare(fva, fvb, tolerance):
    return _tmkpy.TMKFeatureVectors_compare(fva, fvb, tolerance)
TMKFeatureVectors_compare = _tmkpy.TMKFeatureVectors_compare

TMK_MAGIC_LENGTH = _tmkpy.TMK_MAGIC_LENGTH
TMK_PROJECT_MAGIC = _tmkpy.TMK_PROJECT_MAGIC
VSTR_FILETYPE_MAGIC = _tmkpy.VSTR_FILETYPE_MAGIC
FEAT_FILETYPE_MAGIC = _tmkpy.FEAT_FILETYPE_MAGIC
FVEC_FILETYPE_MAGIC = _tmkpy.FVEC_FILETYPE_MAGIC
PDQ_FLOAT_ALGO_MAGIC = _tmkpy.PDQ_FLOAT_ALGO_MAGIC
TMKFramewiseAlgorithm_UNRECOGNIZED = _tmkpy.TMKFramewiseAlgorithm_UNRECOGNIZED
TMKFramewiseAlgorithm_UNIT_TEST = _tmkpy.TMKFramewiseAlgorithm_UNIT_TEST
TMKFramewiseAlgorithm_PDQ_FLOAT = _tmkpy.TMKFramewiseAlgorithm_PDQ_FLOAT
TMK_DEFAULT_FRAMES_PER_SECOND = _tmkpy.TMK_DEFAULT_FRAMES_PER_SECOND
class DecodedVideoStreamFileHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecodedVideoStreamFileHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DecodedVideoStreamFileHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["projectMagic"] = _tmkpy.DecodedVideoStreamFileHeader_projectMagic_set
    __swig_getmethods__["projectMagic"] = _tmkpy.DecodedVideoStreamFileHeader_projectMagic_get
    if _newclass:
        projectMagic = _swig_property(_tmkpy.DecodedVideoStreamFileHeader_projectMagic_get, _tmkpy.DecodedVideoStreamFileHeader_projectMagic_set)
    __swig_setmethods__["fileTypeMagic"] = _tmkpy.DecodedVideoStreamFileHeader_fileTypeMagic_set
    __swig_getmethods__["fileTypeMagic"] = _tmkpy.DecodedVideoStreamFileHeader_fileTypeMagic_get
    if _newclass:
        fileTypeMagic = _swig_property(_tmkpy.DecodedVideoStreamFileHeader_fileTypeMagic_get, _tmkpy.DecodedVideoStreamFileHeader_fileTypeMagic_set)
    __swig_setmethods__["frameHeight"] = _tmkpy.DecodedVideoStreamFileHeader_frameHeight_set
    __swig_getmethods__["frameHeight"] = _tmkpy.DecodedVideoStreamFileHeader_frameHeight_get
    if _newclass:
        frameHeight = _swig_property(_tmkpy.DecodedVideoStreamFileHeader_frameHeight_get, _tmkpy.DecodedVideoStreamFileHeader_frameHeight_set)
    __swig_setmethods__["frameWidth"] = _tmkpy.DecodedVideoStreamFileHeader_frameWidth_set
    __swig_getmethods__["frameWidth"] = _tmkpy.DecodedVideoStreamFileHeader_frameWidth_get
    if _newclass:
        frameWidth = _swig_property(_tmkpy.DecodedVideoStreamFileHeader_frameWidth_get, _tmkpy.DecodedVideoStreamFileHeader_frameWidth_set)
    __swig_setmethods__["framesPerSecond"] = _tmkpy.DecodedVideoStreamFileHeader_framesPerSecond_set
    __swig_getmethods__["framesPerSecond"] = _tmkpy.DecodedVideoStreamFileHeader_framesPerSecond_get
    if _newclass:
        framesPerSecond = _swig_property(_tmkpy.DecodedVideoStreamFileHeader_framesPerSecond_get, _tmkpy.DecodedVideoStreamFileHeader_framesPerSecond_set)
    __swig_setmethods__["pad"] = _tmkpy.DecodedVideoStreamFileHeader_pad_set
    __swig_getmethods__["pad"] = _tmkpy.DecodedVideoStreamFileHeader_pad_get
    if _newclass:
        pad = _swig_property(_tmkpy.DecodedVideoStreamFileHeader_pad_get, _tmkpy.DecodedVideoStreamFileHeader_pad_set)

    def __init__(self):
        this = _tmkpy.new_DecodedVideoStreamFileHeader()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tmkpy.delete_DecodedVideoStreamFileHeader
    __del__ = lambda self: None
DecodedVideoStreamFileHeader_swigregister = _tmkpy.DecodedVideoStreamFileHeader_swigregister
DecodedVideoStreamFileHeader_swigregister(DecodedVideoStreamFileHeader)

class FrameFeaturesFileHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameFeaturesFileHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FrameFeaturesFileHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["projectMagic"] = _tmkpy.FrameFeaturesFileHeader_projectMagic_set
    __swig_getmethods__["projectMagic"] = _tmkpy.FrameFeaturesFileHeader_projectMagic_get
    if _newclass:
        projectMagic = _swig_property(_tmkpy.FrameFeaturesFileHeader_projectMagic_get, _tmkpy.FrameFeaturesFileHeader_projectMagic_set)
    __swig_setmethods__["fileTypeMagic"] = _tmkpy.FrameFeaturesFileHeader_fileTypeMagic_set
    __swig_getmethods__["fileTypeMagic"] = _tmkpy.FrameFeaturesFileHeader_fileTypeMagic_get
    if _newclass:
        fileTypeMagic = _swig_property(_tmkpy.FrameFeaturesFileHeader_fileTypeMagic_get, _tmkpy.FrameFeaturesFileHeader_fileTypeMagic_set)
    __swig_setmethods__["frameFeatureAlgorithmMagic"] = _tmkpy.FrameFeaturesFileHeader_frameFeatureAlgorithmMagic_set
    __swig_getmethods__["frameFeatureAlgorithmMagic"] = _tmkpy.FrameFeaturesFileHeader_frameFeatureAlgorithmMagic_get
    if _newclass:
        frameFeatureAlgorithmMagic = _swig_property(_tmkpy.FrameFeaturesFileHeader_frameFeatureAlgorithmMagic_get, _tmkpy.FrameFeaturesFileHeader_frameFeatureAlgorithmMagic_set)
    __swig_setmethods__["frameFeatureDimension"] = _tmkpy.FrameFeaturesFileHeader_frameFeatureDimension_set
    __swig_getmethods__["frameFeatureDimension"] = _tmkpy.FrameFeaturesFileHeader_frameFeatureDimension_get
    if _newclass:
        frameFeatureDimension = _swig_property(_tmkpy.FrameFeaturesFileHeader_frameFeatureDimension_get, _tmkpy.FrameFeaturesFileHeader_frameFeatureDimension_set)
    __swig_setmethods__["framesPerSecond"] = _tmkpy.FrameFeaturesFileHeader_framesPerSecond_set
    __swig_getmethods__["framesPerSecond"] = _tmkpy.FrameFeaturesFileHeader_framesPerSecond_get
    if _newclass:
        framesPerSecond = _swig_property(_tmkpy.FrameFeaturesFileHeader_framesPerSecond_get, _tmkpy.FrameFeaturesFileHeader_framesPerSecond_set)
    __swig_setmethods__["pad"] = _tmkpy.FrameFeaturesFileHeader_pad_set
    __swig_getmethods__["pad"] = _tmkpy.FrameFeaturesFileHeader_pad_get
    if _newclass:
        pad = _swig_property(_tmkpy.FrameFeaturesFileHeader_pad_get, _tmkpy.FrameFeaturesFileHeader_pad_set)

    def __init__(self):
        this = _tmkpy.new_FrameFeaturesFileHeader()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tmkpy.delete_FrameFeaturesFileHeader
    __del__ = lambda self: None
FrameFeaturesFileHeader_swigregister = _tmkpy.FrameFeaturesFileHeader_swigregister
FrameFeaturesFileHeader_swigregister(FrameFeaturesFileHeader)

class FeatureVectorFileHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FeatureVectorFileHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FeatureVectorFileHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["projectMagic"] = _tmkpy.FeatureVectorFileHeader_projectMagic_set
    __swig_getmethods__["projectMagic"] = _tmkpy.FeatureVectorFileHeader_projectMagic_get
    if _newclass:
        projectMagic = _swig_property(_tmkpy.FeatureVectorFileHeader_projectMagic_get, _tmkpy.FeatureVectorFileHeader_projectMagic_set)
    __swig_setmethods__["fileTypeMagic"] = _tmkpy.FeatureVectorFileHeader_fileTypeMagic_set
    __swig_getmethods__["fileTypeMagic"] = _tmkpy.FeatureVectorFileHeader_fileTypeMagic_get
    if _newclass:
        fileTypeMagic = _swig_property(_tmkpy.FeatureVectorFileHeader_fileTypeMagic_get, _tmkpy.FeatureVectorFileHeader_fileTypeMagic_set)
    __swig_setmethods__["frameFeatureAlgorithmMagic"] = _tmkpy.FeatureVectorFileHeader_frameFeatureAlgorithmMagic_set
    __swig_getmethods__["frameFeatureAlgorithmMagic"] = _tmkpy.FeatureVectorFileHeader_frameFeatureAlgorithmMagic_get
    if _newclass:
        frameFeatureAlgorithmMagic = _swig_property(_tmkpy.FeatureVectorFileHeader_frameFeatureAlgorithmMagic_get, _tmkpy.FeatureVectorFileHeader_frameFeatureAlgorithmMagic_set)
    __swig_setmethods__["framesPerSecond"] = _tmkpy.FeatureVectorFileHeader_framesPerSecond_set
    __swig_getmethods__["framesPerSecond"] = _tmkpy.FeatureVectorFileHeader_framesPerSecond_get
    if _newclass:
        framesPerSecond = _swig_property(_tmkpy.FeatureVectorFileHeader_framesPerSecond_get, _tmkpy.FeatureVectorFileHeader_framesPerSecond_set)
    __swig_setmethods__["numPeriods"] = _tmkpy.FeatureVectorFileHeader_numPeriods_set
    __swig_getmethods__["numPeriods"] = _tmkpy.FeatureVectorFileHeader_numPeriods_get
    if _newclass:
        numPeriods = _swig_property(_tmkpy.FeatureVectorFileHeader_numPeriods_get, _tmkpy.FeatureVectorFileHeader_numPeriods_set)
    __swig_setmethods__["numFourierCoefficients"] = _tmkpy.FeatureVectorFileHeader_numFourierCoefficients_set
    __swig_getmethods__["numFourierCoefficients"] = _tmkpy.FeatureVectorFileHeader_numFourierCoefficients_get
    if _newclass:
        numFourierCoefficients = _swig_property(_tmkpy.FeatureVectorFileHeader_numFourierCoefficients_get, _tmkpy.FeatureVectorFileHeader_numFourierCoefficients_set)
    __swig_setmethods__["frameFeatureDimension"] = _tmkpy.FeatureVectorFileHeader_frameFeatureDimension_set
    __swig_getmethods__["frameFeatureDimension"] = _tmkpy.FeatureVectorFileHeader_frameFeatureDimension_get
    if _newclass:
        frameFeatureDimension = _swig_property(_tmkpy.FeatureVectorFileHeader_frameFeatureDimension_get, _tmkpy.FeatureVectorFileHeader_frameFeatureDimension_set)
    __swig_setmethods__["frameFeatureCount"] = _tmkpy.FeatureVectorFileHeader_frameFeatureCount_set
    __swig_getmethods__["frameFeatureCount"] = _tmkpy.FeatureVectorFileHeader_frameFeatureCount_get
    if _newclass:
        frameFeatureCount = _swig_property(_tmkpy.FeatureVectorFileHeader_frameFeatureCount_get, _tmkpy.FeatureVectorFileHeader_frameFeatureCount_set)

    def __init__(self):
        this = _tmkpy.new_FeatureVectorFileHeader()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tmkpy.delete_FeatureVectorFileHeader
    __del__ = lambda self: None
FeatureVectorFileHeader_swigregister = _tmkpy.FeatureVectorFileHeader_swigregister
FeatureVectorFileHeader_swigregister(FeatureVectorFileHeader)


def hashVideo(inputVideoFileName, ffmpegPath):
    return _tmkpy.hashVideo(inputVideoFileName, ffmpegPath)
hashVideo = _tmkpy.hashVideo

def createTMKFeatureVectors(framesPerSecond, frameFeatureCount, periods, fourierCoefficients, pureAverageFeature, cosFeatures, sinFeatures):
    return _tmkpy.createTMKFeatureVectors(framesPerSecond, frameFeatureCount, periods, fourierCoefficients, pureAverageFeature, cosFeatures, sinFeatures)
createTMKFeatureVectors = _tmkpy.createTMKFeatureVectors

def query(*args):
    return _tmkpy.query(*args)
query = _tmkpy.query

def _query_worker(needle, haystackFilenames, level2scores, start, end):
    return _tmkpy._query_worker(needle, haystackFilenames, level2scores, start, end)
_query_worker = _tmkpy._query_worker
# This file is compatible with both classic and new-style classes.


