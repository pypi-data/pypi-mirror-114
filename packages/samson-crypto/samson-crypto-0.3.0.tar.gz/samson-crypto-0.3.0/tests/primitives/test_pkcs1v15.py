from samson.padding.pkcs1v15_padding import PKCS1v15Padding
from samson.utilities.bytes import Bytes
import unittest

class PKCS1v15TestCase(unittest.TestCase):
    def test_gauntlet(self):
        for i in range(3):
            pkcs = PKCS1v15Padding(1024, block_type=i)

            for _ in range(10000):
                plaintext = Bytes.random(8)

                unpadded = pkcs.unpad(pkcs.pad(plaintext))

                if i == 0:
                    unpadded = unpadded.zfill(len(plaintext))

                self.assertEqual(unpadded, plaintext)



    def test_input_too_big(self):
        pkcs = PKCS1v15Padding(88)
        plaintext = Bytes.random(8)

        with self.assertRaises(AssertionError):
            pkcs.pad(plaintext)



    def test_nonzero_padding(self):
        pkcs = PKCS1v15Padding(1024)

        for _ in range(1000):
            padding = pkcs.pad(b'')

            self.assertEqual(0, padding[0])
            self.assertEqual(0, padding[-1])

            self.assertFalse(b'\x00' in padding[1:-1])



    # Extracted from RSA signed cert
    def test_block_type_1(self):
        pkcs = PKCS1v15Padding(2048, block_type=1)

        expected_padded = b'\x00\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00010\r\x06\t`\x86H\x01e\x03\x04\x02\x01\x05\x00\x04 f:\xf2\xac\x95\xe4\xfc>\x87\xd7\x89\xd0\xec\x82/Y]k\xe9\x87Q\\\xfam\x1a\xf8(v\xa2\xfb{\r'
        expected_unpadded = b'010\r\x06\t`\x86H\x01e\x03\x04\x02\x01\x05\x00\x04 f:\xf2\xac\x95\xe4\xfc>\x87\xd7\x89\xd0\xec\x82/Y]k\xe9\x87Q\\\xfam\x1a\xf8(v\xa2\xfb{\r'

        self.assertEqual(pkcs.unpad(expected_padded), expected_unpadded)
        self.assertEqual(pkcs.pad(expected_unpadded), expected_padded)



    def test_block_type_0(self):
        pkcs = PKCS1v15Padding(2048, block_type=0)

        expected_padded = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00hiya'
        expected_unpadded = b'hiya'

        self.assertEqual(pkcs.unpad(expected_padded), expected_unpadded)
        self.assertEqual(pkcs.pad(expected_unpadded), expected_padded)
