from samson.math.algebra.rings.integer_ring import ZZ
from samson.math.symbols import Symbol
from samson.public_key.ntru import NTRU
from samson.utilities.bytes import Bytes
import unittest

x = Symbol('x')
_ = ZZ[x]

# https://en.wikipedia.org/wiki/NTRUEncrypt
PARAM_SETS = [
    (167, 128, 3),
    (251, 128, 3),
    (347, 128, 3),
    (503, 128, 3)
]

class NTRUTestCase(unittest.TestCase):
    def test_gauntlet(self):
        for N, q, p in PARAM_SETS:
            print(N, q, p)
            for _ in range(3):
                ntru = NTRU(N=N, p=p, q=q)
                plaintext  = Bytes.random(8)
                ciphertext = ntru.encrypt(plaintext)

                self.assertEqual(ntru.decrypt(ciphertext).zfill(8), plaintext)


    # Tests generated manually using https://github.com/jkrauze/ntru
    # Commands generally of the form:
    # ./ntru.py gen N p q test_priv test_pub
    # echo -ne "<plaintext>" > test_msg
    # ./ntru.py -o enc test_pub.npz test_msg
    # ./ntru.py enc test_pub.npz test_msg > test_enc
    # ./ntru.py dec test_priv.npz test_enc
    def _run_correctness_test(self, N, q, p, f_poly, f_p_poly, h_poly, plaintext, rand_poly, expected_ciphertext):
        ntru = NTRU(N=N, p=p, q=q)
        ntru.f_poly   = f_poly
        ntru.f_p_poly = f_p_poly
        ntru.h_poly   = h_poly

        ciphertext = ntru.encrypt(plaintext, rand_poly)

        self.assertEqual(ciphertext, expected_ciphertext)
        self.assertEqual(ntru.decrypt(ciphertext), plaintext)


    def test_vec0(self):
        N, q, p  = PARAM_SETS[0]

        f_poly   = x**164 + x**162 + x**160 - x**159 - x**157 + x**154 - x**151 - x**150 + x**149 + x**147 - x**146 - x**145 + x**144 - x**142 - x**141 + x**140 + x**139 + x**137 + x**134 - x**133 + x**132 - x**131 - x**130 + x**129 - x**126 - x**125 + x**123 - x**121 - x**120 - x**119 - x**117 - x**116 - x**115 + x**114 + x**112 - x**110 + x**109 - x**108 - x**107 - x**106 + x**105 + x**104 + x**103 - x**102 + x**101 - x**100 - x**99 + x**97 - x**95 + x**94 - x**92 - x**90 - x**89 - x**88 + x**87 - x**86 - x**84 - x**81 + x**80 + x**78 + x**75 + x**74 + x**73 + x**71 - x**69 + x**66 - x**64 + x**63 + x**61 + x**59 + x**58 - x**57 + x**56 - x**54 - x**53 - x**52 + x**48 - x**46 - x**44 + x**43 - x**42 - x**41 + x**37 + x**36 - x**35 + x**34 + x**33 + x**32 + x**30 - x**29 - x**28 - x**26 + x**25 - x**24 + x**23 - x**22 - x**21 + x**20 - x**19 + x**18 + x**17 - x**16 + x**14 - x**12 + x**10 + x**9 + x**7 + x**6 + x**2
        f_p_poly = -x**164 + x**163 - x**161 + x**160 + x**159 + x**157 - x**155 - x**154 - x**153 + x**151 + x**148 - x**147 - x**146 + x**145 - x**143 + x**142 - x**141 + x**140 - x**139 - x**137 + x**136 - x**134 + x**133 + x**131 - x**129 + x**128 + x**127 + x**125 - x**124 + x**123 - x**120 - x**119 - x**118 - x**117 + x**116 - x**113 + x**112 - x**111 - x**110 + x**109 + x**108 + x**106 - x**105 + x**102 + x**100 + x**99 + x**98 - x**97 - x**96 + x**95 - x**94 + x**91 + x**90 + x**89 - x**88 - x**87 - x**86 + x**85 + x**84 - x**83 + x**82 - x**81 + x**80 + x**79 + x**78 + x**77 - x**73 - x**71 + x**70 + x**69 - x**67 - x**63 - x**62 + x**61 - x**60 - x**58 + x**57 - x**55 + x**54 + x**53 + x**52 - x**51 + x**50 - x**49 - x**48 - x**44 + x**43 - x**42 - x**41 - x**40 + x**39 - x**37 + x**34 + x**31 + x**30 + x**28 - x**26 - x**24 + x**22 - x**21 - x**20 + x**19 - x**18 + x**17 + x**16 + x**14 + x**11 + x**9 + x**8 + x**6 + x**5 + x**4 + x**3 + x**2 + 1
        h_poly   = 2*x**166 + 44*x**165 - 50*x**164 + 38*x**163 - 32*x**162 - 32*x**161 - 60*x**160 - 62*x**159 + 3*x**158 + 29*x**157 + 58*x**156 + 5*x**155 + 23*x**154 - 24*x**153 - 20*x**152 - 38*x**151 - 26*x**150 - 6*x**149 + 64*x**148 + 25*x**147 + 41*x**146 - 25*x**145 - 15*x**144 + 39*x**143 - 17*x**142 - 9*x**141 - 55*x**140 - 50*x**139 + 64*x**138 + 33*x**137 - 9*x**136 + 43*x**135 - 12*x**134 + 9*x**133 - 55*x**132 + 52*x**131 - 16*x**130 - 57*x**129 + 41*x**128 - 57*x**127 - 26*x**126 + 51*x**125 + 17*x**124 - 55*x**123 - 47*x**122 + 29*x**121 - 46*x**120 + 58*x**119 + 2*x**118 + 18*x**117 + 13*x**116 - 28*x**115 - 19*x**114 - 9*x**113 + 13*x**112 + 33*x**111 + 40*x**110 + 8*x**109 + 21*x**108 + 6*x**107 + 7*x**106 - 26*x**105 - 19*x**104 - 13*x**103 - 53*x**102 - 51*x**101 + 29*x**100 - 46*x**99 + 64*x**98 - 27*x**97 + 27*x**96 - 63*x**95 - 24*x**94 - 4*x**93 + 29*x**92 - 55*x**91 + 55*x**90 - 5*x**89 - 7*x**88 - 48*x**87 + 18*x**86 - 20*x**85 - 38*x**84 - 44*x**83 + 27*x**82 + 23*x**81 - 11*x**80 + 11*x**79 + 21*x**78 + 54*x**77 - 63*x**76 + 4*x**75 + 49*x**74 - 35*x**73 - 5*x**72 - 27*x**71 - 3*x**70 + 13*x**69 - 62*x**68 + 61*x**67 + 28*x**66 + 41*x**65 - 6*x**64 - 28*x**63 - 55*x**62 - 8*x**61 - 24*x**60 - 36*x**59 - 47*x**58 - 29*x**57 - 19*x**56 + 54*x**55 + 54*x**54 - 39*x**53 + 30*x**52 - 11*x**51 + 20*x**50 + 44*x**49 + 25*x**48 + 37*x**47 - 7*x**46 + 30*x**45 - 34*x**44 - 28*x**43 - 8*x**42 + x**41 + 49*x**40 - 47*x**39 - 40*x**38 - 63*x**37 - 55*x**36 - 51*x**35 - 31*x**34 - 33*x**33 - 30*x**32 - 23*x**31 + 21*x**30 - 51*x**29 - 10*x**28 - 13*x**27 - 37*x**26 - 20*x**25 + 54*x**24 + 54*x**23 - 44*x**22 - 25*x**21 - 57*x**20 + 26*x**19 + 58*x**18 + 44*x**17 + 35*x**16 + 46*x**15 + 24*x**14 - 59*x**13 - 39*x**12 + 17*x**11 + 49*x**10 - 17*x**9 - 11*x**8 - 33*x**7 - 29*x**6 + 53*x**5 - 44*x**4 - 25*x**3 - 62*x**2 + 29*x + 57

        plaintext           = Bytes(b'hiya\n')
        rand_poly           = x**160 + x**151 - x**139 + x**135 + x**129 - x**124 + x**123 - x**120 + x**119 - x**117 + x**102 + x**80 - x**58 - x**56 - x**52 - x**48 - x**32 - x**29 + x**13 - x**10 + x**2 + x
        expected_ciphertext = Bytes(b'\x0f\xdc!\x11&\x08 \xdf<\xf6\x0e\x13\xf6\xc8\xed\xd6\x19\xea\xc7\xc5)\xcc\xfd\xc5\xf0\xc7\x1c\xfb\xcb+>\x0c7\'\xe6\x1b\xe7\xff\xe43\xeb\xc9 \x1f\x17\xe07\xc4\x1e\x13\xd1\xd9\xc6(\t\xfd\xe8\xc3\xf2\xdc\n%\xdf<;"\xd7\xe5836\xf1\xf7\r\x0c\xf6\xea\xd0\xc1-/\x1e\xea>\xdb\x1b\xcc\'\xee\x1f4\xdf\xcf\xd0%<\xdf\x19\xc2\x12\xe8\x06\xf3\xee-\xfe.\xd1\xc8\x08\r\xef\xdd\xd9?\xcd\x1f\xcb\xeb5\xd55\xf4\xf4\x19\xdc\xef\xd9\xda\xc2,\xc6&&@\x13\x1c\x1653\xd3%\x1e\x11\xfd6\xe0\xca\xfc\xc2)"\t\x12\x16\xd5\x07\xc3\x14\xfe\x01\xde\xe93\xf4\x1d\'')

        self._run_correctness_test(N, q, p, f_poly, f_p_poly, h_poly, plaintext, rand_poly, expected_ciphertext)


    def test_vec1(self):
        N, q, p  = PARAM_SETS[1]

        f_poly   = x**249 - x**245 - x**244 - x**242 + x**240 - x**239 - x**237 + x**236 - x**235 - x**234 - x**232 - x**231 + x**228 + x**227 + x**226 + x**221 + x**219 - x**216 + x**213 + x**211 - x**209 + x**208 + x**207 + x**206 - x**202 - x**195 - x**194 - x**191 + x**190 + x**189 - x**188 - x**187 - x**185 + x**184 - x**183 + x**181 + x**180 - x**179 + x**178 + x**177 - x**176 - x**175 - x**174 + x**173 - x**171 + x**169 - x**168 + x**165 - x**164 - x**163 + x**162 - x**161 + x**160 + x**159 - x**158 - x**157 - x**156 - x**154 - x**153 - x**152 - x**151 + x**148 + x**147 + x**146 + x**145 - x**144 + x**140 + x**139 - x**138 + x**134 - x**133 - x**132 - x**131 + x**130 + x**126 - x**125 - x**124 - x**123 + x**122 - x**121 - x**119 + x**118 + x**117 - x**114 - x**113 - x**112 - x**111 - x**110 - x**109 - x**108 - x**107 - x**106 + x**105 + x**104 - x**103 - x**102 - x**101 + x**99 + x**98 + x**95 - x**94 + x**92 + x**88 - x**87 - x**86 + x**84 + x**83 - x**82 + x**81 - x**79 - x**78 + x**77 + x**76 + x**75 + x**72 - x**71 + x**70 - x**68 - x**67 - x**65 + x**63 + x**62 - x**61 + x**58 + x**57 - x**53 + x**52 - x**50 - x**49 + x**48 - x**47 + x**45 + x**44 + x**43 + x**42 + x**41 + x**40 - x**39 + x**38 + x**37 + x**35 - x**34 + x**33 - x**32 + x**31 + x**30 + x**29 + x**26 - x**25 + x**23 + x**22 + x**21 + x**18 - x**17 + x**16 - x**15 - x**13 + x**10 + x**9 - x**6 - x**5 + x**4 + x**3 + x**2 - x
        f_p_poly = x**250 + x**247 + x**246 + x**245 + x**244 + x**243 + x**242 + x**241 - x**237 + x**236 - x**235 + x**233 + x**231 - x**230 - x**229 + x**228 + x**227 + x**226 + x**225 - x**224 + x**223 - x**222 - x**221 + x**220 - x**218 + x**216 - x**215 + x**214 + x**213 + x**212 + x**211 + x**209 - x**207 + x**205 + x**203 - x**202 + x**200 - x**199 + x**198 - x**197 + x**195 - x**194 + x**192 - x**189 + x**188 + x**187 + x**185 + x**183 - x**181 + x**180 + x**179 + x**178 - x**176 - x**175 - x**174 - x**173 - x**172 + x**171 - x**170 + x**168 - x**167 - x**166 - x**165 + x**164 + x**163 + x**161 + x**160 - x**159 - x**158 + x**157 + x**156 + x**155 + x**154 - x**153 - x**152 + x**150 - x**148 - x**147 + x**145 - x**144 - x**143 - x**142 + x**141 + x**140 - x**138 - x**137 + x**136 + x**135 - x**134 - x**133 + x**132 + x**131 + x**130 + x**129 + x**128 + x**127 + x**126 + x**125 - x**122 + x**119 + x**118 + x**116 + x**114 - x**113 + x**112 - x**111 - x**110 - x**109 + x**107 + x**106 - x**105 + x**103 + x**102 + x**101 - x**100 + x**99 - x**98 + x**97 + x**96 - x**93 - x**92 - x**91 + x**90 + x**89 + x**88 - x**86 + x**85 + x**84 - x**83 + x**82 + x**79 + x**78 - x**77 + x**76 + x**75 - x**74 + x**73 - x**72 + x**71 - x**70 + x**68 - x**66 - x**65 - x**64 + x**62 - x**61 - x**60 + x**57 + x**56 + x**54 + x**53 + x**52 - x**51 + x**49 + x**48 + x**47 - x**46 + x**44 + x**43 - x**42 - x**41 - x**39 - x**38 + x**37 + x**36 - x**35 - x**34 - x**32 - x**31 + x**29 + x**28 + x**27 - x**25 - x**24 - x**23 + x**19 + x**18 - x**17 - x**15 + x**14 - x**12 + x**11 + x**10 - x**9 - x**8 + x**7 + x**6 + x**5 + x**3 - x**2 - 1
        h_poly   = 2*x**250 + 4*x**249 + 61*x**248 - 48*x**247 + 2*x**246 - 39*x**245 + 40*x**244 + 32*x**243 - 40*x**242 - 41*x**241 - 51*x**240 + 38*x**239 + 19*x**238 - 5*x**237 - 9*x**236 + 59*x**235 - 28*x**234 + 36*x**233 + 11*x**232 - 11*x**231 - 4*x**230 - 17*x**229 + 62*x**228 + 11*x**227 + 21*x**226 - 9*x**225 - 24*x**224 + 37*x**223 + 53*x**222 - 27*x**221 + 47*x**220 - 46*x**219 - 23*x**218 + 55*x**217 - 61*x**216 - 12*x**215 - 13*x**214 + 26*x**213 + 35*x**212 - 41*x**211 - 31*x**210 + 2*x**209 + 55*x**208 + x**207 - 6*x**206 - 17*x**205 - 53*x**204 - 42*x**203 + x**202 - 35*x**201 + 3*x**200 - 33*x**199 + 4*x**198 + 27*x**197 - 13*x**196 + 27*x**195 + 15*x**194 - 12*x**193 - 9*x**192 - 18*x**191 - 24*x**190 + 26*x**189 - 60*x**188 + 55*x**187 - 63*x**186 - 40*x**185 + 25*x**184 + 30*x**183 - 17*x**182 - 37*x**181 + 57*x**180 + 61*x**179 + 36*x**178 + 33*x**177 - 31*x**176 - 57*x**175 + 47*x**174 - 48*x**173 + 2*x**172 - 35*x**171 + 39*x**170 + 32*x**169 + 20*x**168 - 54*x**167 + 38*x**166 + 63*x**165 + 10*x**164 - 59*x**163 - 10*x**162 - 19*x**161 - 55*x**160 + 8*x**159 + 48*x**158 - 36*x**157 + 16*x**156 + 30*x**155 - 63*x**154 - 4*x**153 + 59*x**152 + 61*x**151 - 33*x**150 + 51*x**149 - 9*x**148 + 2*x**147 - 31*x**146 + 37*x**145 + 35*x**144 - 26*x**143 + 63*x**142 - 49*x**141 + 3*x**140 + 33*x**139 - 36*x**138 + x**137 + 49*x**136 + 35*x**135 - x**134 + 50*x**133 - 36*x**132 + 40*x**131 - 24*x**130 + 4*x**129 + 63*x**128 + 54*x**127 - 11*x**126 + 60*x**125 + 44*x**124 + 29*x**123 + 50*x**122 + 8*x**121 - 24*x**120 - 2*x**119 - 50*x**118 + 5*x**117 + 33*x**116 + 18*x**115 - 13*x**114 + 62*x**113 - 59*x**112 + 4*x**111 - 25*x**110 + 52*x**109 - 51*x**108 + 59*x**107 - 37*x**106 + 52*x**105 - 49*x**104 + 59*x**103 + 27*x**102 + 60*x**101 + 38*x**100 + 11*x**99 + 48*x**98 + 50*x**97 - 28*x**96 - 55*x**95 + 16*x**94 - 58*x**93 + 12*x**92 - 44*x**91 - 10*x**90 + 27*x**89 - 19*x**87 + 18*x**86 - 21*x**85 - 21*x**84 - 19*x**83 + 34*x**82 - 37*x**81 + 7*x**80 - 2*x**79 - x**78 - 47*x**77 - 15*x**76 + 35*x**75 - 61*x**74 - 23*x**73 + 4*x**72 + 47*x**71 - x**70 - 47*x**69 + 56*x**68 + 61*x**67 - 42*x**66 - 52*x**65 - 63*x**64 + 27*x**63 - 49*x**62 + 44*x**61 - 14*x**60 + 17*x**59 + 64*x**58 - 52*x**57 - 35*x**56 - 36*x**55 - 3*x**54 - 40*x**53 + 49*x**52 - 53*x**51 + 43*x**50 - 6*x**49 + 44*x**48 - 45*x**47 + 46*x**46 + 39*x**45 + 56*x**44 - 11*x**43 - 34*x**42 - 53*x**41 - 12*x**40 - 63*x**39 - 53*x**38 - 57*x**37 + 27*x**36 - 54*x**35 - 60*x**34 + 59*x**33 - 42*x**32 - 45*x**31 + 16*x**30 + 2*x**29 + 7*x**28 - 44*x**27 - 6*x**26 - 47*x**25 + 58*x**24 - 50*x**23 - 49*x**22 - 35*x**21 + 38*x**20 + 42*x**19 - 54*x**18 + 19*x**17 + 49*x**16 - 61*x**15 - 21*x**14 + 33*x**13 + 18*x**11 + 24*x**10 - 51*x**9 + 57*x**8 + 16*x**7 + 19*x**6 + 16*x**5 + 14*x**4 + 53*x**3 + 29*x**2 + 5*x + 35

        plaintext           = Bytes(b'\xb6\x9f,\xb6\x1f\x85$\xc5\xddF\x15\xec\xec>\ts')
        rand_poly           = x**242 - x**215 + x**184 + x**171 + x**166 - x**165 + x**164 + x**158 - x**157 - x**134 - x**132 - x**119 + x**109 + x**108 - x**104 + x**98 - x**90 + x**88 - x**84 + x**61 - x**55 - x**45
        expected_ciphertext = Bytes(b'<\r\xec;\xc7\xc5*\x13\xd1\x0b\x05\xdc\x04+\xe6\xcd\x01\x1a\xc5\xc6\x11\xd97\xea\x1d8\x08\xee\xcd\x13\x1e\x11"0\xfb\x13\xde\xea\xd64<\xff?\xf0\xcc=+\xf5\x05\xfc7\xd1\xc7\xf4\x1f\xf5\xee;*3&5\xd8\xf2\x18\xd70\x18\xf0\xca\xee\xd2\x0c\xff\x1a%.\x08\x02\x11\'\xe3\xde\xf2\x07\xf03%0\x08:\xe9\xdb4\x13@\xe6\t);\xe0\x01)\x073"\xd4\xcc,\x073\xce?;\xf2\xf6\x15\xda\xf4\xfb"\x08\x1c=\xd8\xd1-=\x1c\xff=\x12\xdb*\xd2\x07\xd7$\xe0\x00\xe50\xe5\x0b=\xcf\xd5\xec\xd6\xcf4\xfc\xdf\x00\xce\x14*\xf8\x16\xc3\x0f\xee;:\xd2\xc2/\x0b/\xde\x17\x04\x15\xfe>!\xdd\xd6\xf9\x1f\xfd.7\xcd\x12\x11\x1c9\xf6\x07\x06\xf15\xfe3(\xc6\xe2<\xd7\x05.38\xec\xcd\xc4\xf1:\xec\xcb\xd4\xd8;"\x04\xc3\xdf\x02\x15\xf7\xc3\xe8\xea\xfe\xfc\xdb\xd9\xfd/\xed\x1d\xf4\xd2\xc1\xfb-\x11\xc4\xe6\x1f\x12\xe3?\x18\x00>\xfc\xf0\xc7\x03')

        self._run_correctness_test(N, q, p, f_poly, f_p_poly, h_poly, plaintext, rand_poly, expected_ciphertext)


    def test_vec2(self):
        N, q, p  = PARAM_SETS[2]

        f_poly   = -x**346 + x**345 + x**344 + x**339 - x**337 + x**336 + x**334 + x**333 + x**332 + x**331 - x**329 + x**328 + x**323 - x**321 + x**320 - x**319 + x**318 + x**316 - x**314 - x**313 + x**311 - x**310 + x**309 - x**307 - x**306 + x**304 + x**303 - x**302 - x**300 - x**299 - x**298 + x**297 - x**296 - x**294 - x**292 + x**291 - x**290 + x**289 - x**287 - x**286 + x**283 - x**282 + x**280 + x**279 - x**278 - x**276 - x**275 + x**272 - x**271 + x**270 - x**269 + x**268 + x**267 - x**266 + x**265 - x**264 - x**263 + x**261 + x**258 + x**257 - x**255 - x**254 + x**251 + x**250 - x**249 - x**248 + x**247 + x**246 + x**245 + x**244 + x**243 - x**241 + x**239 + x**237 + x**234 - x**233 + x**232 + x**230 - x**227 + x**225 + x**222 - x**221 - x**219 - x**217 + x**216 + x**215 + x**213 + x**212 - x**211 - x**210 + x**207 + x**204 - x**203 + x**202 + x**201 - x**200 + x**199 - x**196 - x**195 - x**194 + x**192 + x**190 + x**188 - x**186 + x**183 - x**182 - x**181 + x**180 + x**177 - x**175 - x**174 + x**171 - x**170 - x**169 - x**168 - x**167 + x**166 - x**165 - x**164 - x**163 + x**162 - x**161 + x**160 + x**159 - x**151 + x**150 + x**149 + x**148 + x**146 - x**142 + x**141 - x**139 + x**137 - x**136 - x**135 - x**134 + x**132 + x**131 + x**130 - x**129 - x**121 + x**120 - x**119 + x**117 - x**116 - x**114 - x**111 + x**110 - x**109 - x**104 - x**101 + x**100 - x**99 - x**98 - x**97 + x**96 + x**94 - x**93 - x**92 - x**90 - x**89 - x**87 - x**86 - x**85 + x**83 - x**82 - x**81 + x**80 - x**79 - x**77 - x**76 + x**75 + x**74 - x**73 + x**72 - x**71 - x**70 - x**69 - x**68 - x**67 + x**66 + x**65 - x**64 + x**61 + x**60 + x**59 - x**58 + x**57 - x**56 - x**54 - x**53 - x**52 + x**51 + x**50 - x**48 + x**47 + x**46 + x**45 - x**43 - x**41 + x**40 - x**39 + x**38 - x**36 + x**35 + x**34 - x**33 + x**32 + x**30 + x**29 + x**27 - x**26 + x**24 + x**21 + x**19 - x**18 + x**17 + x**16 - x**15 - x**14 - x**12 + x**11 + x**10 + x**8 - x**6 + x**5 + x**4 - x**3 + 1
        f_p_poly = x**346 - x**345 + x**344 + x**343 + x**342 - x**341 - x**340 - x**338 + x**336 + x**334 - x**332 - x**331 + x**330 - x**328 - x**326 + x**324 - x**323 - x**322 + x**321 + x**320 - x**319 - x**318 + x**316 + x**315 - x**312 + x**310 + x**309 - x**307 + x**305 + x**304 + x**303 - x**302 - x**300 - x**298 - x**296 - x**295 + x**294 - x**293 - x**292 - x**291 + x**288 - x**287 + x**286 + x**285 + x**283 - x**282 + x**281 - x**280 + x**279 + x**278 + x**277 + x**276 - x**275 + x**274 + x**268 - x**265 - x**264 - x**262 + x**260 + x**259 - x**257 - x**255 - x**254 - x**252 - x**251 + x**250 + x**249 + x**246 - x**244 + x**243 + x**241 + x**240 - x**239 + x**238 + x**237 + x**234 - x**233 + x**232 + x**230 + x**227 - x**224 + x**221 + x**220 + x**219 - x**218 - x**217 + x**215 + x**214 - x**213 + x**212 - x**211 - x**208 + x**206 - x**204 + x**202 - x**194 + x**192 + x**191 + x**190 - x**189 + x**188 + x**186 + x**185 - x**184 - x**182 + x**181 + x**180 + x**177 - x**175 + x**174 + x**173 - x**169 - x**167 + x**166 + x**165 + x**164 - x**160 + x**159 - x**156 + x**155 - x**154 + x**150 - x**148 + x**146 - x**145 - x**144 - x**143 + x**140 - x**138 - x**137 + x**136 - x**135 - x**134 - x**133 + x**132 - x**130 + x**128 + x**127 + x**126 + x**124 - x**122 + x**121 + x**119 + x**118 + x**117 - x**114 - x**111 - x**110 - x**109 + x**106 + x**104 + x**103 - x**102 - x**101 - x**100 + x**99 + x**97 + x**95 - x**93 + x**92 - x**90 + x**87 + x**86 - x**84 + x**82 + x**81 - x**80 + x**79 - x**77 - x**76 + x**75 - x**73 + x**72 - x**71 - x**70 - x**69 - x**64 - x**62 + x**60 + x**58 + x**57 - x**56 - x**55 - x**54 + x**51 + x**50 - x**48 - x**47 - x**46 - x**44 - x**43 - x**42 + x**41 - x**40 + x**37 - x**36 - x**35 - x**33 - x**31 + x**30 - x**29 - x**27 + x**26 - x**25 + x**23 + x**22 + x**20 + x**19 + x**17 - x**15 + x**14 - x**13 + x**11 - x**10 - x**9 - x**8 - x**7 + x**6 + x**3 + x**2 + x
        h_poly   = -38*x**346 - 33*x**344 + x**343 + 38*x**342 + 21*x**341 + 10*x**340 - x**339 - 44*x**338 - 50*x**337 - 55*x**336 + 32*x**335 + 8*x**334 - 55*x**333 - 17*x**332 + 33*x**331 + 2*x**330 - 54*x**329 + 10*x**328 - 49*x**327 - 45*x**326 + 54*x**325 + 31*x**324 + 38*x**323 + x**322 + 11*x**321 + 24*x**320 + 56*x**319 - 20*x**318 + 29*x**317 + 14*x**316 + 38*x**315 - 39*x**314 + 42*x**313 - 49*x**312 - 44*x**311 + 60*x**310 + 6*x**309 - 35*x**308 + 26*x**307 + 28*x**306 - 23*x**305 + 28*x**304 - 3*x**303 - 53*x**302 + 35*x**301 + 53*x**300 + 41*x**299 + 28*x**298 + 51*x**297 - 29*x**296 + 2*x**295 - 37*x**294 + 45*x**293 - 41*x**292 - 62*x**291 - 8*x**290 + 62*x**289 - 52*x**288 + 41*x**287 + 17*x**286 - 8*x**285 + 33*x**284 - 37*x**283 - 32*x**282 - 17*x**281 + 29*x**280 + 62*x**279 + 41*x**278 + 21*x**277 + 37*x**276 - 21*x**275 + 8*x**274 + 5*x**273 + 39*x**272 - 45*x**271 - 62*x**270 + 27*x**269 + 64*x**268 + 32*x**267 - 31*x**266 + 33*x**265 + 10*x**264 + 47*x**263 + 8*x**262 + 58*x**261 - 2*x**260 + 41*x**259 - 46*x**258 - 14*x**257 - 43*x**256 + 37*x**255 + 34*x**254 + 12*x**253 + 47*x**252 - 53*x**251 - 2*x**250 - 59*x**249 + 40*x**248 - 3*x**247 + 17*x**246 - 19*x**245 + 53*x**244 + 59*x**243 + 29*x**242 + 56*x**241 + 55*x**240 - 25*x**239 + 29*x**238 + 62*x**237 - 31*x**236 - 43*x**235 + 58*x**234 - 34*x**233 - 45*x**232 - 56*x**231 + 35*x**230 - 29*x**229 - 47*x**228 - 56*x**227 + 7*x**226 - 14*x**225 - 23*x**224 - 31*x**223 + 44*x**222 - 16*x**221 - 60*x**220 + 57*x**219 + 58*x**218 - 10*x**217 + 14*x**216 + 60*x**215 - 39*x**214 - 15*x**213 - 18*x**212 + 38*x**211 - 19*x**210 - 19*x**209 + 59*x**208 + 60*x**207 + 40*x**206 + 16*x**205 + 35*x**204 - 53*x**203 - 20*x**202 - 54*x**201 + 19*x**200 - 45*x**199 - 23*x**198 - 18*x**197 + 11*x**196 + 18*x**195 + 9*x**194 - x**193 - 50*x**192 + 52*x**191 + 38*x**190 - 25*x**189 + 10*x**188 - 24*x**187 + 16*x**186 + 51*x**185 - 12*x**184 + 11*x**183 + 4*x**182 + 13*x**181 + 40*x**180 + 60*x**179 + 45*x**178 - 6*x**177 - 10*x**176 + 16*x**175 + 50*x**174 + 24*x**173 - 13*x**172 + 54*x**171 - 53*x**170 - 44*x**169 + 45*x**168 - 62*x**167 - 4*x**166 + 64*x**165 - 34*x**164 - 28*x**163 - 55*x**162 - 53*x**161 + 48*x**160 - 8*x**159 - 31*x**158 - 56*x**157 - 44*x**156 + 42*x**155 - 11*x**154 + 12*x**153 + 11*x**152 + 44*x**151 + 29*x**150 + 31*x**149 + 33*x**147 - 10*x**146 - 56*x**145 - 47*x**144 - 63*x**143 + 41*x**142 - 18*x**141 - 19*x**140 + 43*x**139 - 29*x**138 + 21*x**137 - 33*x**136 - 22*x**135 - 42*x**134 + 43*x**133 + 55*x**132 - 24*x**131 - 6*x**130 + 18*x**129 + 19*x**128 + 56*x**127 + 4*x**126 - 39*x**125 - 52*x**124 - 12*x**123 + 4*x**122 + 36*x**121 - 43*x**120 + 21*x**119 + 28*x**118 + 27*x**117 - 29*x**116 - 51*x**115 - 30*x**114 - 12*x**113 + 27*x**112 - 33*x**111 - 5*x**110 + 10*x**109 - 29*x**108 - 17*x**107 - 45*x**106 + 25*x**105 + 27*x**104 - 4*x**103 - 63*x**102 + 56*x**101 + 45*x**100 - 49*x**99 + 54*x**98 + 62*x**97 - 15*x**96 - 13*x**95 + x**94 - 5*x**93 - 21*x**92 - 31*x**91 - 13*x**90 - 34*x**89 + x**88 - 9*x**87 - 42*x**86 + 20*x**85 - 12*x**84 + 28*x**83 - 45*x**82 + 52*x**81 + 44*x**80 - 11*x**79 + 10*x**78 - 46*x**77 - 14*x**76 - 30*x**74 + 64*x**73 + 44*x**72 + 60*x**71 - 39*x**70 - 20*x**69 - 58*x**68 - 37*x**67 + 28*x**66 + 38*x**65 + 58*x**64 + 37*x**63 + 13*x**62 + 24*x**61 + 25*x**60 - 34*x**59 - 58*x**58 + 46*x**56 - 43*x**55 + 10*x**54 + 20*x**53 - 3*x**52 - 28*x**51 - 28*x**50 + 63*x**49 + 42*x**48 + 2*x**47 - 6*x**46 - 42*x**45 + 59*x**44 + 5*x**43 + 57*x**42 + 6*x**41 + 10*x**40 - 17*x**39 - 25*x**38 + 34*x**37 - 26*x**36 - 22*x**35 - x**34 + 23*x**33 - 46*x**32 - 23*x**31 - 33*x**30 - 30*x**29 - 35*x**28 + 35*x**27 + 11*x**26 + 26*x**25 - 58*x**24 - 2*x**23 - 50*x**22 - 61*x**21 + 58*x**20 + 17*x**19 - 62*x**18 - 58*x**17 + 18*x**16 - 41*x**15 + 60*x**14 + 31*x**13 - 47*x**12 - 34*x**11 - 8*x**10 - 43*x**9 - 33*x**8 - 34*x**7 - 16*x**6 + 9*x**5 + 63*x**4 - 55*x**3 - 50*x**2 + 12*x - 54

        plaintext           = Bytes(b'\xa4},\x0b8G\xb4\xa7\xc1\xa9\x95\t\xb4\xcf\x85P\xb6\x12\x92B\x1c\x9fW\n\xc0\xcem\x954J\xfcy')
        rand_poly           = x**339 - x**333 - x**317 - x**313 - x**305 + x**298 - x**242 + x**240 - x**235 - x**230 - x**216 + x**214 + x**207 + x**202 + x**194 + x**179 - x**164 - x**142 - x**107 + x**74 + x**67 + x**53
        expected_ciphertext = Bytes(b'\xc8\xfb\x1c\xfd/\x07\n\x0f4\xd2\x0c\xff\x1d\xda\xca %\xe3\x1e#\xd5\xff\x038\xf2\xfd\xf5-\xcb\xd2<,\xd8\x1e7\x16\xd3&\xe7\xc7\xcc\x10\x1a\xee\xe1\xed\xe9\xe0\x0b\xfe+\x19"\xdf\x18\x1e\xd2\x17\xf1\xc1\x1e0\xd1\xec\xf8\xec\x16\xfc$!\xcb\x14\xcf\xf6\xf85(\xc4#\xc2%\t"\xf0\xf3%\xee\x00\xed\x17\xc1\xfe\x0b\t#\xfb\xeb\x04\xed(\xcb\x17\xc2\xe8\xeb\xc1:\xed\xda\xec\x13 \x04\xeb\xce\xdd\x07\xc8\xf6"\xc3\x04\x0e\x10:\x0e\xed\x12\xf9<\x13\xe2\xea=\xcb\xd0\x11\xd6\xc9\x0e\xc7\x0b\x05\'\n\xd1\x11\xe4\xe9\xec\x008\x1a\xf1\xc5<\'#\xc7?6\x18\x058\x19\xfa\xfd6\xf1$;,\xfe. \xcc\x15\xf4\x10\xee\xd83;\x01\x17\xc4\xc3\x11\x18\xc11\xc5\xc2\xf3\xc4\x0e9\xcd\xd0\xd7\x01\xc4\xe9\xf6\xe1\xc9)\xd3\xd9\xc5\xc2\xe5:$.\x19\x17\x04\xe5\xf2!6\x1c\x13\xd5\xe68\xed\x1d\x13\xd19\x17\xd2-\x1b\xeb\xd4\xcb\xe2\xe2\xf1\xec\xe6\x07\xef\xe3\xd9\xcc\xde\xda\xc1\xea\xf7\xef95*<=:\x0f\x0e\x06!\xce\xf3\xd99\x0b\x12= \xc9\xfa\x02\xca\x10\xf9\x0e\xcb\t\xfe\x17\x1c\xc2\xcd\x12\xe7#@\xcd\xd7\x13\xc7@@\xe7$\xf1#\x03+\xd7\xc9\x00\x16\x007\x10\xcd5\xc9\xee\xf8\x08\xe4\xf1\x08$\xf20\xc9\xfd-\x0c\xf4\xca\x16>\xdf\xc6\x04\x12,\xfb\x11\x14\xf5%\x18\xd99.\xe1=\xea')

        self._run_correctness_test(N, q, p, f_poly, f_p_poly, h_poly, plaintext, rand_poly, expected_ciphertext)


    def test_vec3(self):
        N, q, p  = PARAM_SETS[3]

        f_poly   = -x**502 - x**501 + x**500 + x**498 - x**497 + x**496 + x**494 - x**493 - x**491 + x**490 - x**489 - x**487 - x**484 - x**483 + x**482 - x**480 + x**479 - x**478 - x**477 + x**476 - x**475 - x**474 + x**473 - x**472 - x**471 + x**470 - x**468 - x**466 + x**465 + x**463 - x**460 + x**459 + x**458 + x**457 - x**453 - x**451 + x**450 + x**449 - x**448 + x**446 - x**445 - x**444 + x**442 - x**441 + x**440 + x**439 - x**438 - x**435 - x**434 + x**433 - x**432 + x**431 - x**429 - x**427 + x**426 + x**425 + x**424 - x**423 + x**421 + x**420 + x**416 + x**414 + x**413 - x**411 - x**410 + x**409 + x**407 - x**406 - x**405 - x**404 + x**400 - x**399 - x**396 - x**392 + x**390 - x**389 + x**386 + x**385 + x**382 + x**380 + x**378 + x**374 + x**372 + x**371 + x**370 + x**369 + x**366 + x**365 + x**364 - x**363 - x**361 - x**356 - x**355 - x**353 + x**352 - x**350 + x**349 - x**348 - x**347 + x**345 - x**344 - x**343 - x**342 - x**340 - x**337 - x**336 + x**334 - x**333 - x**331 - x**330 + x**329 + x**328 + x**327 - x**324 + x**323 - x**322 - x**319 + x**318 + x**317 - x**316 - x**315 + x**314 + x**313 + x**311 + x**310 + x**309 - x**306 - x**305 - x**303 + x**302 + x**300 + x**299 + x**296 + x**294 + x**293 - x**292 - x**291 - x**290 + x**289 + x**287 + x**286 + x**285 - x**284 + x**282 + x**280 - x**277 - x**276 - x**275 + x**274 - x**273 + x**271 + x**267 + x**266 - x**265 - x**264 - x**262 - x**261 - x**260 + x**259 + x**258 + x**255 - x**253 - x**251 + x**250 + x**249 + x**248 + x**247 - x**246 - x**245 + x**244 + x**243 - x**240 + x**239 - x**236 - x**235 - x**233 - x**232 + x**231 - x**229 - x**227 + x**226 + x**225 + x**224 + x**223 + x**222 - x**221 - x**220 + x**219 + x**215 - x**214 - x**213 + x**209 - x**208 - x**207 + x**205 - x**203 + x**201 + x**200 + x**198 - x**196 + x**195 + x**193 - x**192 + x**191 - x**190 + x**189 - x**186 + x**185 + x**183 + x**181 + x**179 + x**178 + x**177 + x**176 - x**175 - x**173 - x**172 + x**171 - x**169 - x**168 - x**167 - x**165 - x**163 + x**162 + x**160 - x**159 - x**158 + x**157 - x**155 + x**154 - x**153 + x**152 + x**151 + x**150 - x**149 + x**147 + x**145 + x**144 - x**143 - x**142 - x**139 + x**138 - x**136 - x**134 - x**133 + x**131 + x**130 + x**129 + x**128 + x**127 - x**126 + x**123 + x**118 - x**117 + x**116 - x**114 + x**113 - x**112 - x**109 - x**107 - x**106 - x**103 + x**102 + x**101 - x**100 + x**99 - x**98 + x**97 + x**96 - x**95 - x**94 - x**93 - x**87 + x**86 + x**84 + x**81 - x**80 + x**79 - x**78 + x**77 + x**76 - x**75 + x**74 + x**71 - x**70 - x**68 - x**67 + x**66 + x**64 + x**63 + x**62 - x**61 + x**60 - x**59 - x**58 - x**57 - x**54 - x**53 + x**51 + x**50 - x**48 - x**47 - x**45 - x**44 - x**41 + x**38 - x**37 + x**36 - x**35 + x**33 - x**31 + x**29 - x**28 + x**27 - x**26 - x**25 - x**23 - x**22 + x**21 + x**20 - x**17 - x**13 + x**12 + x**10 + x**8 + x**7 + x**6 - x**5 - x**4 + x**3 - x**2 - x - 1
        f_p_poly = -x**502 + x**501 + x**500 + x**497 - x**493 + x**492 - x**491 - x**489 - x**488 + x**487 - x**485 - x**484 - x**481 - x**480 - x**479 - x**478 - x**477 - x**476 - x**474 - x**472 - x**468 + x**467 - x**466 - x**464 - x**463 - x**460 + x**459 - x**457 - x**456 + x**455 + x**452 + x**451 - x**450 + x**449 + x**448 + x**446 + x**445 - x**444 - x**443 + x**442 - x**441 - x**439 - x**437 + x**436 + x**433 + x**432 + x**431 + x**430 - x**429 - x**424 + x**422 + x**421 - x**417 + x**416 - x**415 + x**413 - x**412 - x**411 + x**410 - x**407 - x**406 + x**405 + x**404 + x**403 - x**402 - x**401 - x**399 - x**396 + x**393 + x**391 + x**389 - x**387 - x**385 - x**382 - x**381 + x**380 - x**377 - x**376 - x**375 - x**373 + x**371 + x**368 - x**367 - x**366 - x**365 - x**364 + x**363 - x**361 - x**360 + x**359 - x**358 - x**357 - x**355 - x**354 + x**353 + x**350 + x**349 - x**347 + x**346 + x**345 + x**344 - x**343 - x**342 + x**341 + x**339 + x**338 - x**337 + x**335 - x**334 - x**333 + x**331 + x**329 + x**328 + x**327 - x**325 + x**324 - x**322 + x**321 + x**317 + x**316 - x**315 - x**314 + x**313 + x**312 + x**311 + x**310 - x**307 - x**303 - x**300 - x**299 + x**298 - x**296 - x**295 + x**294 - x**293 + x**291 + x**289 - x**286 + x**284 + x**283 + x**282 - x**281 + x**280 + x**276 - x**273 - x**269 + x**268 + x**266 - x**265 - x**264 - x**261 + x**260 + x**257 + x**256 - x**255 - x**252 - x**251 - x**250 + x**249 + x**247 + x**245 - x**243 - x**242 + x**240 + x**239 - x**238 - x**237 + x**233 - x**231 - x**230 + x**229 + x**228 - x**227 - x**224 - x**223 - x**221 + x**219 + x**218 + x**217 - x**216 + x**214 + x**213 + x**212 - x**210 + x**209 - x**208 + x**206 - x**205 - x**203 + x**202 - x**201 + x**200 + x**199 + x**198 - x**197 + x**196 + x**195 + x**194 - x**193 + x**192 - x**191 - x**190 + x**189 + x**188 - x**187 + x**184 - x**183 - x**182 - x**181 - x**179 + x**178 + x**176 - x**175 - x**171 - x**170 + x**169 - x**167 - x**166 + x**165 - x**164 + x**163 + x**161 - x**160 + x**159 - x**158 - x**157 - x**156 - x**155 - x**154 + x**151 - x**150 - x**149 + x**148 - x**146 + x**145 + x**142 + x**138 + x**137 - x**136 - x**135 + x**134 + x**133 - x**131 - x**130 - x**129 - x**128 - x**126 - x**124 - x**121 + x**119 - x**118 - x**116 - x**115 - x**113 + x**112 - x**111 - x**110 + x**109 - x**108 - x**106 - x**103 - x**101 - x**100 - x**96 - x**95 + x**94 - x**93 - x**92 + x**90 - x**84 + x**83 + x**82 - x**80 + x**79 - x**77 + x**76 - x**73 - x**71 + x**70 + x**69 - x**68 + x**66 + x**65 + x**62 + x**61 - x**60 + x**59 - x**57 + x**56 + x**54 + x**53 - x**52 - x**49 + x**48 + x**47 - x**46 - x**45 + x**43 - x**42 - x**41 + x**40 - x**38 + x**36 + x**35 + x**34 - x**33 + x**31 - x**28 + x**27 + x**25 + x**24 + x**23 + x**22 - x**21 + x**19 - x**18 - x**17 + x**15 + x**14 - x**12 + x**6 - x**5 - x**4 - x + 1
        h_poly   = -54*x**502 + 19*x**501 + 42*x**500 + 2*x**499 - 16*x**498 - 10*x**497 + 28*x**496 + 11*x**495 + 37*x**494 + 50*x**493 + 60*x**492 + 20*x**491 + 30*x**490 + 48*x**489 + 12*x**488 - 43*x**487 + 28*x**486 + 31*x**485 + 4*x**484 - 23*x**483 - 12*x**482 + 61*x**481 + 45*x**480 - 55*x**479 + 33*x**478 + 62*x**477 - 30*x**476 + 16*x**475 + 8*x**474 + 17*x**473 + 22*x**472 - 8*x**471 + 39*x**470 - 60*x**469 - 58*x**468 - 9*x**467 + 9*x**466 + 20*x**465 + 45*x**464 - 55*x**463 - 8*x**462 + 58*x**461 + 28*x**460 - 47*x**459 - 46*x**458 + 55*x**457 - 49*x**456 + 38*x**455 - 44*x**454 + 26*x**453 - 39*x**452 + 35*x**451 + 63*x**450 - 46*x**449 + 23*x**448 + 8*x**447 - 16*x**446 - 29*x**445 - 19*x**444 - 50*x**443 - 60*x**442 - 41*x**441 + 36*x**440 - 51*x**439 + 19*x**438 + 63*x**437 + 3*x**436 + 25*x**435 + 41*x**434 - 32*x**433 + 49*x**432 + 41*x**431 + 48*x**430 - 14*x**429 + 25*x**428 + 29*x**427 - 34*x**426 - 12*x**425 - 12*x**424 + 44*x**423 + 40*x**422 + 25*x**421 - 25*x**420 - 29*x**419 - 63*x**418 - 37*x**417 + 42*x**416 + 6*x**414 - 30*x**413 - 22*x**412 - 59*x**411 + 23*x**410 - 44*x**409 - 56*x**408 - 17*x**407 - 53*x**406 + 62*x**405 + 13*x**404 + 23*x**403 - 5*x**402 + 21*x**401 - 20*x**400 + 16*x**399 + 34*x**398 - 8*x**397 - 52*x**396 + 17*x**395 - 2*x**394 + 21*x**393 - 25*x**392 + 26*x**391 - 51*x**390 + 46*x**389 + 31*x**388 + 2*x**387 + 52*x**386 + 52*x**385 + 44*x**384 - 3*x**383 - 28*x**382 - 14*x**381 - 44*x**380 + 40*x**379 + 60*x**378 - 22*x**377 - 21*x**376 + 5*x**375 - 19*x**374 - 60*x**373 - 16*x**372 + 32*x**371 + 18*x**370 + 36*x**369 - 35*x**368 - 44*x**367 - 18*x**366 + 61*x**365 - 28*x**364 - 32*x**363 - 43*x**362 + 58*x**361 - 49*x**360 - 40*x**359 + 62*x**358 + 30*x**357 - 35*x**356 + 41*x**355 + 13*x**353 + 62*x**352 + 28*x**351 + 32*x**350 - 30*x**349 - 55*x**348 + 11*x**347 - 54*x**346 - 15*x**345 - 18*x**344 + 46*x**343 - 16*x**342 + 38*x**341 + 49*x**340 - 55*x**339 + 16*x**338 + 17*x**337 - 52*x**336 - 8*x**335 + 63*x**334 - 53*x**333 + 39*x**332 + 30*x**331 - x**330 + 22*x**329 - 34*x**328 + 8*x**327 - 51*x**326 + 25*x**325 + 11*x**324 - 28*x**323 + 4*x**322 - 60*x**321 - 42*x**320 - 21*x**319 - 34*x**318 + 56*x**317 - 27*x**316 + 60*x**315 - 50*x**314 + 20*x**313 + 7*x**312 - 60*x**311 - 34*x**310 + 15*x**309 + 27*x**308 + 33*x**307 + 44*x**306 + 45*x**305 + 22*x**304 + 36*x**303 + 35*x**302 + 64*x**301 + 52*x**300 + 27*x**299 - 60*x**298 + 15*x**297 + 48*x**296 + 18*x**295 + 38*x**294 - 60*x**293 - 33*x**292 + 2*x**291 + 37*x**290 - 7*x**289 - 30*x**288 + 47*x**287 + 30*x**286 - 22*x**285 + 21*x**284 + 55*x**283 - 37*x**282 + 34*x**281 - 56*x**280 + 36*x**279 - 16*x**278 + 2*x**277 - 6*x**276 - 35*x**275 + 41*x**274 + 59*x**272 + 5*x**271 - 28*x**270 - 8*x**269 + 46*x**268 + x**267 + 9*x**266 - 7*x**265 - 40*x**264 + 23*x**263 - 58*x**261 + 51*x**260 + 41*x**259 + 18*x**258 - 35*x**257 - 45*x**256 - 20*x**255 - 47*x**254 - 61*x**253 - 38*x**252 - 20*x**251 + 8*x**250 + 50*x**249 - 7*x**248 + 30*x**247 - 33*x**246 - 60*x**245 + 15*x**244 - 33*x**243 + 56*x**242 - 9*x**241 - 8*x**240 - 52*x**239 - 3*x**238 - 10*x**237 - 47*x**236 - 10*x**235 - 8*x**234 + 45*x**233 - 22*x**232 - 48*x**231 + 24*x**230 - 4*x**229 + 14*x**228 + 26*x**227 + 30*x**226 + 6*x**225 - 15*x**224 + 60*x**223 + 43*x**222 + 22*x**221 - 48*x**220 + 40*x**219 - 30*x**218 - 10*x**217 + 9*x**216 - 29*x**215 + 41*x**214 - 28*x**213 + 27*x**212 + 62*x**211 + 41*x**210 + 39*x**209 + 33*x**208 + 20*x**207 + 17*x**206 + 18*x**205 - 13*x**204 + 5*x**203 + 13*x**202 + 23*x**201 + 48*x**200 + 15*x**199 + 37*x**198 - 57*x**197 - 48*x**196 + 6*x**195 + 52*x**193 - 40*x**192 - 29*x**191 + 21*x**190 + 8*x**189 - 15*x**188 - 27*x**187 - 57*x**186 - 4*x**185 + 29*x**184 + 56*x**183 - 32*x**182 + 6*x**181 - 13*x**180 - x**179 + 36*x**178 + 17*x**177 + 31*x**176 - 33*x**175 + 11*x**174 - 22*x**173 - 34*x**172 + 45*x**171 - 42*x**170 - 38*x**169 + 13*x**168 - 8*x**167 + 14*x**166 + 36*x**165 + 10*x**164 + 52*x**163 + 48*x**162 + x**161 + 22*x**160 + 7*x**159 - 15*x**158 - 36*x**157 - 32*x**156 - 53*x**155 - 17*x**154 + 49*x**153 - 52*x**152 - 29*x**151 - 20*x**150 + 35*x**149 + 19*x**148 + 32*x**147 - 26*x**146 + 31*x**145 + 5*x**144 + 14*x**143 - 6*x**142 + 19*x**141 - 28*x**140 - 39*x**139 + 63*x**138 + 11*x**137 + 34*x**136 - 9*x**135 + 54*x**134 + 17*x**133 + 8*x**132 + 17*x**131 + x**130 - 18*x**129 + 55*x**128 + 53*x**127 - 7*x**126 + 54*x**125 - 50*x**124 + 13*x**123 + 9*x**122 - 8*x**121 + 56*x**120 - 11*x**119 + 46*x**118 - 42*x**117 + 41*x**116 + 62*x**115 + 38*x**114 - 34*x**113 + 23*x**112 - 35*x**111 + 53*x**110 - 48*x**109 + 31*x**108 + 62*x**107 - 42*x**106 - 29*x**105 + 26*x**104 - 14*x**103 - 50*x**102 + 46*x**101 - 36*x**100 + 41*x**99 + 52*x**98 + 12*x**97 + 45*x**96 - 63*x**95 - 39*x**94 - 3*x**93 - 29*x**92 - 22*x**91 - 8*x**90 - 46*x**89 + 62*x**88 - 41*x**87 + 48*x**86 - 50*x**85 - 16*x**84 + 2*x**83 - 44*x**82 - 46*x**81 + 32*x**80 - 45*x**79 + 5*x**78 + 31*x**77 - 12*x**76 + 22*x**75 + 6*x**74 + x**73 + 46*x**72 - 57*x**71 + 40*x**70 + 55*x**69 + 9*x**68 - 35*x**67 - 54*x**66 - 8*x**65 - 26*x**64 - 59*x**63 + 29*x**62 - 50*x**61 - 54*x**60 - 32*x**59 + 38*x**58 - 36*x**57 + 38*x**56 + 28*x**55 + 29*x**54 + 39*x**53 + 12*x**52 + 20*x**51 - 30*x**50 + 38*x**49 - 30*x**48 + 5*x**47 + 37*x**46 - 34*x**45 - 55*x**44 + 17*x**43 + 14*x**42 + 9*x**41 - 57*x**40 - 60*x**39 + 30*x**38 - 49*x**37 + 15*x**36 - 45*x**35 - 16*x**34 - 12*x**33 + 3*x**32 + 56*x**31 + 43*x**30 - 26*x**29 + 30*x**28 + 4*x**27 + 38*x**26 + 45*x**25 + x**24 + 22*x**23 + 15*x**22 + 38*x**21 - 60*x**20 + 15*x**19 + 59*x**18 + 20*x**17 - 26*x**16 + 18*x**15 + 63*x**14 + 62*x**13 - 24*x**12 - 35*x**11 + 13*x**10 - 20*x**9 - 49*x**8 + 18*x**7 + 43*x**6 - 12*x**5 - 60*x**4 - 7*x**3 - 32*x**2 - 55*x - 53

        plaintext           = Bytes(b'\xbe\xdc\xa8\xe3\xc8.\xde]\xe6\xcf\\\x9byEh\xe3h\x15\xc5h1A\xbf\t\x17\xcemO\xde\xd9A\xb4\xc0\xa4\xe3>l\xb5V\xdc68\xb6&g\xa6\xd4j')
        rand_poly           = x**491 - x**482 - x**470 - x**445 - x**353 + x**350 + x**341 + x**308 + x**294 + x**291 - x**284 + x**280 + x**259 - x**232 - x**210 - x**154 - x**151 + x**147 - x**80 - x**75 + x**27 + x**24
        expected_ciphertext = Bytes(b'\xe3\xf6\xdd\n\xdd\xee\xe5-\r\x06\xf4!\xd9\x04\x0f\xf5\x14\x08(4\xf12\xe5\x0e\xd1\x05#\xd9\xf7\xcf\x15\xe8.\xe9\xfc2"\x07"\xd7\xf7\xda\x1c/\xd1\xf8\xef\xc4>2\x18\xc64\xc8\x17\x14\x0e;7\xcf/\xfe\xf9;\xfd\x19\xe01\xff\xf4\n\xc1<\xf9!\xd5\x14\x0b\x13\x03<\x1f\xc3\x1c\xef\x01\x10\xde\xdc(\x169\x05\t\xf0\x101\xcf\x000\xdb%\xc4\xde\xdc"\xe0\xe1\x14\xf58)\xef\xe99\xcd<\x1a\xd5\xf1\xeb\xfe\xde\xf9\xc1\xef\xfd\xf5&\xe1\x13\xe6?\x0b$\xd1\xfa&\xff9\x1a\xe9\x079\x080\xe2\x0e\xf8\xc6\xeb\xe4\xd6%\xc7@+\xe4\x12<\xc4\xf3\xe1\x0e\xe2\xd6\xed\xfc\xe4\xd2\x119\xd3\x1b\xdf\xff0\x03\xd6<8\x0b\xec\xed\xfa\xef\xfd\xcb\xfd85\x0f\xf7\xe1\xc7\xc1\x05\xf2\t\xe1\xdb8\xf0\xdc\xd3\x08\xdd\x1b\xf4\x18\x19\x08\xc2\xfa\x0f\xfc\x1e\xd5\xd7\x1f\x08\x18&\xe6\xc8\x00\xde\xfe\xdc\xd5\xfc\xfd\xeb\xe5>\xfd=\xd1\xcb\xfc\x07\xfd2\xde\x0b\x16\xcf\xec+\xde\x1c-\xd0<\x03\xe3\xca\xc6\'4\x1a\x19\xdf\xcb\xc1-\xe0\x03\xd1\xeb\'\x1d\xd2##\xc5\x1b!\xd26\xce\xd1\xc1\xfd\xfc\xcb\xd6\xca\xd4\xd6\x1c5@5\xc2\x13?\xd1/\x01\xe1\x08\xf6\n\xcf\xe2\xe8\xe5&\xcf@\xfa\xc3\xfe<-\x1e\xc7\xd6\xd3\xd7\xdd\xf3\xec\xf47-\xde\x17\x1e>1\xf9@\xc5\xd7\xe75!\xe2\xd2\x155\xf6\xf6\x12$\x10\xe1\x1e\xde?\x05\xce\x152\xc1\x01\xc4+\x08)\xfe\xff7\xd5=\xce@\r0\xf4\xe70\xd1/@7\xfb\xe8\xd3\xcb0\xd07\xd9\xdd\'\xcb9=\xe8\xe6\xd8\xc9\xcf3\xcb\xd8@\xd7\xfc%-\x13\xc5\xe3\x1f)\xd4\xe88\x0c\xdb\x06\xf3\xe3\xd1\xf4\xeb"-\xe0%\xe7\xf40\x174\xe6\x13#\xf6\xf9\xdf\x1d%=\xc9\xf4)\xd6\xe6\xc4\x10\xce"\xdc\xfe&\xc1\xfa=\xfd4\x12\xc1\xc7\xc3\xc5>2\xda\x06\x04\x1a\xee\x1e\x11\xd6\xd6\xd4,\xf3\xcc8\x18\xf1\xc61\xdb\xc5\x1a\xfa\xd3\xef%\xff\xcf\xea\xf6-\xee\x0c\xcb\xfb4\xe6#\x121\xf9\xd8')

        self._run_correctness_test(N, q, p, f_poly, f_p_poly, h_poly, plaintext, rand_poly, expected_ciphertext)
